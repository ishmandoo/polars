Search.setIndex({"docnames": ["index", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_change_column_data_type_position_format", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_column_separator", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_utf8_tables", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame", "reference/api/polars.DataFrame.apply", "reference/api/polars.DataFrame.cleared", "reference/api/polars.DataFrame.clone", "reference/api/polars.DataFrame.columns", "reference/api/polars.DataFrame.describe", "reference/api/polars.DataFrame.drop", "reference/api/polars.DataFrame.drop_in_place", "reference/api/polars.DataFrame.drop_nulls", "reference/api/polars.DataFrame.dtypes", "reference/api/polars.DataFrame.estimated_size", "reference/api/polars.DataFrame.explode", "reference/api/polars.DataFrame.extend", "reference/api/polars.DataFrame.fill_nan", "reference/api/polars.DataFrame.fill_null", "reference/api/polars.DataFrame.filter", "reference/api/polars.DataFrame.find_idx_by_name", "reference/api/polars.DataFrame.fold", "reference/api/polars.DataFrame.frame_equal", "reference/api/polars.DataFrame.get_column", "reference/api/polars.DataFrame.get_columns", "reference/api/polars.DataFrame.groupby", "reference/api/polars.DataFrame.groupby_dynamic", "reference/api/polars.DataFrame.groupby_rolling", "reference/api/polars.DataFrame.hash_rows", "reference/api/polars.DataFrame.head", "reference/api/polars.DataFrame.height", "reference/api/polars.DataFrame.hstack", "reference/api/polars.DataFrame.insert_at_idx", "reference/api/polars.DataFrame.interpolate", "reference/api/polars.DataFrame.is_duplicated", "reference/api/polars.DataFrame.is_empty", "reference/api/polars.DataFrame.is_unique", "reference/api/polars.DataFrame.join", "reference/api/polars.DataFrame.join_asof", "reference/api/polars.DataFrame.lazy", "reference/api/polars.DataFrame.limit", "reference/api/polars.DataFrame.max", "reference/api/polars.DataFrame.mean", "reference/api/polars.DataFrame.median", "reference/api/polars.DataFrame.melt", "reference/api/polars.DataFrame.min", "reference/api/polars.DataFrame.n_chunks", "reference/api/polars.DataFrame.n_unique", "reference/api/polars.DataFrame.null_count", "reference/api/polars.DataFrame.partition_by", "reference/api/polars.DataFrame.pipe", "reference/api/polars.DataFrame.pivot", "reference/api/polars.DataFrame.product", "reference/api/polars.DataFrame.quantile", "reference/api/polars.DataFrame.rechunk", "reference/api/polars.DataFrame.rename", "reference/api/polars.DataFrame.replace", "reference/api/polars.DataFrame.replace_at_idx", "reference/api/polars.DataFrame.reverse", "reference/api/polars.DataFrame.row", "reference/api/polars.DataFrame.rows", "reference/api/polars.DataFrame.sample", "reference/api/polars.DataFrame.schema", "reference/api/polars.DataFrame.select", "reference/api/polars.DataFrame.shape", "reference/api/polars.DataFrame.shift", "reference/api/polars.DataFrame.shift_and_fill", "reference/api/polars.DataFrame.shrink_to_fit", "reference/api/polars.DataFrame.slice", "reference/api/polars.DataFrame.sort", "reference/api/polars.DataFrame.std", "reference/api/polars.DataFrame.sum", "reference/api/polars.DataFrame.tail", "reference/api/polars.DataFrame.take_every", "reference/api/polars.DataFrame.to_arrow", "reference/api/polars.DataFrame.to_dict", "reference/api/polars.DataFrame.to_dicts", "reference/api/polars.DataFrame.to_dummies", "reference/api/polars.DataFrame.to_numpy", "reference/api/polars.DataFrame.to_pandas", "reference/api/polars.DataFrame.to_series", "reference/api/polars.DataFrame.to_struct", "reference/api/polars.DataFrame.transpose", "reference/api/polars.DataFrame.unique", "reference/api/polars.DataFrame.unnest", "reference/api/polars.DataFrame.unstack", "reference/api/polars.DataFrame.upsample", "reference/api/polars.DataFrame.var", "reference/api/polars.DataFrame.vstack", "reference/api/polars.DataFrame.width", "reference/api/polars.DataFrame.with_column", "reference/api/polars.DataFrame.with_columns", "reference/api/polars.DataFrame.with_row_count", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.Expr", "reference/api/polars.Expr.abs", "reference/api/polars.Expr.agg_groups", "reference/api/polars.Expr.alias", "reference/api/polars.Expr.all", "reference/api/polars.Expr.any", "reference/api/polars.Expr.append", "reference/api/polars.Expr.apply", "reference/api/polars.Expr.arccos", "reference/api/polars.Expr.arccosh", "reference/api/polars.Expr.arcsin", "reference/api/polars.Expr.arcsinh", "reference/api/polars.Expr.arctan", "reference/api/polars.Expr.arctanh", "reference/api/polars.Expr.arg_max", "reference/api/polars.Expr.arg_min", "reference/api/polars.Expr.arg_sort", "reference/api/polars.Expr.arg_unique", "reference/api/polars.Expr.argsort", "reference/api/polars.Expr.arr", "reference/api/polars.Expr.backward_fill", "reference/api/polars.Expr.cast", "reference/api/polars.Expr.cat", "reference/api/polars.Expr.ceil", "reference/api/polars.Expr.clip", "reference/api/polars.Expr.clip_max", "reference/api/polars.Expr.clip_min", "reference/api/polars.Expr.cos", "reference/api/polars.Expr.cosh", "reference/api/polars.Expr.count", "reference/api/polars.Expr.cumcount", "reference/api/polars.Expr.cummax", "reference/api/polars.Expr.cummin", "reference/api/polars.Expr.cumprod", "reference/api/polars.Expr.cumsum", "reference/api/polars.Expr.cumulative_eval", "reference/api/polars.Expr.diff", "reference/api/polars.Expr.dot", "reference/api/polars.Expr.drop_nans", "reference/api/polars.Expr.drop_nulls", "reference/api/polars.Expr.dt", "reference/api/polars.Expr.entropy", "reference/api/polars.Expr.ewm_mean", "reference/api/polars.Expr.ewm_std", "reference/api/polars.Expr.ewm_var", "reference/api/polars.Expr.exclude", "reference/api/polars.Expr.exp", "reference/api/polars.Expr.explode", "reference/api/polars.Expr.extend_constant", "reference/api/polars.Expr.fill_nan", "reference/api/polars.Expr.fill_null", "reference/api/polars.Expr.filter", "reference/api/polars.Expr.first", "reference/api/polars.Expr.flatten", "reference/api/polars.Expr.floor", "reference/api/polars.Expr.forward_fill", "reference/api/polars.Expr.hash", "reference/api/polars.Expr.head", "reference/api/polars.Expr.inspect", "reference/api/polars.Expr.interpolate", "reference/api/polars.Expr.is_between", "reference/api/polars.Expr.is_duplicated", "reference/api/polars.Expr.is_finite", "reference/api/polars.Expr.is_first", "reference/api/polars.Expr.is_in", "reference/api/polars.Expr.is_infinite", "reference/api/polars.Expr.is_nan", "reference/api/polars.Expr.is_not", "reference/api/polars.Expr.is_not_nan", "reference/api/polars.Expr.is_not_null", "reference/api/polars.Expr.is_null", "reference/api/polars.Expr.is_unique", "reference/api/polars.Expr.keep_name", "reference/api/polars.Expr.kurtosis", "reference/api/polars.Expr.last", "reference/api/polars.Expr.len", "reference/api/polars.Expr.limit", "reference/api/polars.Expr.list", "reference/api/polars.Expr.log", "reference/api/polars.Expr.log10", "reference/api/polars.Expr.lower_bound", "reference/api/polars.Expr.map", "reference/api/polars.Expr.map_alias", "reference/api/polars.Expr.max", "reference/api/polars.Expr.mean", "reference/api/polars.Expr.median", "reference/api/polars.Expr.min", "reference/api/polars.Expr.mode", "reference/api/polars.Expr.n_unique", "reference/api/polars.Expr.nan_max", "reference/api/polars.Expr.nan_min", "reference/api/polars.Expr.null_count", "reference/api/polars.Expr.over", "reference/api/polars.Expr.pct_change", "reference/api/polars.Expr.pow", "reference/api/polars.Expr.prefix", "reference/api/polars.Expr.product", "reference/api/polars.Expr.quantile", "reference/api/polars.Expr.rank", "reference/api/polars.Expr.rechunk", "reference/api/polars.Expr.reinterpret", "reference/api/polars.Expr.repeat_by", "reference/api/polars.Expr.reshape", "reference/api/polars.Expr.reverse", "reference/api/polars.Expr.rolling_apply", "reference/api/polars.Expr.rolling_max", "reference/api/polars.Expr.rolling_mean", "reference/api/polars.Expr.rolling_median", "reference/api/polars.Expr.rolling_min", "reference/api/polars.Expr.rolling_quantile", "reference/api/polars.Expr.rolling_skew", "reference/api/polars.Expr.rolling_std", "reference/api/polars.Expr.rolling_sum", "reference/api/polars.Expr.rolling_var", "reference/api/polars.Expr.round", "reference/api/polars.Expr.sample", "reference/api/polars.Expr.search_sorted", "reference/api/polars.Expr.set_sorted", "reference/api/polars.Expr.shift", "reference/api/polars.Expr.shift_and_fill", "reference/api/polars.Expr.shuffle", "reference/api/polars.Expr.sign", "reference/api/polars.Expr.sin", "reference/api/polars.Expr.sinh", "reference/api/polars.Expr.skew", "reference/api/polars.Expr.slice", "reference/api/polars.Expr.sort", "reference/api/polars.Expr.sort_by", "reference/api/polars.Expr.sqrt", "reference/api/polars.Expr.std", "reference/api/polars.Expr.str", "reference/api/polars.Expr.suffix", "reference/api/polars.Expr.sum", "reference/api/polars.Expr.tail", "reference/api/polars.Expr.take", "reference/api/polars.Expr.take_every", "reference/api/polars.Expr.tan", "reference/api/polars.Expr.tanh", "reference/api/polars.Expr.to_physical", "reference/api/polars.Expr.top_k", "reference/api/polars.Expr.unique", "reference/api/polars.Expr.unique_counts", "reference/api/polars.Expr.upper_bound", "reference/api/polars.Expr.value_counts", "reference/api/polars.Expr.var", "reference/api/polars.Expr.where", "reference/api/polars.LazyFrame.cache", "reference/api/polars.LazyFrame.cleared", "reference/api/polars.LazyFrame.clone", "reference/api/polars.LazyFrame.collect", "reference/api/polars.LazyFrame.columns", "reference/api/polars.LazyFrame.describe_optimized_plan", "reference/api/polars.LazyFrame.describe_plan", "reference/api/polars.LazyFrame.drop", "reference/api/polars.LazyFrame.drop_nulls", "reference/api/polars.LazyFrame.dtypes", "reference/api/polars.LazyFrame.explode", "reference/api/polars.LazyFrame.fetch", "reference/api/polars.LazyFrame.fill_nan", "reference/api/polars.LazyFrame.fill_null", "reference/api/polars.LazyFrame.filter", "reference/api/polars.LazyFrame.first", "reference/api/polars.LazyFrame.from_json", "reference/api/polars.LazyFrame.groupby", "reference/api/polars.LazyFrame.groupby_dynamic", "reference/api/polars.LazyFrame.groupby_rolling", "reference/api/polars.LazyFrame.head", "reference/api/polars.LazyFrame.inspect", "reference/api/polars.LazyFrame.interpolate", "reference/api/polars.LazyFrame.join", "reference/api/polars.LazyFrame.join_asof", "reference/api/polars.LazyFrame.last", "reference/api/polars.LazyFrame.limit", "reference/api/polars.LazyFrame.map", "reference/api/polars.LazyFrame.max", "reference/api/polars.LazyFrame.mean", "reference/api/polars.LazyFrame.median", "reference/api/polars.LazyFrame.melt", "reference/api/polars.LazyFrame.min", "reference/api/polars.LazyFrame.pipe", "reference/api/polars.LazyFrame.profile", "reference/api/polars.LazyFrame.quantile", "reference/api/polars.LazyFrame.read_json", "reference/api/polars.LazyFrame.rename", "reference/api/polars.LazyFrame.reverse", "reference/api/polars.LazyFrame.schema", "reference/api/polars.LazyFrame.select", "reference/api/polars.LazyFrame.shift", "reference/api/polars.LazyFrame.shift_and_fill", "reference/api/polars.LazyFrame.show_graph", "reference/api/polars.LazyFrame.slice", "reference/api/polars.LazyFrame.sort", "reference/api/polars.LazyFrame.std", "reference/api/polars.LazyFrame.sum", "reference/api/polars.LazyFrame.tail", "reference/api/polars.LazyFrame.take_every", "reference/api/polars.LazyFrame.unique", "reference/api/polars.LazyFrame.unnest", "reference/api/polars.LazyFrame.var", "reference/api/polars.LazyFrame.with_column", "reference/api/polars.LazyFrame.with_columns", "reference/api/polars.LazyFrame.with_context", "reference/api/polars.LazyFrame.with_row_count", "reference/api/polars.LazyFrame.write_json", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.Series", "reference/api/polars.Series.abs", "reference/api/polars.Series.alias", "reference/api/polars.Series.all", "reference/api/polars.Series.any", "reference/api/polars.Series.append", "reference/api/polars.Series.apply", "reference/api/polars.Series.arccos", "reference/api/polars.Series.arccosh", "reference/api/polars.Series.arcsin", "reference/api/polars.Series.arcsinh", "reference/api/polars.Series.arctan", "reference/api/polars.Series.arctanh", "reference/api/polars.Series.arg_max", "reference/api/polars.Series.arg_min", "reference/api/polars.Series.arg_sort", "reference/api/polars.Series.arg_true", "reference/api/polars.Series.arg_unique", "reference/api/polars.Series.argsort", "reference/api/polars.Series.arr", "reference/api/polars.Series.cast", "reference/api/polars.Series.cat", "reference/api/polars.Series.ceil", "reference/api/polars.Series.chunk_lengths", "reference/api/polars.Series.cleared", "reference/api/polars.Series.clip", "reference/api/polars.Series.clip_max", "reference/api/polars.Series.clip_min", "reference/api/polars.Series.clone", "reference/api/polars.Series.cos", "reference/api/polars.Series.cosh", "reference/api/polars.Series.cummax", "reference/api/polars.Series.cummin", "reference/api/polars.Series.cumprod", "reference/api/polars.Series.cumsum", "reference/api/polars.Series.cumulative_eval", "reference/api/polars.Series.describe", "reference/api/polars.Series.diff", "reference/api/polars.Series.dot", "reference/api/polars.Series.drop_nans", "reference/api/polars.Series.drop_nulls", "reference/api/polars.Series.dt", "reference/api/polars.Series.dtype", "reference/api/polars.Series.entropy", "reference/api/polars.Series.estimated_size", "reference/api/polars.Series.ewm_mean", "reference/api/polars.Series.ewm_std", "reference/api/polars.Series.ewm_var", "reference/api/polars.Series.exp", "reference/api/polars.Series.explode", "reference/api/polars.Series.extend_constant", "reference/api/polars.Series.fill_nan", "reference/api/polars.Series.fill_null", "reference/api/polars.Series.filter", "reference/api/polars.Series.flags", "reference/api/polars.Series.floor", "reference/api/polars.Series.has_validity", "reference/api/polars.Series.hash", "reference/api/polars.Series.head", "reference/api/polars.Series.inner_dtype", "reference/api/polars.Series.interpolate", "reference/api/polars.Series.is_boolean", "reference/api/polars.Series.is_datelike", "reference/api/polars.Series.is_duplicated", "reference/api/polars.Series.is_empty", "reference/api/polars.Series.is_finite", "reference/api/polars.Series.is_first", "reference/api/polars.Series.is_float", "reference/api/polars.Series.is_in", "reference/api/polars.Series.is_infinite", "reference/api/polars.Series.is_nan", "reference/api/polars.Series.is_not_nan", "reference/api/polars.Series.is_not_null", "reference/api/polars.Series.is_null", "reference/api/polars.Series.is_numeric", "reference/api/polars.Series.is_unique", "reference/api/polars.Series.is_utf8", "reference/api/polars.Series.kurtosis", "reference/api/polars.Series.len", "reference/api/polars.Series.limit", "reference/api/polars.Series.log", "reference/api/polars.Series.log10", "reference/api/polars.Series.max", "reference/api/polars.Series.mean", "reference/api/polars.Series.median", "reference/api/polars.Series.min", "reference/api/polars.Series.mode", "reference/api/polars.Series.n_chunks", "reference/api/polars.Series.n_unique", "reference/api/polars.Series.name", "reference/api/polars.Series.nan_max", "reference/api/polars.Series.nan_min", "reference/api/polars.Series.null_count", "reference/api/polars.Series.pct_change", "reference/api/polars.Series.peak_max", "reference/api/polars.Series.peak_min", "reference/api/polars.Series.product", "reference/api/polars.Series.quantile", "reference/api/polars.Series.rank", "reference/api/polars.Series.rechunk", "reference/api/polars.Series.reinterpret", "reference/api/polars.Series.rename", "reference/api/polars.Series.reshape", "reference/api/polars.Series.reverse", "reference/api/polars.Series.rolling_apply", "reference/api/polars.Series.rolling_max", "reference/api/polars.Series.rolling_mean", "reference/api/polars.Series.rolling_median", "reference/api/polars.Series.rolling_min", "reference/api/polars.Series.rolling_quantile", "reference/api/polars.Series.rolling_skew", "reference/api/polars.Series.rolling_std", "reference/api/polars.Series.rolling_sum", "reference/api/polars.Series.rolling_var", "reference/api/polars.Series.round", "reference/api/polars.Series.sample", "reference/api/polars.Series.search_sorted", "reference/api/polars.Series.series_equal", "reference/api/polars.Series.set", "reference/api/polars.Series.set_at_idx", "reference/api/polars.Series.set_sorted", "reference/api/polars.Series.shape", "reference/api/polars.Series.shift", "reference/api/polars.Series.shift_and_fill", "reference/api/polars.Series.shrink_to_fit", "reference/api/polars.Series.shuffle", "reference/api/polars.Series.sign", "reference/api/polars.Series.sin", "reference/api/polars.Series.sinh", "reference/api/polars.Series.skew", "reference/api/polars.Series.slice", "reference/api/polars.Series.sort", "reference/api/polars.Series.sqrt", "reference/api/polars.Series.std", "reference/api/polars.Series.str", "reference/api/polars.Series.sum", "reference/api/polars.Series.tail", "reference/api/polars.Series.take", "reference/api/polars.Series.take_every", "reference/api/polars.Series.tan", "reference/api/polars.Series.tanh", "reference/api/polars.Series.time_unit", "reference/api/polars.Series.to_arrow", "reference/api/polars.Series.to_dummies", "reference/api/polars.Series.to_frame", "reference/api/polars.Series.to_list", "reference/api/polars.Series.to_numpy", "reference/api/polars.Series.to_pandas", "reference/api/polars.Series.to_physical", "reference/api/polars.Series.top_k", "reference/api/polars.Series.unique", "reference/api/polars.Series.unique_counts", "reference/api/polars.Series.value_counts", "reference/api/polars.Series.var", "reference/api/polars.Series.view", "reference/api/polars.Series.zip_with", "reference/api/polars.StringCache", "reference/api/polars.all", "reference/api/polars.any", "reference/api/polars.apply", "reference/api/polars.arange", "reference/api/polars.arg_where", "reference/api/polars.argsort_by", "reference/api/polars.avg", "reference/api/polars.coalesce", "reference/api/polars.col", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.concat_list", "reference/api/polars.concat_str", "reference/api/polars.count", "reference/api/polars.cov", "reference/api/polars.cumfold", "reference/api/polars.cumsum", "reference/api/polars.cut", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.datatypes.get_idx_type", "reference/api/polars.date", "reference/api/polars.date_range", "reference/api/polars.datetime", "reference/api/polars.duration", "reference/api/polars.element", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.NotFoundError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.exclude", "reference/api/polars.first", "reference/api/polars.fold", "reference/api/polars.format", "reference/api/polars.from_arrow", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.groups", "reference/api/polars.head", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg_list", "reference/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/api/polars.internals.dataframe.groupby.GroupBy.pivot", "reference/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/api/polars.internals.dataframe.pivot.PivotOps.count", "reference/api/polars.internals.dataframe.pivot.PivotOps.first", "reference/api/polars.internals.dataframe.pivot.PivotOps.last", "reference/api/polars.internals.dataframe.pivot.PivotOps.max", "reference/api/polars.internals.dataframe.pivot.PivotOps.mean", "reference/api/polars.internals.dataframe.pivot.PivotOps.median", "reference/api/polars.internals.dataframe.pivot.PivotOps.min", "reference/api/polars.internals.dataframe.pivot.PivotOps.sum", "reference/api/polars.internals.expr.categorical.ExprCatNameSpace.set_ordering", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_zone", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.day", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.days", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hour", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hours", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minute", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.month", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.second", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.week", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.year", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_max", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_min", "reference/api/polars.internals.expr.list.ExprListNameSpace.concat", "reference/api/polars.internals.expr.list.ExprListNameSpace.contains", "reference/api/polars.internals.expr.list.ExprListNameSpace.diff", "reference/api/polars.internals.expr.list.ExprListNameSpace.eval", "reference/api/polars.internals.expr.list.ExprListNameSpace.first", "reference/api/polars.internals.expr.list.ExprListNameSpace.get", "reference/api/polars.internals.expr.list.ExprListNameSpace.head", "reference/api/polars.internals.expr.list.ExprListNameSpace.join", "reference/api/polars.internals.expr.list.ExprListNameSpace.last", "reference/api/polars.internals.expr.list.ExprListNameSpace.lengths", "reference/api/polars.internals.expr.list.ExprListNameSpace.max", "reference/api/polars.internals.expr.list.ExprListNameSpace.mean", "reference/api/polars.internals.expr.list.ExprListNameSpace.min", "reference/api/polars.internals.expr.list.ExprListNameSpace.reverse", "reference/api/polars.internals.expr.list.ExprListNameSpace.shift", "reference/api/polars.internals.expr.list.ExprListNameSpace.slice", "reference/api/polars.internals.expr.list.ExprListNameSpace.sort", "reference/api/polars.internals.expr.list.ExprListNameSpace.sum", "reference/api/polars.internals.expr.list.ExprListNameSpace.tail", "reference/api/polars.internals.expr.list.ExprListNameSpace.to_struct", "reference/api/polars.internals.expr.list.ExprListNameSpace.unique", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.output_name", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.pop", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.root_names", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases", "reference/api/polars.internals.expr.string.ExprStringNameSpace.concat", "reference/api/polars.internals.expr.string.ExprStringNameSpace.contains", "reference/api/polars.internals.expr.string.ExprStringNameSpace.count_match", "reference/api/polars.internals.expr.string.ExprStringNameSpace.decode", "reference/api/polars.internals.expr.string.ExprStringNameSpace.encode", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ends_with", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract_all", "reference/api/polars.internals.expr.string.ExprStringNameSpace.json_path_match", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lengths", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ljust", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lstrip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace_all", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rjust", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rstrip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.slice", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split_exact", "reference/api/polars.internals.expr.string.ExprStringNameSpace.splitn", "reference/api/polars.internals.expr.string.ExprStringNameSpace.starts_with", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strptime", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_lowercase", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_uppercase", "reference/api/polars.internals.expr.string.ExprStringNameSpace.zfill", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.field", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.rename_fields", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/api/polars.internals.series.categorical.CatNameSpace.set_ordering", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_zone", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.day", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.days", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.epoch", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hour", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hours", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.iso_year", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.max", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.mean", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.median", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.microsecond", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.microseconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.millisecond", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.milliseconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.min", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minute", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minutes", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.month", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanosecond", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanoseconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.offset_by", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.ordinal_day", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.quarter", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.second", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.seconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.strftime", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.timestamp", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.truncate", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.week", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.weekday", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.with_time_unit", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.year", "reference/api/polars.internals.series.list.ListNameSpace.arg_max", "reference/api/polars.internals.series.list.ListNameSpace.arg_min", "reference/api/polars.internals.series.list.ListNameSpace.concat", "reference/api/polars.internals.series.list.ListNameSpace.contains", "reference/api/polars.internals.series.list.ListNameSpace.diff", "reference/api/polars.internals.series.list.ListNameSpace.eval", "reference/api/polars.internals.series.list.ListNameSpace.first", "reference/api/polars.internals.series.list.ListNameSpace.get", "reference/api/polars.internals.series.list.ListNameSpace.head", "reference/api/polars.internals.series.list.ListNameSpace.join", "reference/api/polars.internals.series.list.ListNameSpace.last", "reference/api/polars.internals.series.list.ListNameSpace.lengths", "reference/api/polars.internals.series.list.ListNameSpace.max", "reference/api/polars.internals.series.list.ListNameSpace.mean", "reference/api/polars.internals.series.list.ListNameSpace.min", "reference/api/polars.internals.series.list.ListNameSpace.reverse", "reference/api/polars.internals.series.list.ListNameSpace.shift", "reference/api/polars.internals.series.list.ListNameSpace.slice", "reference/api/polars.internals.series.list.ListNameSpace.sort", "reference/api/polars.internals.series.list.ListNameSpace.sum", "reference/api/polars.internals.series.list.ListNameSpace.tail", "reference/api/polars.internals.series.list.ListNameSpace.unique", "reference/api/polars.internals.series.string.StringNameSpace.concat", "reference/api/polars.internals.series.string.StringNameSpace.contains", "reference/api/polars.internals.series.string.StringNameSpace.count_match", "reference/api/polars.internals.series.string.StringNameSpace.decode", "reference/api/polars.internals.series.string.StringNameSpace.encode", "reference/api/polars.internals.series.string.StringNameSpace.ends_with", "reference/api/polars.internals.series.string.StringNameSpace.extract", "reference/api/polars.internals.series.string.StringNameSpace.extract_all", "reference/api/polars.internals.series.string.StringNameSpace.json_path_match", "reference/api/polars.internals.series.string.StringNameSpace.lengths", "reference/api/polars.internals.series.string.StringNameSpace.ljust", "reference/api/polars.internals.series.string.StringNameSpace.lstrip", "reference/api/polars.internals.series.string.StringNameSpace.replace", "reference/api/polars.internals.series.string.StringNameSpace.replace_all", "reference/api/polars.internals.series.string.StringNameSpace.rjust", "reference/api/polars.internals.series.string.StringNameSpace.rstrip", "reference/api/polars.internals.series.string.StringNameSpace.slice", "reference/api/polars.internals.series.string.StringNameSpace.split", "reference/api/polars.internals.series.string.StringNameSpace.split_exact", "reference/api/polars.internals.series.string.StringNameSpace.splitn", "reference/api/polars.internals.series.string.StringNameSpace.starts_with", "reference/api/polars.internals.series.string.StringNameSpace.strip", "reference/api/polars.internals.series.string.StringNameSpace.strptime", "reference/api/polars.internals.series.string.StringNameSpace.to_lowercase", "reference/api/polars.internals.series.string.StringNameSpace.to_uppercase", "reference/api/polars.internals.series.string.StringNameSpace.zfill", "reference/api/polars.internals.series.struct.StructNameSpace.field", "reference/api/polars.internals.series.struct.StructNameSpace.fields", "reference/api/polars.internals.series.struct.StructNameSpace.rename_fields", "reference/api/polars.internals.series.struct.StructNameSpace.to_frame", "reference/api/polars.list", "reference/api/polars.lit", "reference/api/polars.map", "reference/api/polars.max", "reference/api/polars.mean", "reference/api/polars.median", "reference/api/polars.min", "reference/api/polars.n_unique", "reference/api/polars.pearson_corr", "reference/api/polars.quantile", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.repeat", "reference/api/polars.scan_csv", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.select", "reference/api/polars.show_versions", "reference/api/polars.spearman_rank_corr", "reference/api/polars.std", "reference/api/polars.struct", "reference/api/polars.sum", "reference/api/polars.tail", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.column", "reference/api/polars.testing.columns", "reference/api/polars.testing.dataframes", "reference/api/polars.testing.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.var", "reference/api/polars.when", "reference/config", "reference/dataframe", "reference/datatypes", "reference/exceptions", "reference/expression", "reference/functions", "reference/index", "reference/io", "reference/lazyframe", "reference/series", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_change_column_data_type_position_format.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_column_separator.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_utf8_tables.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.rst", "reference/api/polars.DataFrame.apply.rst", "reference/api/polars.DataFrame.cleared.rst", "reference/api/polars.DataFrame.clone.rst", "reference/api/polars.DataFrame.columns.rst", "reference/api/polars.DataFrame.describe.rst", "reference/api/polars.DataFrame.drop.rst", "reference/api/polars.DataFrame.drop_in_place.rst", "reference/api/polars.DataFrame.drop_nulls.rst", "reference/api/polars.DataFrame.dtypes.rst", "reference/api/polars.DataFrame.estimated_size.rst", "reference/api/polars.DataFrame.explode.rst", "reference/api/polars.DataFrame.extend.rst", "reference/api/polars.DataFrame.fill_nan.rst", "reference/api/polars.DataFrame.fill_null.rst", "reference/api/polars.DataFrame.filter.rst", "reference/api/polars.DataFrame.find_idx_by_name.rst", "reference/api/polars.DataFrame.fold.rst", "reference/api/polars.DataFrame.frame_equal.rst", "reference/api/polars.DataFrame.get_column.rst", "reference/api/polars.DataFrame.get_columns.rst", "reference/api/polars.DataFrame.groupby.rst", "reference/api/polars.DataFrame.groupby_dynamic.rst", "reference/api/polars.DataFrame.groupby_rolling.rst", "reference/api/polars.DataFrame.hash_rows.rst", "reference/api/polars.DataFrame.head.rst", "reference/api/polars.DataFrame.height.rst", "reference/api/polars.DataFrame.hstack.rst", "reference/api/polars.DataFrame.insert_at_idx.rst", "reference/api/polars.DataFrame.interpolate.rst", "reference/api/polars.DataFrame.is_duplicated.rst", "reference/api/polars.DataFrame.is_empty.rst", "reference/api/polars.DataFrame.is_unique.rst", "reference/api/polars.DataFrame.join.rst", "reference/api/polars.DataFrame.join_asof.rst", "reference/api/polars.DataFrame.lazy.rst", "reference/api/polars.DataFrame.limit.rst", "reference/api/polars.DataFrame.max.rst", "reference/api/polars.DataFrame.mean.rst", "reference/api/polars.DataFrame.median.rst", "reference/api/polars.DataFrame.melt.rst", "reference/api/polars.DataFrame.min.rst", "reference/api/polars.DataFrame.n_chunks.rst", "reference/api/polars.DataFrame.n_unique.rst", "reference/api/polars.DataFrame.null_count.rst", "reference/api/polars.DataFrame.partition_by.rst", "reference/api/polars.DataFrame.pipe.rst", "reference/api/polars.DataFrame.pivot.rst", "reference/api/polars.DataFrame.product.rst", "reference/api/polars.DataFrame.quantile.rst", "reference/api/polars.DataFrame.rechunk.rst", "reference/api/polars.DataFrame.rename.rst", "reference/api/polars.DataFrame.replace.rst", "reference/api/polars.DataFrame.replace_at_idx.rst", "reference/api/polars.DataFrame.reverse.rst", "reference/api/polars.DataFrame.row.rst", "reference/api/polars.DataFrame.rows.rst", "reference/api/polars.DataFrame.sample.rst", "reference/api/polars.DataFrame.schema.rst", "reference/api/polars.DataFrame.select.rst", "reference/api/polars.DataFrame.shape.rst", "reference/api/polars.DataFrame.shift.rst", "reference/api/polars.DataFrame.shift_and_fill.rst", "reference/api/polars.DataFrame.shrink_to_fit.rst", "reference/api/polars.DataFrame.slice.rst", "reference/api/polars.DataFrame.sort.rst", "reference/api/polars.DataFrame.std.rst", "reference/api/polars.DataFrame.sum.rst", "reference/api/polars.DataFrame.tail.rst", "reference/api/polars.DataFrame.take_every.rst", "reference/api/polars.DataFrame.to_arrow.rst", "reference/api/polars.DataFrame.to_dict.rst", "reference/api/polars.DataFrame.to_dicts.rst", "reference/api/polars.DataFrame.to_dummies.rst", "reference/api/polars.DataFrame.to_numpy.rst", "reference/api/polars.DataFrame.to_pandas.rst", "reference/api/polars.DataFrame.to_series.rst", "reference/api/polars.DataFrame.to_struct.rst", "reference/api/polars.DataFrame.transpose.rst", "reference/api/polars.DataFrame.unique.rst", "reference/api/polars.DataFrame.unnest.rst", "reference/api/polars.DataFrame.unstack.rst", "reference/api/polars.DataFrame.upsample.rst", "reference/api/polars.DataFrame.var.rst", "reference/api/polars.DataFrame.vstack.rst", "reference/api/polars.DataFrame.width.rst", "reference/api/polars.DataFrame.with_column.rst", "reference/api/polars.DataFrame.with_columns.rst", "reference/api/polars.DataFrame.with_row_count.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.Expr.rst", "reference/api/polars.Expr.abs.rst", "reference/api/polars.Expr.agg_groups.rst", "reference/api/polars.Expr.alias.rst", "reference/api/polars.Expr.all.rst", "reference/api/polars.Expr.any.rst", "reference/api/polars.Expr.append.rst", "reference/api/polars.Expr.apply.rst", "reference/api/polars.Expr.arccos.rst", "reference/api/polars.Expr.arccosh.rst", "reference/api/polars.Expr.arcsin.rst", "reference/api/polars.Expr.arcsinh.rst", "reference/api/polars.Expr.arctan.rst", "reference/api/polars.Expr.arctanh.rst", "reference/api/polars.Expr.arg_max.rst", "reference/api/polars.Expr.arg_min.rst", "reference/api/polars.Expr.arg_sort.rst", "reference/api/polars.Expr.arg_unique.rst", "reference/api/polars.Expr.argsort.rst", "reference/api/polars.Expr.arr.rst", "reference/api/polars.Expr.backward_fill.rst", "reference/api/polars.Expr.cast.rst", "reference/api/polars.Expr.cat.rst", "reference/api/polars.Expr.ceil.rst", "reference/api/polars.Expr.clip.rst", "reference/api/polars.Expr.clip_max.rst", "reference/api/polars.Expr.clip_min.rst", "reference/api/polars.Expr.cos.rst", "reference/api/polars.Expr.cosh.rst", "reference/api/polars.Expr.count.rst", "reference/api/polars.Expr.cumcount.rst", "reference/api/polars.Expr.cummax.rst", "reference/api/polars.Expr.cummin.rst", "reference/api/polars.Expr.cumprod.rst", "reference/api/polars.Expr.cumsum.rst", "reference/api/polars.Expr.cumulative_eval.rst", "reference/api/polars.Expr.diff.rst", "reference/api/polars.Expr.dot.rst", "reference/api/polars.Expr.drop_nans.rst", "reference/api/polars.Expr.drop_nulls.rst", "reference/api/polars.Expr.dt.rst", "reference/api/polars.Expr.entropy.rst", "reference/api/polars.Expr.ewm_mean.rst", "reference/api/polars.Expr.ewm_std.rst", "reference/api/polars.Expr.ewm_var.rst", "reference/api/polars.Expr.exclude.rst", "reference/api/polars.Expr.exp.rst", "reference/api/polars.Expr.explode.rst", "reference/api/polars.Expr.extend_constant.rst", "reference/api/polars.Expr.fill_nan.rst", "reference/api/polars.Expr.fill_null.rst", "reference/api/polars.Expr.filter.rst", "reference/api/polars.Expr.first.rst", "reference/api/polars.Expr.flatten.rst", "reference/api/polars.Expr.floor.rst", "reference/api/polars.Expr.forward_fill.rst", "reference/api/polars.Expr.hash.rst", "reference/api/polars.Expr.head.rst", "reference/api/polars.Expr.inspect.rst", "reference/api/polars.Expr.interpolate.rst", "reference/api/polars.Expr.is_between.rst", "reference/api/polars.Expr.is_duplicated.rst", "reference/api/polars.Expr.is_finite.rst", "reference/api/polars.Expr.is_first.rst", "reference/api/polars.Expr.is_in.rst", "reference/api/polars.Expr.is_infinite.rst", "reference/api/polars.Expr.is_nan.rst", "reference/api/polars.Expr.is_not.rst", "reference/api/polars.Expr.is_not_nan.rst", "reference/api/polars.Expr.is_not_null.rst", "reference/api/polars.Expr.is_null.rst", "reference/api/polars.Expr.is_unique.rst", "reference/api/polars.Expr.keep_name.rst", "reference/api/polars.Expr.kurtosis.rst", "reference/api/polars.Expr.last.rst", "reference/api/polars.Expr.len.rst", "reference/api/polars.Expr.limit.rst", "reference/api/polars.Expr.list.rst", "reference/api/polars.Expr.log.rst", "reference/api/polars.Expr.log10.rst", "reference/api/polars.Expr.lower_bound.rst", "reference/api/polars.Expr.map.rst", "reference/api/polars.Expr.map_alias.rst", "reference/api/polars.Expr.max.rst", "reference/api/polars.Expr.mean.rst", "reference/api/polars.Expr.median.rst", "reference/api/polars.Expr.min.rst", "reference/api/polars.Expr.mode.rst", "reference/api/polars.Expr.n_unique.rst", "reference/api/polars.Expr.nan_max.rst", "reference/api/polars.Expr.nan_min.rst", "reference/api/polars.Expr.null_count.rst", "reference/api/polars.Expr.over.rst", "reference/api/polars.Expr.pct_change.rst", "reference/api/polars.Expr.pow.rst", "reference/api/polars.Expr.prefix.rst", "reference/api/polars.Expr.product.rst", "reference/api/polars.Expr.quantile.rst", "reference/api/polars.Expr.rank.rst", "reference/api/polars.Expr.rechunk.rst", "reference/api/polars.Expr.reinterpret.rst", "reference/api/polars.Expr.repeat_by.rst", "reference/api/polars.Expr.reshape.rst", "reference/api/polars.Expr.reverse.rst", "reference/api/polars.Expr.rolling_apply.rst", "reference/api/polars.Expr.rolling_max.rst", "reference/api/polars.Expr.rolling_mean.rst", "reference/api/polars.Expr.rolling_median.rst", "reference/api/polars.Expr.rolling_min.rst", "reference/api/polars.Expr.rolling_quantile.rst", "reference/api/polars.Expr.rolling_skew.rst", "reference/api/polars.Expr.rolling_std.rst", "reference/api/polars.Expr.rolling_sum.rst", "reference/api/polars.Expr.rolling_var.rst", "reference/api/polars.Expr.round.rst", "reference/api/polars.Expr.sample.rst", "reference/api/polars.Expr.search_sorted.rst", "reference/api/polars.Expr.set_sorted.rst", "reference/api/polars.Expr.shift.rst", "reference/api/polars.Expr.shift_and_fill.rst", "reference/api/polars.Expr.shuffle.rst", "reference/api/polars.Expr.sign.rst", "reference/api/polars.Expr.sin.rst", "reference/api/polars.Expr.sinh.rst", "reference/api/polars.Expr.skew.rst", "reference/api/polars.Expr.slice.rst", "reference/api/polars.Expr.sort.rst", "reference/api/polars.Expr.sort_by.rst", "reference/api/polars.Expr.sqrt.rst", "reference/api/polars.Expr.std.rst", "reference/api/polars.Expr.str.rst", "reference/api/polars.Expr.suffix.rst", "reference/api/polars.Expr.sum.rst", "reference/api/polars.Expr.tail.rst", "reference/api/polars.Expr.take.rst", "reference/api/polars.Expr.take_every.rst", "reference/api/polars.Expr.tan.rst", "reference/api/polars.Expr.tanh.rst", "reference/api/polars.Expr.to_physical.rst", "reference/api/polars.Expr.top_k.rst", "reference/api/polars.Expr.unique.rst", "reference/api/polars.Expr.unique_counts.rst", "reference/api/polars.Expr.upper_bound.rst", "reference/api/polars.Expr.value_counts.rst", "reference/api/polars.Expr.var.rst", "reference/api/polars.Expr.where.rst", "reference/api/polars.LazyFrame.cache.rst", "reference/api/polars.LazyFrame.cleared.rst", "reference/api/polars.LazyFrame.clone.rst", "reference/api/polars.LazyFrame.collect.rst", "reference/api/polars.LazyFrame.columns.rst", "reference/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/api/polars.LazyFrame.describe_plan.rst", "reference/api/polars.LazyFrame.drop.rst", "reference/api/polars.LazyFrame.drop_nulls.rst", "reference/api/polars.LazyFrame.dtypes.rst", "reference/api/polars.LazyFrame.explode.rst", "reference/api/polars.LazyFrame.fetch.rst", "reference/api/polars.LazyFrame.fill_nan.rst", "reference/api/polars.LazyFrame.fill_null.rst", "reference/api/polars.LazyFrame.filter.rst", "reference/api/polars.LazyFrame.first.rst", "reference/api/polars.LazyFrame.from_json.rst", "reference/api/polars.LazyFrame.groupby.rst", "reference/api/polars.LazyFrame.groupby_dynamic.rst", "reference/api/polars.LazyFrame.groupby_rolling.rst", "reference/api/polars.LazyFrame.head.rst", "reference/api/polars.LazyFrame.inspect.rst", "reference/api/polars.LazyFrame.interpolate.rst", "reference/api/polars.LazyFrame.join.rst", "reference/api/polars.LazyFrame.join_asof.rst", "reference/api/polars.LazyFrame.last.rst", "reference/api/polars.LazyFrame.limit.rst", "reference/api/polars.LazyFrame.map.rst", "reference/api/polars.LazyFrame.max.rst", "reference/api/polars.LazyFrame.mean.rst", "reference/api/polars.LazyFrame.median.rst", "reference/api/polars.LazyFrame.melt.rst", "reference/api/polars.LazyFrame.min.rst", "reference/api/polars.LazyFrame.pipe.rst", "reference/api/polars.LazyFrame.profile.rst", "reference/api/polars.LazyFrame.quantile.rst", "reference/api/polars.LazyFrame.read_json.rst", "reference/api/polars.LazyFrame.rename.rst", "reference/api/polars.LazyFrame.reverse.rst", "reference/api/polars.LazyFrame.schema.rst", "reference/api/polars.LazyFrame.select.rst", "reference/api/polars.LazyFrame.shift.rst", "reference/api/polars.LazyFrame.shift_and_fill.rst", "reference/api/polars.LazyFrame.show_graph.rst", "reference/api/polars.LazyFrame.slice.rst", "reference/api/polars.LazyFrame.sort.rst", "reference/api/polars.LazyFrame.std.rst", "reference/api/polars.LazyFrame.sum.rst", "reference/api/polars.LazyFrame.tail.rst", "reference/api/polars.LazyFrame.take_every.rst", "reference/api/polars.LazyFrame.unique.rst", "reference/api/polars.LazyFrame.unnest.rst", "reference/api/polars.LazyFrame.var.rst", "reference/api/polars.LazyFrame.with_column.rst", "reference/api/polars.LazyFrame.with_columns.rst", "reference/api/polars.LazyFrame.with_context.rst", "reference/api/polars.LazyFrame.with_row_count.rst", "reference/api/polars.LazyFrame.write_json.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.Series.rst", "reference/api/polars.Series.abs.rst", "reference/api/polars.Series.alias.rst", "reference/api/polars.Series.all.rst", "reference/api/polars.Series.any.rst", "reference/api/polars.Series.append.rst", "reference/api/polars.Series.apply.rst", "reference/api/polars.Series.arccos.rst", "reference/api/polars.Series.arccosh.rst", "reference/api/polars.Series.arcsin.rst", "reference/api/polars.Series.arcsinh.rst", "reference/api/polars.Series.arctan.rst", "reference/api/polars.Series.arctanh.rst", "reference/api/polars.Series.arg_max.rst", "reference/api/polars.Series.arg_min.rst", "reference/api/polars.Series.arg_sort.rst", "reference/api/polars.Series.arg_true.rst", "reference/api/polars.Series.arg_unique.rst", "reference/api/polars.Series.argsort.rst", "reference/api/polars.Series.arr.rst", "reference/api/polars.Series.cast.rst", "reference/api/polars.Series.cat.rst", "reference/api/polars.Series.ceil.rst", "reference/api/polars.Series.chunk_lengths.rst", "reference/api/polars.Series.cleared.rst", "reference/api/polars.Series.clip.rst", "reference/api/polars.Series.clip_max.rst", "reference/api/polars.Series.clip_min.rst", "reference/api/polars.Series.clone.rst", "reference/api/polars.Series.cos.rst", "reference/api/polars.Series.cosh.rst", "reference/api/polars.Series.cummax.rst", "reference/api/polars.Series.cummin.rst", "reference/api/polars.Series.cumprod.rst", "reference/api/polars.Series.cumsum.rst", "reference/api/polars.Series.cumulative_eval.rst", "reference/api/polars.Series.describe.rst", "reference/api/polars.Series.diff.rst", "reference/api/polars.Series.dot.rst", "reference/api/polars.Series.drop_nans.rst", "reference/api/polars.Series.drop_nulls.rst", "reference/api/polars.Series.dt.rst", "reference/api/polars.Series.dtype.rst", "reference/api/polars.Series.entropy.rst", "reference/api/polars.Series.estimated_size.rst", "reference/api/polars.Series.ewm_mean.rst", "reference/api/polars.Series.ewm_std.rst", "reference/api/polars.Series.ewm_var.rst", "reference/api/polars.Series.exp.rst", "reference/api/polars.Series.explode.rst", "reference/api/polars.Series.extend_constant.rst", "reference/api/polars.Series.fill_nan.rst", "reference/api/polars.Series.fill_null.rst", "reference/api/polars.Series.filter.rst", "reference/api/polars.Series.flags.rst", "reference/api/polars.Series.floor.rst", "reference/api/polars.Series.has_validity.rst", "reference/api/polars.Series.hash.rst", "reference/api/polars.Series.head.rst", "reference/api/polars.Series.inner_dtype.rst", "reference/api/polars.Series.interpolate.rst", "reference/api/polars.Series.is_boolean.rst", "reference/api/polars.Series.is_datelike.rst", "reference/api/polars.Series.is_duplicated.rst", "reference/api/polars.Series.is_empty.rst", "reference/api/polars.Series.is_finite.rst", "reference/api/polars.Series.is_first.rst", "reference/api/polars.Series.is_float.rst", "reference/api/polars.Series.is_in.rst", "reference/api/polars.Series.is_infinite.rst", "reference/api/polars.Series.is_nan.rst", "reference/api/polars.Series.is_not_nan.rst", "reference/api/polars.Series.is_not_null.rst", "reference/api/polars.Series.is_null.rst", "reference/api/polars.Series.is_numeric.rst", "reference/api/polars.Series.is_unique.rst", "reference/api/polars.Series.is_utf8.rst", "reference/api/polars.Series.kurtosis.rst", "reference/api/polars.Series.len.rst", "reference/api/polars.Series.limit.rst", "reference/api/polars.Series.log.rst", "reference/api/polars.Series.log10.rst", "reference/api/polars.Series.max.rst", "reference/api/polars.Series.mean.rst", "reference/api/polars.Series.median.rst", "reference/api/polars.Series.min.rst", "reference/api/polars.Series.mode.rst", "reference/api/polars.Series.n_chunks.rst", "reference/api/polars.Series.n_unique.rst", "reference/api/polars.Series.name.rst", "reference/api/polars.Series.nan_max.rst", "reference/api/polars.Series.nan_min.rst", "reference/api/polars.Series.null_count.rst", "reference/api/polars.Series.pct_change.rst", "reference/api/polars.Series.peak_max.rst", "reference/api/polars.Series.peak_min.rst", "reference/api/polars.Series.product.rst", "reference/api/polars.Series.quantile.rst", "reference/api/polars.Series.rank.rst", "reference/api/polars.Series.rechunk.rst", "reference/api/polars.Series.reinterpret.rst", "reference/api/polars.Series.rename.rst", "reference/api/polars.Series.reshape.rst", "reference/api/polars.Series.reverse.rst", "reference/api/polars.Series.rolling_apply.rst", "reference/api/polars.Series.rolling_max.rst", "reference/api/polars.Series.rolling_mean.rst", "reference/api/polars.Series.rolling_median.rst", "reference/api/polars.Series.rolling_min.rst", "reference/api/polars.Series.rolling_quantile.rst", "reference/api/polars.Series.rolling_skew.rst", "reference/api/polars.Series.rolling_std.rst", "reference/api/polars.Series.rolling_sum.rst", "reference/api/polars.Series.rolling_var.rst", "reference/api/polars.Series.round.rst", "reference/api/polars.Series.sample.rst", "reference/api/polars.Series.search_sorted.rst", "reference/api/polars.Series.series_equal.rst", "reference/api/polars.Series.set.rst", "reference/api/polars.Series.set_at_idx.rst", "reference/api/polars.Series.set_sorted.rst", "reference/api/polars.Series.shape.rst", "reference/api/polars.Series.shift.rst", "reference/api/polars.Series.shift_and_fill.rst", "reference/api/polars.Series.shrink_to_fit.rst", "reference/api/polars.Series.shuffle.rst", "reference/api/polars.Series.sign.rst", "reference/api/polars.Series.sin.rst", "reference/api/polars.Series.sinh.rst", "reference/api/polars.Series.skew.rst", "reference/api/polars.Series.slice.rst", "reference/api/polars.Series.sort.rst", "reference/api/polars.Series.sqrt.rst", "reference/api/polars.Series.std.rst", "reference/api/polars.Series.str.rst", "reference/api/polars.Series.sum.rst", "reference/api/polars.Series.tail.rst", "reference/api/polars.Series.take.rst", "reference/api/polars.Series.take_every.rst", "reference/api/polars.Series.tan.rst", "reference/api/polars.Series.tanh.rst", "reference/api/polars.Series.time_unit.rst", "reference/api/polars.Series.to_arrow.rst", "reference/api/polars.Series.to_dummies.rst", "reference/api/polars.Series.to_frame.rst", "reference/api/polars.Series.to_list.rst", "reference/api/polars.Series.to_numpy.rst", "reference/api/polars.Series.to_pandas.rst", "reference/api/polars.Series.to_physical.rst", "reference/api/polars.Series.top_k.rst", "reference/api/polars.Series.unique.rst", "reference/api/polars.Series.unique_counts.rst", "reference/api/polars.Series.value_counts.rst", "reference/api/polars.Series.var.rst", "reference/api/polars.Series.view.rst", "reference/api/polars.Series.zip_with.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.all.rst", "reference/api/polars.any.rst", "reference/api/polars.apply.rst", "reference/api/polars.arange.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.argsort_by.rst", "reference/api/polars.avg.rst", "reference/api/polars.coalesce.rst", "reference/api/polars.col.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.concat_list.rst", "reference/api/polars.concat_str.rst", "reference/api/polars.count.rst", "reference/api/polars.cov.rst", "reference/api/polars.cumfold.rst", "reference/api/polars.cumsum.rst", "reference/api/polars.cut.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.datatypes.get_idx_type.rst", "reference/api/polars.date.rst", "reference/api/polars.date_range.rst", "reference/api/polars.datetime.rst", "reference/api/polars.duration.rst", "reference/api/polars.element.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.NotFoundError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.exclude.rst", "reference/api/polars.first.rst", "reference/api/polars.fold.rst", "reference/api/polars.format.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.groups.rst", "reference/api/polars.head.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg_list.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.pivot.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.count.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.first.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.last.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.max.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.mean.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.median.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.min.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.sum.rst", "reference/api/polars.internals.expr.categorical.ExprCatNameSpace.set_ordering.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_zone.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.day.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.days.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hour.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hours.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minute.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.month.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.second.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.week.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.year.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_max.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_min.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.concat.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.contains.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.diff.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.eval.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.first.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.get.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.head.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.join.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.last.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.lengths.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.max.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.mean.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.min.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.reverse.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.shift.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.slice.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.sort.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.sum.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.tail.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.to_struct.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.unique.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.output_name.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.pop.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.root_names.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.concat.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.contains.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.count_match.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.decode.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.encode.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ends_with.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract_all.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.json_path_match.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lengths.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ljust.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lstrip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace_all.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rjust.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rstrip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.slice.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split_exact.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.splitn.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.starts_with.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strptime.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_lowercase.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_uppercase.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.zfill.rst", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.field.rst", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.rename_fields.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/api/polars.internals.series.categorical.CatNameSpace.set_ordering.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_zone.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.day.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.days.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.epoch.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hour.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hours.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.iso_year.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.max.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.mean.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.median.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.microsecond.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.microseconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.millisecond.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.milliseconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.min.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minute.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minutes.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.month.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanosecond.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanoseconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.offset_by.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.ordinal_day.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.quarter.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.second.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.seconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.strftime.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.timestamp.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.truncate.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.week.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.weekday.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.with_time_unit.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.year.rst", "reference/api/polars.internals.series.list.ListNameSpace.arg_max.rst", "reference/api/polars.internals.series.list.ListNameSpace.arg_min.rst", "reference/api/polars.internals.series.list.ListNameSpace.concat.rst", "reference/api/polars.internals.series.list.ListNameSpace.contains.rst", "reference/api/polars.internals.series.list.ListNameSpace.diff.rst", "reference/api/polars.internals.series.list.ListNameSpace.eval.rst", "reference/api/polars.internals.series.list.ListNameSpace.first.rst", "reference/api/polars.internals.series.list.ListNameSpace.get.rst", "reference/api/polars.internals.series.list.ListNameSpace.head.rst", "reference/api/polars.internals.series.list.ListNameSpace.join.rst", "reference/api/polars.internals.series.list.ListNameSpace.last.rst", "reference/api/polars.internals.series.list.ListNameSpace.lengths.rst", "reference/api/polars.internals.series.list.ListNameSpace.max.rst", "reference/api/polars.internals.series.list.ListNameSpace.mean.rst", "reference/api/polars.internals.series.list.ListNameSpace.min.rst", "reference/api/polars.internals.series.list.ListNameSpace.reverse.rst", "reference/api/polars.internals.series.list.ListNameSpace.shift.rst", "reference/api/polars.internals.series.list.ListNameSpace.slice.rst", "reference/api/polars.internals.series.list.ListNameSpace.sort.rst", "reference/api/polars.internals.series.list.ListNameSpace.sum.rst", "reference/api/polars.internals.series.list.ListNameSpace.tail.rst", "reference/api/polars.internals.series.list.ListNameSpace.unique.rst", "reference/api/polars.internals.series.string.StringNameSpace.concat.rst", "reference/api/polars.internals.series.string.StringNameSpace.contains.rst", "reference/api/polars.internals.series.string.StringNameSpace.count_match.rst", "reference/api/polars.internals.series.string.StringNameSpace.decode.rst", "reference/api/polars.internals.series.string.StringNameSpace.encode.rst", "reference/api/polars.internals.series.string.StringNameSpace.ends_with.rst", "reference/api/polars.internals.series.string.StringNameSpace.extract.rst", "reference/api/polars.internals.series.string.StringNameSpace.extract_all.rst", "reference/api/polars.internals.series.string.StringNameSpace.json_path_match.rst", "reference/api/polars.internals.series.string.StringNameSpace.lengths.rst", "reference/api/polars.internals.series.string.StringNameSpace.ljust.rst", "reference/api/polars.internals.series.string.StringNameSpace.lstrip.rst", "reference/api/polars.internals.series.string.StringNameSpace.replace.rst", "reference/api/polars.internals.series.string.StringNameSpace.replace_all.rst", "reference/api/polars.internals.series.string.StringNameSpace.rjust.rst", "reference/api/polars.internals.series.string.StringNameSpace.rstrip.rst", "reference/api/polars.internals.series.string.StringNameSpace.slice.rst", "reference/api/polars.internals.series.string.StringNameSpace.split.rst", "reference/api/polars.internals.series.string.StringNameSpace.split_exact.rst", "reference/api/polars.internals.series.string.StringNameSpace.splitn.rst", "reference/api/polars.internals.series.string.StringNameSpace.starts_with.rst", "reference/api/polars.internals.series.string.StringNameSpace.strip.rst", "reference/api/polars.internals.series.string.StringNameSpace.strptime.rst", "reference/api/polars.internals.series.string.StringNameSpace.to_lowercase.rst", "reference/api/polars.internals.series.string.StringNameSpace.to_uppercase.rst", "reference/api/polars.internals.series.string.StringNameSpace.zfill.rst", "reference/api/polars.internals.series.struct.StructNameSpace.field.rst", "reference/api/polars.internals.series.struct.StructNameSpace.fields.rst", "reference/api/polars.internals.series.struct.StructNameSpace.rename_fields.rst", "reference/api/polars.internals.series.struct.StructNameSpace.to_frame.rst", "reference/api/polars.list.rst", "reference/api/polars.lit.rst", "reference/api/polars.map.rst", "reference/api/polars.max.rst", "reference/api/polars.mean.rst", "reference/api/polars.median.rst", "reference/api/polars.min.rst", "reference/api/polars.n_unique.rst", "reference/api/polars.pearson_corr.rst", "reference/api/polars.quantile.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.repeat.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.select.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.spearman_rank_corr.rst", "reference/api/polars.std.rst", "reference/api/polars.struct.rst", "reference/api/polars.sum.rst", "reference/api/polars.tail.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.column.rst", "reference/api/polars.testing.columns.rst", "reference/api/polars.testing.dataframes.rst", "reference/api/polars.testing.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.var.rst", "reference/api/polars.when.rst", "reference/config.rst", "reference/dataframe.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expression.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe.rst", "reference/series.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_change_column_data_type_position_format", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_column_separator", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_utf8_tables", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_column", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.Expr", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr", "polars.Expr.backward_fill", "polars.Expr.cast", "polars.Expr.cat", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.with_column", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.Series", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.cast", "polars.Series.cat", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "polars.StringCache", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_where", "polars.argsort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.collect_all", "polars.concat", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cumfold", "polars.cumsum", "polars.cut", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Duration", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.datatypes.get_idx_type", "polars.date", "polars.date_range", "polars.datetime", "polars.duration", "polars.element", "polars.exceptions.ArrowError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.NotFoundError", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.ShapeError", "polars.exceptions.TooManyRowsReturned", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_arrow", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.groups", "polars.head", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.agg_list", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.pivot", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "polars.internals.dataframe.pivot.PivotOps.count", "polars.internals.dataframe.pivot.PivotOps.first", "polars.internals.dataframe.pivot.PivotOps.last", "polars.internals.dataframe.pivot.PivotOps.max", "polars.internals.dataframe.pivot.PivotOps.mean", "polars.internals.dataframe.pivot.PivotOps.median", "polars.internals.dataframe.pivot.PivotOps.min", "polars.internals.dataframe.pivot.PivotOps.sum", "polars.internals.expr.categorical.ExprCatNameSpace.set_ordering", "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit", "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_zone", "polars.internals.expr.datetime.ExprDateTimeNameSpace.day", "polars.internals.expr.datetime.ExprDateTimeNameSpace.days", "polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch", "polars.internals.expr.datetime.ExprDateTimeNameSpace.hour", "polars.internals.expr.datetime.ExprDateTimeNameSpace.hours", "polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year", "polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond", "polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond", "polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.minute", "polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes", "polars.internals.expr.datetime.ExprDateTimeNameSpace.month", "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond", "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by", "polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day", "polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter", "polars.internals.expr.datetime.ExprDateTimeNameSpace.second", "polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime", "polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp", "polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate", "polars.internals.expr.datetime.ExprDateTimeNameSpace.week", "polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday", "polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit", "polars.internals.expr.datetime.ExprDateTimeNameSpace.year", "polars.internals.expr.list.ExprListNameSpace.arg_max", "polars.internals.expr.list.ExprListNameSpace.arg_min", "polars.internals.expr.list.ExprListNameSpace.concat", "polars.internals.expr.list.ExprListNameSpace.contains", "polars.internals.expr.list.ExprListNameSpace.diff", "polars.internals.expr.list.ExprListNameSpace.eval", "polars.internals.expr.list.ExprListNameSpace.first", "polars.internals.expr.list.ExprListNameSpace.get", "polars.internals.expr.list.ExprListNameSpace.head", "polars.internals.expr.list.ExprListNameSpace.join", "polars.internals.expr.list.ExprListNameSpace.last", "polars.internals.expr.list.ExprListNameSpace.lengths", "polars.internals.expr.list.ExprListNameSpace.max", "polars.internals.expr.list.ExprListNameSpace.mean", "polars.internals.expr.list.ExprListNameSpace.min", "polars.internals.expr.list.ExprListNameSpace.reverse", "polars.internals.expr.list.ExprListNameSpace.shift", "polars.internals.expr.list.ExprListNameSpace.slice", "polars.internals.expr.list.ExprListNameSpace.sort", "polars.internals.expr.list.ExprListNameSpace.sum", "polars.internals.expr.list.ExprListNameSpace.tail", "polars.internals.expr.list.ExprListNameSpace.to_struct", "polars.internals.expr.list.ExprListNameSpace.unique", "polars.internals.expr.meta.ExprMetaNameSpace.output_name", "polars.internals.expr.meta.ExprMetaNameSpace.pop", "polars.internals.expr.meta.ExprMetaNameSpace.root_names", "polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases", "polars.internals.expr.string.ExprStringNameSpace.concat", "polars.internals.expr.string.ExprStringNameSpace.contains", "polars.internals.expr.string.ExprStringNameSpace.count_match", "polars.internals.expr.string.ExprStringNameSpace.decode", "polars.internals.expr.string.ExprStringNameSpace.encode", "polars.internals.expr.string.ExprStringNameSpace.ends_with", "polars.internals.expr.string.ExprStringNameSpace.extract", "polars.internals.expr.string.ExprStringNameSpace.extract_all", "polars.internals.expr.string.ExprStringNameSpace.json_path_match", "polars.internals.expr.string.ExprStringNameSpace.lengths", "polars.internals.expr.string.ExprStringNameSpace.ljust", "polars.internals.expr.string.ExprStringNameSpace.lstrip", "polars.internals.expr.string.ExprStringNameSpace.replace", "polars.internals.expr.string.ExprStringNameSpace.replace_all", "polars.internals.expr.string.ExprStringNameSpace.rjust", "polars.internals.expr.string.ExprStringNameSpace.rstrip", "polars.internals.expr.string.ExprStringNameSpace.slice", "polars.internals.expr.string.ExprStringNameSpace.split", "polars.internals.expr.string.ExprStringNameSpace.split_exact", "polars.internals.expr.string.ExprStringNameSpace.splitn", "polars.internals.expr.string.ExprStringNameSpace.starts_with", "polars.internals.expr.string.ExprStringNameSpace.strip", "polars.internals.expr.string.ExprStringNameSpace.strptime", "polars.internals.expr.string.ExprStringNameSpace.to_lowercase", "polars.internals.expr.string.ExprStringNameSpace.to_uppercase", "polars.internals.expr.string.ExprStringNameSpace.zfill", "polars.internals.expr.struct.ExprStructNameSpace.field", "polars.internals.expr.struct.ExprStructNameSpace.rename_fields", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "polars.internals.series.categorical.CatNameSpace.set_ordering", "polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit", "polars.internals.series.datetime.DateTimeNameSpace.cast_time_zone", "polars.internals.series.datetime.DateTimeNameSpace.day", "polars.internals.series.datetime.DateTimeNameSpace.days", "polars.internals.series.datetime.DateTimeNameSpace.epoch", "polars.internals.series.datetime.DateTimeNameSpace.hour", "polars.internals.series.datetime.DateTimeNameSpace.hours", "polars.internals.series.datetime.DateTimeNameSpace.iso_year", "polars.internals.series.datetime.DateTimeNameSpace.max", "polars.internals.series.datetime.DateTimeNameSpace.mean", "polars.internals.series.datetime.DateTimeNameSpace.median", "polars.internals.series.datetime.DateTimeNameSpace.microsecond", "polars.internals.series.datetime.DateTimeNameSpace.microseconds", "polars.internals.series.datetime.DateTimeNameSpace.millisecond", "polars.internals.series.datetime.DateTimeNameSpace.milliseconds", "polars.internals.series.datetime.DateTimeNameSpace.min", "polars.internals.series.datetime.DateTimeNameSpace.minute", "polars.internals.series.datetime.DateTimeNameSpace.minutes", "polars.internals.series.datetime.DateTimeNameSpace.month", "polars.internals.series.datetime.DateTimeNameSpace.nanosecond", "polars.internals.series.datetime.DateTimeNameSpace.nanoseconds", "polars.internals.series.datetime.DateTimeNameSpace.offset_by", "polars.internals.series.datetime.DateTimeNameSpace.ordinal_day", "polars.internals.series.datetime.DateTimeNameSpace.quarter", "polars.internals.series.datetime.DateTimeNameSpace.second", "polars.internals.series.datetime.DateTimeNameSpace.seconds", "polars.internals.series.datetime.DateTimeNameSpace.strftime", "polars.internals.series.datetime.DateTimeNameSpace.timestamp", "polars.internals.series.datetime.DateTimeNameSpace.truncate", "polars.internals.series.datetime.DateTimeNameSpace.week", "polars.internals.series.datetime.DateTimeNameSpace.weekday", "polars.internals.series.datetime.DateTimeNameSpace.with_time_unit", "polars.internals.series.datetime.DateTimeNameSpace.year", "polars.internals.series.list.ListNameSpace.arg_max", "polars.internals.series.list.ListNameSpace.arg_min", "polars.internals.series.list.ListNameSpace.concat", "polars.internals.series.list.ListNameSpace.contains", "polars.internals.series.list.ListNameSpace.diff", "polars.internals.series.list.ListNameSpace.eval", "polars.internals.series.list.ListNameSpace.first", "polars.internals.series.list.ListNameSpace.get", "polars.internals.series.list.ListNameSpace.head", "polars.internals.series.list.ListNameSpace.join", "polars.internals.series.list.ListNameSpace.last", "polars.internals.series.list.ListNameSpace.lengths", "polars.internals.series.list.ListNameSpace.max", "polars.internals.series.list.ListNameSpace.mean", "polars.internals.series.list.ListNameSpace.min", "polars.internals.series.list.ListNameSpace.reverse", "polars.internals.series.list.ListNameSpace.shift", "polars.internals.series.list.ListNameSpace.slice", "polars.internals.series.list.ListNameSpace.sort", "polars.internals.series.list.ListNameSpace.sum", "polars.internals.series.list.ListNameSpace.tail", "polars.internals.series.list.ListNameSpace.unique", "polars.internals.series.string.StringNameSpace.concat", "polars.internals.series.string.StringNameSpace.contains", "polars.internals.series.string.StringNameSpace.count_match", "polars.internals.series.string.StringNameSpace.decode", "polars.internals.series.string.StringNameSpace.encode", "polars.internals.series.string.StringNameSpace.ends_with", "polars.internals.series.string.StringNameSpace.extract", "polars.internals.series.string.StringNameSpace.extract_all", "polars.internals.series.string.StringNameSpace.json_path_match", "polars.internals.series.string.StringNameSpace.lengths", "polars.internals.series.string.StringNameSpace.ljust", "polars.internals.series.string.StringNameSpace.lstrip", "polars.internals.series.string.StringNameSpace.replace", "polars.internals.series.string.StringNameSpace.replace_all", "polars.internals.series.string.StringNameSpace.rjust", "polars.internals.series.string.StringNameSpace.rstrip", "polars.internals.series.string.StringNameSpace.slice", "polars.internals.series.string.StringNameSpace.split", "polars.internals.series.string.StringNameSpace.split_exact", "polars.internals.series.string.StringNameSpace.splitn", "polars.internals.series.string.StringNameSpace.starts_with", "polars.internals.series.string.StringNameSpace.strip", "polars.internals.series.string.StringNameSpace.strptime", "polars.internals.series.string.StringNameSpace.to_lowercase", "polars.internals.series.string.StringNameSpace.to_uppercase", "polars.internals.series.string.StringNameSpace.zfill", "polars.internals.series.struct.StructNameSpace.field", "polars.internals.series.struct.StructNameSpace.fields", "polars.internals.series.struct.StructNameSpace.rename_fields", "polars.internals.series.struct.StructNameSpace.to_frame", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.repeat", "polars.scan_csv", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.select", "polars.show_versions", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.column", "polars.testing.columns", "polars.testing.dataframes", "polars.testing.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.var", "polars.when", "Config", "DataFrame", "Data Types", "Exceptions", "Expressions", "Functions", "API reference", "Input/output", "LazyFrame", "Series", "SQL", "Testing", "Utils"], "terms": {"api": [0, 21, 122, 553, 555, 663, 775, 797], "refer": [0, 106, 213, 420, 656, 744, 763, 764, 765], "input": [0, 194, 403, 481, 540, 631, 637, 725, 754, 755, 758, 763, 764, 765, 802], "output": [0, 21, 42, 43, 65, 67, 102, 110, 112, 113, 118, 122, 196, 197, 258, 279, 280, 288, 318, 328, 474, 481, 523, 630, 663, 754, 765, 781, 788, 802], "function": [0, 21, 30, 37, 60, 66, 67, 98, 101, 119, 122, 150, 157, 158, 159, 196, 197, 207, 219, 220, 221, 222, 223, 224, 226, 227, 228, 239, 253, 288, 292, 294, 328, 357, 366, 367, 368, 369, 426, 440, 441, 446, 451, 479, 481, 483, 494, 496, 540, 541, 555, 565, 628, 663, 695, 754, 763, 764, 765, 774, 789, 802], "seri": [0, 15, 20, 21, 27, 35, 37, 39, 40, 44, 47, 48, 50, 52, 57, 58, 61, 72, 73, 79, 87, 91, 96, 97, 106, 107, 121, 122, 123, 124, 125, 126, 127, 128, 131, 133, 138, 142, 143, 162, 163, 168, 169, 173, 175, 177, 178, 179, 180, 181, 183, 184, 185, 195, 196, 209, 213, 214, 215, 216, 217, 219, 232, 237, 238, 249, 250, 251, 252, 257, 275, 301, 314, 315, 478, 481, 482, 483, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 523, 540, 541, 543, 544, 547, 551, 554, 577, 578, 579, 581, 584, 587, 589, 591, 594, 599, 602, 605, 607, 608, 609, 611, 615, 616, 623, 624, 627, 628, 634, 650, 656, 660, 753, 754, 755, 756, 757, 758, 759, 773, 779, 782, 783, 784, 785, 787, 788, 790, 794, 802], "datafram": [0, 8, 9, 14, 15, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 264, 265, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 320, 322, 327, 358, 465, 466, 474, 478, 479, 482, 483, 486, 487, 488, 489, 490, 491, 495, 496, 525, 526, 539, 542, 543, 544, 545, 546, 547, 548, 549, 552, 577, 578, 580, 581, 582, 583, 584, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 625, 626, 628, 629, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 663, 664, 665, 666, 705, 728, 730, 740, 741, 751, 762, 763, 764, 765, 766, 768, 769, 770, 772, 774, 776, 777, 778, 779, 783, 784, 786, 788, 789, 795, 800, 802], "lazyfram": [0, 20, 55, 166, 319, 321, 488, 489, 774, 775, 776, 777, 778, 786, 790, 802, 806], "express": [0, 21, 33, 35, 41, 63, 67, 75, 85, 107, 115, 118, 119, 121, 122, 139, 140, 141, 144, 150, 152, 160, 166, 173, 175, 179, 182, 187, 190, 195, 196, 197, 209, 210, 211, 216, 230, 231, 232, 234, 240, 246, 249, 255, 257, 260, 264, 272, 275, 295, 303, 304, 306, 314, 315, 316, 347, 348, 349, 357, 438, 445, 482, 483, 486, 487, 488, 493, 494, 495, 526, 539, 540, 541, 542, 553, 555, 595, 612, 630, 631, 642, 656, 662, 663, 688, 705, 730, 753, 754, 760, 773, 779, 781, 783, 784, 788, 790, 791, 795, 802], "data": [0, 7, 11, 20, 22, 23, 32, 53, 55, 66, 70, 76, 77, 83, 90, 94, 95, 136, 174, 181, 183, 213, 229, 230, 239, 253, 255, 262, 263, 272, 294, 322, 327, 342, 346, 350, 362, 364, 420, 436, 437, 446, 451, 467, 468, 470, 472, 476, 478, 486, 489, 500, 530, 531, 536, 537, 543, 544, 545, 546, 547, 548, 578, 598, 605, 662, 667, 698, 763, 764, 765, 766, 767, 771, 772, 774, 781, 786, 787, 789, 790, 791, 802], "type": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 29, 31, 37, 42, 43, 44, 58, 78, 90, 94, 95, 97, 99, 100, 122, 136, 139, 140, 141, 160, 171, 175, 177, 179, 180, 196, 216, 253, 264, 270, 272, 279, 280, 288, 295, 300, 304, 311, 312, 322, 328, 342, 347, 348, 349, 364, 379, 381, 446, 467, 468, 470, 477, 481, 487, 488, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 539, 540, 543, 545, 548, 577, 579, 581, 584, 587, 589, 591, 594, 599, 616, 628, 651, 652, 653, 656, 663, 666, 668, 670, 673, 679, 681, 684, 687, 692, 709, 739, 740, 741, 744, 753, 754, 763, 764, 765, 767, 771, 774, 780, 786, 787, 788, 789, 790, 791, 793, 802], "config": [0, 107, 315, 802], "except": [0, 54, 285, 468, 476, 802], "test": [0, 281, 287, 765, 802], "util": [0, 272, 802], "sql": [0, 53, 319, 772, 802], "classmethod": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 277, 297], "cfg": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], "strsourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 804, 806], "set": [1, 2, 3, 5, 6, 8, 10, 15, 16, 19, 20, 24, 44, 54, 60, 77, 84, 98, 110, 112, 113, 122, 171, 179, 219, 220, 221, 222, 223, 224, 226, 227, 228, 230, 235, 239, 240, 264, 265, 272, 284, 285, 288, 292, 305, 318, 322, 327, 328, 376, 379, 390, 426, 427, 428, 429, 430, 431, 433, 434, 435, 437, 441, 451, 452, 468, 499, 523, 545, 548, 605, 624, 650, 698, 717, 738, 763, 764, 765, 766, 770, 774, 776, 777, 778, 786, 787, 789, 790, 791, 802], "previous": 1, "save": [1, 802], "share": [1, 30, 366, 478], "option": [1, 2, 3, 21, 28, 44, 54, 60, 63, 75, 77, 84, 91, 93, 98, 102, 107, 122, 135, 157, 158, 159, 170, 171, 188, 196, 219, 220, 221, 222, 223, 224, 226, 227, 228, 235, 239, 240, 269, 284, 285, 292, 304, 305, 315, 328, 399, 426, 427, 428, 429, 430, 431, 433, 434, 435, 437, 447, 451, 466, 467, 479, 481, 496, 524, 525, 544, 549, 602, 624, 645, 649, 650, 655, 656, 663, 733, 737, 738, 743, 753, 754, 763, 765, 766, 770, 772, 776, 777, 778, 780, 788, 789, 790, 791, 802], "paramet": [1, 5, 6, 8, 10, 15, 16, 19, 20, 21, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 53, 54, 56, 58, 60, 62, 63, 65, 66, 67, 69, 71, 72, 73, 75, 77, 79, 81, 82, 84, 85, 86, 87, 88, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 121, 122, 131, 133, 135, 136, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 156, 157, 158, 159, 160, 163, 165, 166, 170, 171, 172, 175, 179, 188, 191, 193, 196, 197, 207, 208, 212, 213, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 239, 240, 241, 242, 244, 248, 249, 254, 255, 258, 259, 260, 264, 268, 269, 272, 273, 274, 275, 277, 278, 279, 280, 281, 284, 285, 287, 288, 292, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 309, 311, 312, 314, 315, 316, 317, 318, 319, 321, 322, 324, 327, 328, 337, 340, 342, 347, 348, 349, 353, 354, 355, 356, 357, 359, 360, 365, 366, 367, 368, 369, 372, 373, 374, 375, 379, 380, 399, 401, 415, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 451, 452, 453, 455, 458, 459, 466, 467, 468, 471, 472, 474, 475, 476, 477, 479, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 502, 503, 510, 513, 522, 523, 524, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 555, 558, 565, 566, 568, 577, 578, 579, 582, 595, 601, 602, 605, 609, 610, 611, 612, 614, 615, 616, 623, 624, 627, 628, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 688, 694, 695, 698, 702, 703, 704, 705, 707, 708, 709, 716, 717, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 747, 748, 750, 753, 754, 755, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791], "json": [1, 3, 112, 113, 277, 297, 318, 642, 730, 768, 769, 777, 802], "string": [1, 3, 5, 6, 10, 37, 42, 43, 54, 85, 101, 102, 110, 112, 113, 115, 220, 221, 222, 223, 224, 226, 227, 228, 245, 264, 266, 267, 272, 277, 279, 280, 285, 318, 322, 456, 478, 487, 491, 499, 502, 520, 523, 542, 577, 595, 602, 616, 666, 688, 695, 709, 763, 764, 774, 788, 789, 791, 793, 802], "produc": [1, 630, 754, 790, 791], "reset": 2, "all": [2, 8, 15, 19, 20, 28, 34, 50, 52, 55, 58, 60, 62, 63, 70, 84, 93, 102, 115, 120, 121, 134, 135, 137, 144, 150, 155, 160, 170, 171, 174, 177, 180, 184, 185, 190, 192, 196, 197, 202, 206, 210, 213, 218, 240, 245, 246, 258, 269, 274, 288, 292, 305, 322, 341, 343, 357, 363, 385, 397, 420, 452, 456, 487, 488, 489, 500, 523, 539, 543, 545, 547, 548, 549, 612, 616, 626, 636, 641, 642, 646, 647, 705, 709, 719, 724, 729, 730, 734, 735, 763, 764, 765, 766, 774, 776, 777, 783, 788, 789, 791, 800, 802], "default": [2, 19, 20, 30, 41, 43, 44, 54, 60, 67, 77, 108, 109, 110, 111, 112, 113, 114, 156, 171, 175, 193, 204, 205, 208, 213, 230, 235, 278, 280, 285, 292, 318, 322, 365, 366, 379, 412, 413, 415, 420, 437, 455, 475, 484, 543, 544, 546, 547, 548, 577, 624, 628, 640, 650, 656, 666, 717, 728, 738, 753, 763, 764, 774, 781, 788, 789, 790, 791], "state": [2, 264, 272, 295, 304, 488, 494, 534, 802], "note": [2, 20, 21, 33, 41, 42, 43, 53, 54, 58, 63, 75, 92, 94, 98, 99, 102, 148, 149, 153, 154, 181, 183, 220, 221, 222, 223, 224, 226, 227, 228, 239, 247, 264, 272, 273, 279, 280, 281, 287, 304, 311, 355, 356, 440, 441, 446, 451, 457, 468, 523, 546, 548, 565, 595, 612, 656, 688, 705, 763, 772, 789, 790, 791, 797], "thi": [2, 19, 20, 21, 28, 30, 32, 37, 41, 42, 43, 44, 48, 50, 52, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 77, 79, 82, 84, 86, 87, 90, 92, 94, 95, 98, 99, 101, 102, 103, 104, 108, 110, 112, 114, 119, 121, 122, 131, 133, 144, 150, 160, 162, 163, 168, 173, 174, 175, 179, 190, 195, 196, 204, 205, 207, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 230, 232, 234, 235, 240, 241, 242, 254, 255, 256, 257, 258, 261, 264, 269, 272, 278, 279, 280, 282, 285, 288, 292, 295, 301, 303, 304, 305, 311, 316, 317, 318, 321, 322, 327, 328, 337, 340, 357, 362, 364, 366, 371, 372, 378, 383, 384, 389, 390, 396, 398, 400, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 430, 433, 434, 435, 437, 440, 441, 442, 443, 445, 446, 447, 452, 453, 455, 457, 464, 466, 467, 468, 469, 471, 472, 475, 476, 478, 479, 482, 483, 488, 489, 490, 492, 494, 495, 496, 521, 539, 540, 541, 543, 544, 545, 546, 547, 548, 552, 553, 555, 577, 578, 579, 585, 595, 605, 612, 616, 630, 631, 644, 648, 659, 660, 663, 666, 667, 668, 674, 688, 695, 698, 705, 709, 732, 736, 747, 748, 751, 763, 764, 765, 766, 770, 774, 775, 776, 777, 778, 779, 784, 786, 787, 788, 789, 790, 791, 793, 797, 802, 803, 804], "method": [2, 20, 28, 49, 63, 69, 109, 111, 114, 115, 119, 134, 137, 155, 212, 213, 220, 221, 222, 223, 224, 226, 227, 228, 245, 256, 269, 283, 296, 322, 328, 341, 343, 363, 382, 419, 420, 431, 456, 470, 478, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 566, 761, 763, 764, 765, 788, 800, 802, 805], "oper": [2, 21, 32, 37, 41, 48, 55, 63, 65, 70, 90, 94, 95, 98, 101, 117, 145, 146, 147, 148, 149, 150, 213, 215, 272, 278, 281, 284, 287, 327, 353, 354, 355, 356, 357, 420, 422, 464, 467, 468, 476, 478, 479, 480, 489, 526, 530, 531, 543, 544, 545, 546, 547, 548, 553, 565, 633], "remov": [2, 26, 160, 268, 539, 645, 649, 655, 733, 737, 743], "from": [2, 13, 20, 25, 26, 30, 32, 42, 43, 54, 55, 60, 71, 75, 77, 79, 98, 99, 101, 102, 110, 145, 160, 174, 188, 204, 205, 208, 230, 241, 242, 256, 258, 268, 269, 272, 277, 279, 280, 292, 297, 298, 301, 311, 316, 327, 362, 366, 384, 399, 412, 413, 415, 437, 474, 477, 486, 522, 523, 524, 525, 539, 543, 544, 545, 546, 547, 548, 552, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 640, 656, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 728, 753, 762, 763, 764, 765, 766, 768, 769, 770, 772, 774, 776, 777, 778, 781, 788, 789, 790, 791], "environ": [2, 19], "ani": [2, 20, 21, 28, 32, 34, 35, 37, 65, 66, 75, 76, 91, 92, 94, 95, 101, 110, 122, 136, 165, 179, 196, 217, 219, 234, 241, 249, 269, 274, 294, 322, 327, 328, 374, 390, 424, 426, 441, 459, 467, 468, 481, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 540, 544, 545, 546, 548, 598, 609, 612, 633, 656, 691, 702, 705, 744, 753, 763, 764, 774, 781, 788, 790, 791], "class": [2, 20, 29, 78, 94, 95, 115, 270, 300, 322, 364, 467, 468, 478, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 543, 547, 788, 789, 802, 804, 806], "local": [2, 416, 417], "flag": [2, 107, 232, 288, 315, 322, 442, 788], "back": [2, 20, 32, 327], "valu": [2, 5, 19, 21, 28, 32, 33, 34, 38, 42, 43, 44, 49, 57, 58, 59, 60, 61, 63, 65, 67, 68, 69, 71, 77, 81, 82, 85, 86, 87, 91, 101, 102, 103, 110, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 150, 151, 153, 154, 157, 158, 159, 161, 163, 164, 165, 167, 169, 170, 171, 173, 174, 176, 177, 178, 180, 181, 183, 184, 185, 186, 189, 190, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 216, 219, 220, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 233, 234, 237, 238, 239, 241, 242, 243, 247, 249, 250, 251, 252, 255, 256, 257, 258, 269, 273, 274, 279, 280, 282, 283, 289, 290, 291, 292, 293, 296, 298, 302, 303, 306, 307, 308, 313, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 344, 347, 348, 349, 351, 352, 357, 358, 359, 361, 362, 366, 367, 368, 369, 372, 373, 374, 376, 377, 378, 379, 382, 385, 387, 388, 390, 391, 392, 393, 394, 395, 397, 404, 405, 407, 408, 410, 412, 413, 414, 415, 418, 419, 420, 426, 427, 428, 429, 430, 431, 433, 434, 435, 437, 438, 439, 440, 441, 444, 445, 449, 450, 451, 457, 459, 460, 461, 462, 470, 473, 474, 476, 477, 486, 489, 491, 492, 494, 495, 496, 510, 511, 519, 540, 541, 545, 547, 556, 557, 559, 560, 561, 563, 564, 565, 569, 570, 571, 572, 573, 574, 575, 577, 580, 592, 596, 603, 607, 608, 611, 613, 614, 615, 617, 619, 620, 621, 623, 626, 627, 629, 634, 635, 636, 637, 638, 639, 640, 641, 642, 646, 647, 650, 652, 653, 654, 659, 662, 666, 669, 685, 689, 696, 700, 701, 704, 706, 707, 708, 710, 712, 713, 714, 716, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 738, 740, 741, 742, 747, 753, 755, 756, 757, 758, 759, 763, 764, 772, 773, 774, 784, 786, 787, 788, 789, 790, 791, 793, 795], "current": [3, 19, 22, 23, 107, 208, 262, 263, 315, 346, 350, 415, 802], "exampl": [3, 8, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 265, 269, 270, 271, 275, 278, 280, 282, 283, 284, 289, 290, 291, 292, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 364, 365, 366, 368, 369, 371, 372, 373, 374, 375, 377, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 404, 405, 406, 407, 408, 409, 410, 415, 416, 417, 419, 420, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 444, 447, 448, 449, 450, 452, 453, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 486, 487, 489, 490, 491, 495, 496, 523, 525, 526, 539, 542, 543, 544, 545, 546, 547, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 578, 580, 581, 582, 583, 584, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 704, 705, 708, 709, 711, 716, 717, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 738, 740, 741, 742, 744, 753, 764, 765, 772, 774, 775, 779, 780, 783, 784, 786, 787, 788, 789, 790, 791, 795], "pl": [3, 8, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 265, 269, 270, 271, 275, 278, 280, 282, 283, 284, 289, 290, 291, 292, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 364, 365, 366, 368, 369, 371, 372, 373, 374, 375, 377, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 404, 405, 406, 407, 408, 409, 410, 415, 416, 417, 419, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 444, 447, 448, 449, 450, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 486, 487, 489, 490, 491, 492, 495, 496, 522, 523, 524, 525, 526, 539, 540, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 578, 580, 581, 582, 583, 584, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 704, 705, 708, 709, 711, 716, 717, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 738, 740, 741, 742, 744, 752, 753, 761, 763, 764, 765, 772, 774, 775, 779, 780, 783, 784, 786, 787, 788, 789, 790, 791, 795, 800, 803], "us": [4, 5, 8, 15, 16, 17, 20, 21, 33, 34, 37, 42, 43, 54, 58, 60, 62, 63, 67, 75, 77, 85, 87, 98, 99, 102, 110, 114, 115, 117, 122, 150, 153, 154, 156, 157, 158, 159, 160, 165, 166, 174, 188, 196, 200, 213, 215, 217, 220, 221, 222, 223, 224, 226, 227, 228, 230, 232, 235, 239, 241, 242, 264, 273, 274, 278, 279, 280, 281, 285, 287, 292, 306, 311, 314, 322, 328, 357, 365, 367, 368, 369, 373, 374, 378, 399, 420, 422, 424, 437, 440, 441, 442, 451, 455, 459, 467, 468, 475, 476, 478, 481, 482, 484, 487, 489, 491, 495, 521, 523, 544, 546, 548, 553, 555, 565, 577, 605, 612, 628, 637, 638, 639, 644, 648, 650, 652, 654, 656, 663, 666, 698, 705, 725, 726, 732, 736, 738, 740, 744, 753, 755, 758, 763, 764, 765, 766, 770, 772, 773, 774, 775, 776, 777, 778, 784, 788, 789, 790, 791, 800], "ascii": [4, 10, 644, 648, 659, 732, 736, 747], "charact": [4, 5, 16, 17, 110, 168, 295, 595, 644, 648, 649, 651, 652, 655, 659, 688, 732, 733, 736, 737, 739, 740, 743, 747, 763, 764, 774], "print": [4, 5, 8, 9, 15, 17, 29, 41, 55, 173, 282, 390, 426, 780], "tabl": [4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 67, 90, 95, 101, 321, 543, 565, 763, 764, 774], "n": [5, 8, 15, 21, 32, 42, 45, 56, 65, 77, 88, 89, 95, 150, 151, 163, 172, 191, 208, 216, 230, 239, 248, 250, 254, 264, 281, 287, 309, 310, 322, 327, 357, 359, 372, 380, 401, 415, 437, 451, 455, 458, 460, 463, 471, 475, 502, 503, 523, 551, 552, 558, 568, 578, 582, 601, 605, 611, 615, 627, 652, 653, 664, 665, 667, 671, 694, 698, 704, 708, 720, 740, 741, 763, 764, 773, 774, 785], "int": [5, 8, 15, 16, 21, 30, 33, 34, 36, 44, 45, 46, 48, 54, 56, 57, 58, 61, 62, 63, 73, 75, 77, 80, 81, 82, 84, 86, 87, 88, 89, 96, 101, 103, 105, 108, 110, 114, 135, 139, 140, 141, 150, 151, 157, 158, 159, 163, 164, 165, 170, 171, 172, 175, 191, 208, 209, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 240, 244, 248, 249, 250, 254, 259, 272, 273, 274, 281, 285, 287, 295, 302, 303, 305, 307, 309, 310, 313, 317, 335, 336, 342, 345, 347, 348, 349, 357, 359, 366, 367, 368, 369, 372, 373, 374, 379, 380, 400, 401, 404, 405, 407, 409, 410, 412, 413, 414, 415, 418, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 443, 444, 445, 447, 452, 455, 457, 458, 459, 460, 471, 475, 482, 486, 492, 495, 522, 524, 525, 545, 548, 551, 552, 558, 568, 610, 611, 614, 615, 623, 624, 627, 628, 640, 644, 648, 650, 652, 653, 659, 660, 661, 664, 665, 703, 704, 707, 708, 716, 717, 720, 728, 732, 736, 738, 740, 741, 747, 755, 757, 758, 759, 760, 762, 763, 764, 765, 766, 770, 772, 773, 774, 776, 777, 778, 781, 782, 783, 784, 785, 788, 789, 790, 791, 792, 794], "number": [5, 8, 15, 16, 30, 31, 33, 34, 45, 55, 56, 62, 63, 77, 81, 82, 88, 101, 110, 114, 135, 144, 150, 151, 157, 158, 159, 163, 165, 170, 172, 181, 183, 190, 191, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 233, 234, 235, 248, 254, 271, 272, 273, 274, 281, 287, 295, 302, 303, 309, 357, 359, 366, 367, 368, 369, 372, 374, 380, 389, 401, 409, 410, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 444, 445, 447, 455, 458, 471, 475, 492, 535, 551, 552, 556, 558, 568, 583, 585, 590, 592, 598, 603, 604, 606, 611, 615, 623, 627, 628, 652, 653, 664, 665, 672, 674, 683, 685, 691, 696, 697, 699, 704, 708, 716, 720, 740, 741, 763, 764, 765, 774, 777, 781, 785, 789, 790], "format": [6, 7, 10, 31, 60, 110, 112, 271, 277, 292, 318, 600, 656, 693, 744, 762, 763, 764, 768, 774, 775], "liter": [6, 10, 57, 58, 61, 62, 65, 87, 91, 119, 120, 214, 325, 326, 440, 441, 482, 483, 522, 524, 635, 646, 647, 723, 734, 735, 753, 765, 773, 783, 791, 795], "left": [6, 42, 43, 53, 54, 157, 158, 159, 174, 220, 221, 222, 223, 224, 226, 227, 228, 253, 279, 280, 284, 285, 367, 368, 369, 470, 486, 494, 523, 541, 644, 659, 732, 747, 786, 787], "center": [6, 157, 158, 159, 219, 220, 221, 222, 223, 224, 226, 227, 228, 367, 368, 369, 426, 427, 428, 429, 430, 431, 433, 434, 435], "right": [6, 42, 43, 53, 54, 157, 158, 159, 220, 221, 222, 223, 224, 226, 227, 228, 239, 279, 280, 284, 285, 367, 368, 369, 451, 486, 523, 648, 736, 763, 764, 786, 787], "cell": 6, "align": [6, 659, 747], "rais": [6, 10, 75, 209, 468, 476, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 630, 656, 744, 753, 786, 787], "keyerror": [6, 10], "recognis": [6, 10, 788], "activ": [7, 9, 11, 12, 13, 14, 18, 612, 705], "bool": [7, 9, 11, 12, 13, 14, 18, 19, 22, 23, 34, 35, 37, 38, 40, 41, 42, 47, 48, 50, 51, 52, 54, 58, 65, 67, 77, 83, 85, 91, 95, 98, 99, 100, 102, 104, 107, 110, 112, 114, 119, 120, 121, 131, 133, 136, 145, 146, 147, 148, 149, 150, 156, 157, 158, 159, 163, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 196, 213, 215, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 232, 234, 239, 241, 242, 254, 255, 258, 262, 264, 266, 272, 274, 275, 278, 279, 284, 285, 288, 295, 304, 306, 311, 312, 315, 318, 322, 325, 326, 327, 328, 337, 340, 342, 346, 353, 354, 355, 356, 357, 365, 367, 368, 369, 372, 375, 376, 378, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 416, 417, 420, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 439, 441, 442, 446, 451, 453, 467, 468, 471, 472, 474, 476, 482, 483, 484, 486, 488, 489, 494, 543, 547, 557, 559, 561, 598, 610, 612, 625, 635, 637, 639, 646, 647, 651, 652, 654, 656, 660, 661, 691, 703, 705, 718, 723, 725, 727, 734, 735, 739, 740, 742, 744, 753, 763, 764, 766, 768, 770, 773, 774, 775, 776, 777, 778, 781, 783, 786, 787, 788, 789, 790, 791, 793, 795], "true": [7, 9, 11, 12, 13, 14, 18, 19, 22, 23, 25, 28, 34, 37, 38, 40, 42, 48, 50, 51, 52, 54, 58, 62, 63, 65, 67, 68, 85, 91, 98, 99, 100, 101, 102, 107, 110, 117, 119, 120, 121, 122, 136, 145, 146, 147, 148, 149, 156, 157, 158, 159, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 215, 225, 230, 239, 241, 242, 249, 254, 255, 258, 262, 264, 266, 269, 272, 274, 278, 279, 284, 285, 288, 295, 304, 311, 312, 315, 322, 325, 326, 327, 328, 338, 342, 345, 346, 365, 367, 368, 369, 375, 378, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 409, 416, 417, 422, 432, 439, 451, 453, 468, 471, 476, 477, 482, 483, 488, 489, 543, 547, 552, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 598, 602, 610, 635, 637, 639, 642, 651, 652, 654, 656, 660, 661, 663, 691, 695, 723, 725, 727, 730, 739, 740, 742, 744, 763, 764, 765, 766, 770, 773, 774, 775, 776, 777, 778, 781, 783, 786, 787, 788, 789, 790, 791, 795], "chang": [7, 19, 101, 102, 150, 187, 208, 220, 221, 222, 223, 224, 226, 227, 228, 357, 415, 446, 496, 668, 695, 763, 764, 775], "posit": [7, 322], "directli": [7, 157, 158, 159, 367, 368, 369, 790, 791], "below": [7, 9, 28, 41, 174, 269, 795], "column": [7, 8, 11, 12, 13, 20, 21, 26, 27, 28, 29, 30, 31, 36, 39, 41, 42, 43, 47, 48, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 78, 79, 85, 86, 87, 91, 93, 96, 98, 99, 100, 101, 102, 103, 106, 107, 108, 119, 120, 122, 131, 133, 160, 166, 187, 207, 210, 214, 216, 220, 221, 222, 223, 224, 226, 227, 228, 241, 242, 246, 260, 268, 269, 270, 271, 278, 279, 280, 284, 285, 288, 289, 290, 291, 292, 293, 296, 298, 300, 301, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 322, 325, 326, 466, 478, 479, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 522, 524, 529, 533, 539, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 553, 565, 580, 583, 585, 586, 588, 590, 592, 593, 596, 597, 598, 603, 604, 606, 609, 630, 632, 652, 653, 656, 669, 672, 674, 678, 680, 683, 685, 686, 689, 690, 691, 696, 697, 699, 702, 740, 741, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 770, 771, 772, 774, 776, 777, 778, 781, 782, 783, 784, 785, 786, 790, 794, 795, 802], "name": [7, 12, 13, 20, 21, 24, 27, 28, 36, 39, 53, 54, 60, 67, 71, 78, 91, 97, 98, 100, 106, 107, 108, 118, 160, 187, 197, 210, 246, 265, 268, 284, 285, 292, 298, 300, 306, 312, 315, 317, 321, 322, 324, 346, 376, 423, 466, 479, 480, 487, 493, 495, 496, 523, 529, 539, 545, 546, 547, 548, 551, 602, 628, 630, 632, 660, 661, 662, 695, 748, 749, 750, 752, 760, 761, 762, 763, 764, 765, 766, 767, 770, 771, 773, 774, 776, 777, 778, 781, 784, 785, 786, 787, 788, 789, 790, 791, 802], "If": [8, 15, 20, 21, 32, 42, 43, 54, 60, 63, 65, 77, 84, 94, 95, 98, 110, 112, 113, 114, 122, 139, 140, 141, 166, 188, 196, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 232, 235, 239, 240, 241, 242, 254, 279, 280, 284, 285, 288, 292, 305, 318, 322, 327, 328, 347, 348, 349, 378, 399, 422, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 442, 451, 452, 464, 468, 471, 476, 478, 479, 482, 484, 492, 496, 523, 544, 546, 547, 548, 565, 624, 650, 651, 652, 653, 656, 663, 717, 738, 739, 740, 741, 744, 753, 763, 764, 765, 766, 770, 772, 774, 776, 777, 778, 781], "0": [8, 15, 20, 21, 22, 23, 25, 26, 29, 33, 34, 37, 38, 40, 42, 44, 48, 53, 57, 58, 59, 61, 62, 63, 64, 68, 69, 73, 77, 78, 82, 84, 85, 86, 87, 93, 96, 98, 99, 101, 102, 103, 106, 107, 108, 114, 116, 117, 123, 124, 125, 126, 127, 128, 131, 132, 133, 136, 138, 142, 143, 145, 150, 153, 154, 157, 158, 159, 161, 164, 165, 169, 171, 174, 177, 180, 181, 183, 184, 185, 188, 193, 194, 196, 198, 199, 200, 201, 206, 208, 209, 212, 213, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 236, 237, 238, 239, 243, 244, 247, 251, 252, 253, 259, 262, 270, 284, 291, 295, 296, 300, 303, 304, 307, 313, 314, 315, 317, 322, 329, 330, 331, 332, 333, 334, 335, 337, 339, 342, 344, 346, 351, 352, 357, 358, 360, 365, 367, 368, 369, 373, 377, 379, 387, 389, 391, 392, 393, 394, 395, 399, 405, 406, 415, 419, 420, 426, 428, 429, 431, 432, 433, 435, 437, 448, 449, 450, 454, 455, 461, 462, 465, 469, 470, 475, 476, 482, 483, 486, 490, 494, 495, 496, 526, 541, 555, 556, 557, 559, 560, 561, 562, 563, 564, 566, 567, 580, 583, 587, 589, 590, 594, 596, 598, 599, 604, 607, 608, 612, 614, 620, 640, 659, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 691, 692, 697, 705, 707, 722, 728, 730, 747, 761, 763, 764, 765, 766, 770, 772, 774, 775, 776, 777, 778, 780, 784, 788, 789, 790, 791, 795], "5": [8, 20, 21, 22, 23, 25, 31, 32, 33, 34, 37, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 54, 56, 60, 62, 63, 67, 68, 69, 72, 76, 80, 88, 89, 90, 91, 92, 97, 99, 101, 102, 105, 106, 107, 108, 110, 117, 136, 138, 139, 150, 152, 159, 160, 162, 163, 169, 172, 175, 178, 181, 183, 184, 185, 192, 207, 208, 210, 212, 213, 217, 218, 219, 220, 221, 223, 227, 229, 236, 246, 248, 250, 254, 262, 271, 278, 280, 281, 283, 287, 290, 291, 292, 302, 303, 305, 307, 308, 309, 310, 314, 315, 317, 327, 330, 334, 337, 345, 347, 353, 357, 358, 360, 369, 372, 382, 409, 415, 416, 417, 419, 420, 426, 427, 428, 430, 431, 434, 437, 439, 448, 454, 471, 477, 483, 490, 495, 496, 525, 526, 539, 543, 545, 546, 547, 548, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 581, 598, 599, 603, 612, 615, 620, 626, 627, 636, 642, 643, 659, 664, 665, 666, 668, 669, 670, 691, 692, 696, 697, 705, 708, 711, 720, 724, 730, 731, 764, 780, 784, 790, 791], "df": [8, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 262, 265, 269, 271, 278, 280, 282, 283, 284, 289, 290, 291, 292, 293, 294, 296, 301, 302, 303, 305, 307, 308, 312, 313, 314, 317, 466, 479, 482, 483, 486, 487, 490, 491, 495, 525, 526, 539, 542, 543, 544, 545, 546, 547, 548, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 625, 626, 628, 629, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 663, 664, 665, 666, 705, 728, 730, 735, 740, 741, 772, 774, 779, 783, 784, 789, 790, 791, 795, 800], "i": [8, 20, 21, 28, 30, 38, 41, 42, 43, 44, 48, 49, 51, 54, 55, 58, 60, 63, 65, 67, 75, 77, 84, 87, 90, 92, 98, 99, 101, 102, 107, 110, 112, 113, 114, 119, 120, 121, 122, 150, 157, 158, 159, 162, 168, 171, 173, 175, 188, 196, 207, 213, 215, 217, 220, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 235, 239, 240, 241, 242, 258, 264, 269, 272, 278, 279, 280, 283, 285, 288, 292, 295, 304, 305, 311, 315, 318, 322, 326, 327, 328, 357, 366, 367, 368, 369, 371, 378, 379, 382, 383, 384, 386, 396, 398, 399, 420, 422, 424, 437, 438, 439, 440, 441, 442, 451, 452, 455, 464, 468, 474, 475, 476, 478, 482, 484, 488, 489, 490, 492, 494, 495, 496, 521, 523, 529, 530, 532, 533, 541, 543, 546, 547, 548, 552, 553, 555, 565, 595, 612, 614, 624, 631, 636, 640, 641, 642, 644, 648, 650, 653, 656, 659, 663, 688, 695, 705, 707, 717, 724, 728, 729, 730, 732, 736, 738, 741, 747, 753, 763, 764, 766, 770, 772, 774, 775, 776, 777, 778, 779, 784, 788, 789, 790, 791, 797], "rang": [8, 30, 42, 174, 366, 415, 482, 490, 496, 522, 523, 524, 580, 592, 596, 597, 602, 603, 669, 685, 689, 690, 695, 696, 772], "100": [8, 427, 428, 430, 482, 659, 763, 764, 774, 777], "shape": [8, 9, 14, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 77, 79, 81, 82, 84, 85, 86, 87, 88, 89, 91, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 269, 271, 275, 278, 280, 283, 284, 289, 290, 291, 292, 293, 294, 296, 301, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 322, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 344, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 368, 369, 371, 372, 373, 374, 375, 377, 379, 380, 382, 385, 387, 390, 391, 392, 393, 394, 395, 397, 401, 408, 415, 416, 417, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 444, 447, 448, 449, 450, 452, 453, 454, 458, 459, 460, 461, 462, 465, 466, 470, 472, 473, 474, 477, 478, 479, 483, 486, 487, 489, 490, 491, 495, 496, 523, 525, 526, 537, 539, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 578, 580, 581, 582, 583, 584, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 704, 705, 708, 709, 711, 716, 717, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 738, 740, 741, 742, 744, 774, 775, 779, 783, 784, 790, 791, 795], "1": [8, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 265, 269, 270, 271, 275, 278, 279, 280, 282, 283, 284, 285, 289, 290, 291, 292, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 344, 345, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 365, 367, 368, 369, 371, 372, 373, 374, 375, 377, 379, 380, 382, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 404, 405, 406, 407, 408, 409, 410, 415, 416, 417, 419, 420, 423, 424, 425, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 486, 487, 489, 490, 491, 495, 496, 522, 523, 524, 525, 526, 539, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 578, 580, 581, 582, 583, 584, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 634, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 704, 705, 707, 708, 711, 716, 717, 720, 722, 728, 730, 740, 741, 744, 753, 760, 761, 763, 764, 774, 775, 779, 780, 781, 782, 783, 784, 786, 787, 788, 790, 791, 794, 795], "2": [8, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 116, 117, 118, 120, 121, 122, 129, 131, 132, 133, 135, 136, 137, 138, 139, 144, 145, 146, 147, 148, 149, 150, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 262, 265, 269, 270, 271, 275, 278, 280, 282, 284, 289, 290, 291, 292, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 322, 324, 327, 328, 330, 334, 335, 336, 337, 338, 339, 344, 345, 350, 351, 354, 355, 356, 357, 358, 360, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 377, 379, 380, 382, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 415, 416, 417, 419, 420, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 444, 447, 449, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 477, 478, 479, 483, 486, 487, 489, 490, 491, 495, 496, 525, 526, 539, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 581, 583, 584, 587, 589, 590, 591, 592, 594, 595, 597, 598, 599, 602, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 634, 636, 639, 641, 642, 643, 646, 647, 650, 652, 653, 654, 657, 658, 660, 661, 663, 664, 665, 666, 672, 676, 677, 683, 685, 690, 691, 695, 697, 699, 704, 705, 708, 709, 711, 716, 717, 720, 722, 724, 729, 730, 734, 735, 740, 741, 753, 772, 774, 775, 779, 780, 783, 784, 786, 787, 790, 795], "98": [8, 48, 241, 242, 249], "99": [8, 33, 34, 48, 51, 117, 163, 165, 241, 242, 249, 365, 372, 486], "i64": [8, 11, 20, 21, 22, 23, 24, 26, 28, 29, 31, 32, 34, 35, 39, 40, 41, 42, 43, 45, 47, 48, 49, 53, 54, 56, 57, 60, 61, 65, 66, 67, 68, 71, 72, 73, 74, 77, 79, 81, 82, 84, 85, 87, 88, 89, 91, 96, 98, 99, 100, 101, 102, 104, 106, 107, 108, 118, 121, 122, 135, 139, 146, 147, 148, 149, 151, 152, 160, 162, 163, 165, 166, 167, 170, 172, 173, 174, 175, 178, 181, 183, 184, 185, 187, 189, 192, 195, 196, 197, 198, 201, 202, 207, 208, 210, 211, 214, 215, 217, 218, 230, 232, 233, 235, 236, 240, 241, 246, 247, 248, 249, 250, 255, 257, 260, 262, 269, 271, 275, 278, 280, 283, 284, 289, 292, 293, 294, 301, 302, 303, 305, 308, 310, 312, 314, 315, 317, 322, 327, 328, 347, 350, 353, 354, 355, 356, 358, 371, 372, 374, 375, 380, 382, 390, 401, 408, 423, 427, 430, 434, 437, 440, 441, 444, 447, 448, 452, 453, 458, 459, 460, 466, 472, 474, 477, 479, 487, 489, 491, 495, 526, 539, 543, 544, 545, 546, 547, 548, 553, 554, 555, 557, 558, 559, 560, 563, 565, 567, 568, 577, 581, 582, 584, 587, 589, 591, 594, 599, 601, 612, 613, 614, 617, 619, 621, 622, 625, 626, 629, 646, 647, 661, 663, 664, 665, 666, 668, 670, 671, 673, 679, 681, 684, 687, 692, 694, 705, 774, 779, 783, 784, 791, 795], "10": [8, 23, 32, 40, 42, 43, 45, 47, 48, 49, 62, 66, 68, 72, 73, 88, 107, 110, 114, 121, 129, 130, 131, 132, 133, 139, 144, 149, 151, 153, 154, 168, 171, 172, 174, 179, 190, 191, 194, 208, 221, 240, 248, 279, 280, 283, 294, 308, 315, 328, 347, 365, 371, 380, 390, 401, 403, 415, 440, 441, 458, 496, 523, 526, 551, 556, 557, 559, 560, 561, 562, 563, 564, 566, 567, 605, 611, 615, 623, 624, 627, 659, 698, 704, 708, 716, 717, 720, 772, 774, 780, 785, 790, 791], "3": [8, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 117, 118, 119, 122, 131, 132, 133, 135, 136, 138, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 192, 193, 194, 195, 197, 202, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 239, 241, 242, 243, 246, 248, 249, 250, 256, 257, 258, 260, 262, 265, 269, 270, 271, 275, 278, 279, 280, 282, 283, 284, 285, 289, 290, 291, 292, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 322, 324, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 342, 344, 345, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 364, 366, 368, 369, 371, 372, 373, 374, 375, 377, 379, 380, 382, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 415, 416, 417, 419, 420, 423, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 444, 447, 449, 450, 451, 452, 453, 455, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 472, 473, 474, 475, 477, 478, 479, 483, 486, 487, 489, 490, 491, 495, 496, 523, 526, 539, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 578, 580, 581, 582, 583, 590, 592, 596, 597, 598, 601, 602, 603, 604, 605, 610, 611, 612, 613, 614, 615, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 635, 637, 638, 639, 640, 643, 645, 649, 650, 651, 652, 653, 654, 655, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 681, 682, 683, 685, 687, 689, 691, 694, 695, 697, 698, 704, 705, 708, 711, 716, 717, 720, 725, 726, 727, 728, 731, 738, 742, 753, 765, 774, 775, 779, 780, 783, 784, 786, 787, 795], "4": [8, 20, 21, 22, 23, 25, 28, 31, 32, 33, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 60, 62, 63, 65, 66, 67, 68, 72, 76, 80, 88, 89, 90, 91, 92, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 116, 117, 121, 122, 132, 135, 136, 138, 139, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 161, 162, 164, 165, 169, 170, 172, 173, 174, 175, 184, 185, 190, 192, 194, 197, 207, 209, 210, 212, 213, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 233, 234, 236, 240, 241, 242, 243, 246, 248, 249, 250, 253, 262, 269, 271, 278, 279, 280, 283, 284, 285, 289, 290, 291, 292, 293, 294, 296, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 327, 330, 337, 344, 345, 347, 357, 358, 360, 371, 373, 374, 382, 385, 390, 392, 393, 394, 395, 397, 409, 415, 416, 417, 420, 429, 431, 432, 433, 434, 435, 437, 439, 448, 452, 453, 459, 460, 470, 477, 478, 483, 486, 489, 491, 495, 523, 526, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 584, 590, 591, 592, 596, 597, 598, 599, 602, 603, 604, 606, 611, 612, 615, 623, 624, 627, 635, 644, 648, 650, 652, 653, 656, 663, 664, 665, 672, 673, 678, 680, 683, 684, 685, 686, 690, 691, 692, 693, 695, 696, 697, 704, 705, 708, 716, 717, 720, 723, 731, 732, 736, 738, 740, 741, 744, 774, 780, 783, 784, 786, 787, 791, 795], "95": [8, 117], "96": [8, 117], "97": [8, 48, 117], "when": [9, 14, 20, 21, 29, 30, 32, 34, 37, 42, 75, 114, 139, 140, 141, 157, 158, 159, 165, 196, 274, 322, 327, 347, 348, 349, 366, 367, 368, 369, 374, 440, 441, 478, 494, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 631, 656, 763, 764, 766, 770, 774, 776, 777, 790, 791, 793], "displai": [9, 14], "ascii_ful": 10, "ascii_no_bord": 10, "ascii_borders_onli": 10, "ascii_borders_only_condens": 10, "ascii_horizontal_onli": 10, "ascii_markdown": 10, "utf8_ful": 10, "utf8_no_bord": 10, "utf8_borders_onli": 10, "utf8_horizontal_onli": 10, "noth": [10, 636, 640, 641, 642, 724, 728, 729, 730], "style": [10, 67], "border": 10, "line": [10, 763, 764, 765, 774], "onli": [10, 19, 21, 28, 41, 54, 58, 85, 87, 117, 138, 139, 140, 141, 169, 215, 256, 264, 269, 281, 285, 287, 306, 344, 347, 348, 349, 377, 422, 464, 478, 489, 595, 688, 763, 764, 765, 766, 770, 773, 774, 776, 777, 778, 783, 790, 791], "condens": 10, "horizont": [10, 37, 47, 101, 489, 491, 494, 495, 526, 541, 755, 758, 784], "markdown": 10, "utf8": [10, 17, 29, 30, 37, 78, 94, 162, 168, 270, 300, 371, 398, 468, 478, 491, 616, 634, 638, 640, 641, 642, 650, 651, 652, 653, 656, 693, 709, 722, 726, 728, 729, 730, 738, 739, 740, 741, 744, 763, 764, 774, 788], "No": 10, "hide": [11, 12, 13, 14], "f64": [11, 22, 23, 25, 26, 28, 29, 33, 34, 37, 40, 48, 53, 54, 58, 59, 68, 69, 84, 85, 86, 99, 103, 106, 107, 116, 123, 124, 125, 126, 127, 128, 136, 138, 142, 143, 150, 153, 154, 156, 157, 158, 159, 160, 161, 169, 174, 181, 183, 184, 185, 188, 193, 194, 199, 200, 208, 209, 212, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 237, 238, 239, 243, 244, 251, 252, 259, 262, 269, 284, 290, 291, 296, 307, 313, 314, 315, 329, 330, 331, 332, 333, 334, 344, 351, 352, 357, 358, 368, 369, 373, 377, 415, 426, 428, 429, 431, 432, 433, 435, 436, 449, 450, 454, 461, 462, 486, 490, 496, 539, 557, 559, 560, 561, 562, 563, 566, 567, 598, 620, 691, 775, 790], "etc": [11, 440, 441, 482, 546, 548, 763, 766, 770, 776, 778], "separ": [13, 98, 110, 168, 491, 494, 616, 709], "row": [13, 15, 20, 21, 28, 32, 35, 37, 42, 44, 45, 50, 52, 54, 55, 56, 60, 63, 84, 88, 89, 92, 99, 101, 108, 110, 112, 114, 122, 162, 168, 172, 191, 208, 217, 240, 248, 264, 269, 272, 275, 276, 279, 281, 285, 286, 287, 288, 292, 305, 309, 310, 311, 317, 327, 371, 380, 401, 415, 424, 452, 458, 494, 532, 535, 538, 541, 545, 546, 548, 551, 555, 558, 568, 664, 665, 763, 764, 765, 766, 770, 774, 776, 777, 778, 785, 789, 790], "inform": [14, 139, 140, 141, 188, 239, 295, 347, 348, 349, 399, 451], "element": [15, 123, 124, 125, 126, 127, 128, 142, 143, 145, 146, 147, 148, 149, 150, 161, 171, 179, 194, 208, 213, 216, 231, 236, 237, 238, 243, 251, 252, 254, 328, 329, 330, 331, 332, 333, 334, 351, 352, 353, 354, 355, 356, 357, 370, 375, 390, 403, 415, 420, 438, 448, 449, 450, 454, 455, 461, 462, 471, 472, 475, 612, 652, 653, 705, 740, 741, 791], "width": [16, 20, 644, 648, 659, 732, 736, 747, 763, 764], "draw": 16, "char": [16, 478], "enabl": [18, 232, 442], "addit": [18, 788, 789], "verbos": 18, "debug": [18, 264, 272, 288], "log": [18, 156, 254, 365, 471], "if_set": 19, "fals": [19, 20, 22, 23, 25, 37, 38, 40, 41, 42, 47, 48, 50, 51, 52, 54, 58, 62, 63, 65, 67, 68, 77, 83, 85, 91, 95, 98, 99, 102, 104, 107, 112, 114, 119, 120, 131, 133, 145, 146, 147, 148, 149, 150, 156, 157, 158, 159, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 232, 239, 241, 242, 254, 255, 258, 262, 264, 266, 272, 278, 279, 284, 285, 288, 295, 304, 306, 315, 322, 327, 337, 340, 342, 345, 346, 353, 354, 355, 356, 357, 365, 367, 368, 369, 375, 383, 385, 387, 390, 391, 392, 393, 394, 395, 397, 399, 409, 416, 417, 420, 421, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 439, 442, 446, 451, 453, 467, 468, 471, 472, 474, 476, 477, 482, 483, 484, 488, 494, 556, 557, 559, 560, 561, 563, 567, 598, 610, 612, 625, 635, 637, 639, 646, 647, 651, 652, 654, 656, 691, 705, 718, 723, 725, 727, 734, 735, 739, 740, 742, 744, 753, 763, 764, 765, 766, 770, 773, 774, 777, 778, 781, 783, 786, 787, 788, 789, 790, 791, 795], "dict": [19, 20, 65, 71, 78, 91, 92, 114, 288, 298, 300, 376, 544, 545, 663, 763, 764, 765, 766, 767, 770, 771, 774, 776, 778, 790], "none": [19, 20, 21, 22, 25, 28, 33, 34, 42, 43, 44, 49, 53, 54, 60, 63, 64, 75, 77, 82, 84, 91, 93, 98, 99, 100, 101, 102, 107, 109, 110, 111, 112, 113, 114, 118, 121, 122, 132, 135, 139, 144, 153, 154, 157, 158, 159, 160, 163, 164, 165, 170, 171, 174, 181, 182, 183, 184, 185, 187, 190, 196, 206, 208, 214, 219, 220, 221, 222, 223, 224, 226, 227, 228, 230, 234, 235, 236, 240, 253, 262, 269, 273, 274, 279, 280, 283, 284, 285, 288, 292, 303, 304, 305, 311, 312, 315, 318, 321, 322, 328, 335, 336, 346, 347, 358, 360, 365, 367, 368, 369, 372, 373, 374, 378, 379, 381, 382, 394, 395, 399, 426, 427, 428, 429, 430, 431, 433, 434, 435, 437, 441, 445, 447, 448, 451, 452, 455, 463, 466, 470, 475, 476, 479, 481, 486, 491, 492, 496, 502, 511, 523, 524, 525, 539, 540, 544, 545, 546, 547, 548, 549, 552, 602, 614, 624, 628, 634, 635, 637, 638, 639, 642, 643, 644, 645, 648, 649, 650, 652, 653, 654, 655, 656, 659, 660, 661, 663, 695, 707, 717, 722, 723, 725, 726, 727, 730, 731, 732, 733, 736, 737, 738, 740, 741, 742, 743, 744, 753, 754, 762, 763, 764, 765, 766, 768, 770, 772, 773, 774, 776, 777, 778, 780, 782, 783, 786, 787, 788, 789, 790, 791, 793, 794], "show": [19, 28, 55, 64, 269, 295, 304], "variabl": [19, 60, 93, 292, 465, 549], "restrict": [19, 653, 741], "return": [19, 21, 22, 26, 28, 29, 30, 31, 33, 34, 37, 45, 47, 53, 55, 56, 62, 63, 65, 66, 67, 75, 77, 88, 89, 95, 98, 99, 106, 110, 112, 113, 119, 120, 123, 124, 125, 126, 127, 128, 131, 133, 142, 143, 162, 168, 172, 175, 177, 178, 179, 180, 181, 183, 184, 185, 191, 195, 202, 216, 217, 230, 237, 238, 248, 249, 250, 251, 252, 254, 256, 257, 258, 264, 270, 272, 281, 287, 288, 294, 295, 304, 310, 311, 318, 324, 325, 326, 328, 335, 336, 338, 339, 358, 366, 371, 376, 378, 380, 381, 385, 387, 388, 390, 391, 392, 393, 394, 395, 397, 401, 408, 424, 425, 437, 439, 441, 458, 460, 471, 473, 477, 481, 482, 483, 487, 488, 496, 522, 523, 524, 525, 532, 535, 538, 543, 544, 545, 546, 547, 548, 551, 552, 553, 555, 558, 562, 568, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 610, 614, 615, 616, 627, 631, 634, 636, 638, 640, 641, 642, 644, 648, 650, 651, 652, 653, 659, 664, 665, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 703, 707, 708, 709, 720, 722, 723, 724, 726, 728, 729, 730, 731, 732, 736, 738, 739, 740, 741, 744, 747, 753, 754, 762, 763, 764, 765, 766, 767, 770, 771, 774, 779, 785, 795], "dictionari": [19, 20, 65, 91, 92, 358, 376, 544, 545, 548, 763, 764, 767, 771, 774], "includ": [19, 30, 42, 98, 101, 110, 175, 366, 476, 494, 598, 651, 652, 691, 739, 740, 790], "those": [19, 213, 420], "_have_": 19, "been": [19, 213, 420], "specif": [19, 219, 322, 426, 656, 744, 772, 783, 790], "sequenc": [20, 26, 28, 31, 32, 41, 42, 43, 53, 54, 60, 63, 65, 67, 79, 85, 93, 98, 99, 100, 101, 102, 107, 160, 175, 179, 196, 271, 278, 279, 280, 284, 285, 301, 306, 315, 322, 327, 390, 441, 479, 480, 481, 484, 486, 487, 488, 489, 490, 491, 494, 495, 513, 539, 541, 544, 545, 546, 548, 552, 553, 662, 754, 755, 758, 779, 783, 784, 789, 790, 791], "np": [20, 35, 42, 94, 177, 180, 249, 322, 387, 391, 392, 393, 426, 441, 459, 468, 546], "ndarrai": [20, 35, 94, 249, 322, 441, 459, 468, 546], "pa": [20, 90, 464, 543, 775], "pd": [20, 95, 253, 469, 470, 547, 765, 772], "pli": [20, 35, 42, 43, 53, 67, 249, 279, 280, 284, 459, 494, 523, 541, 566, 577, 578, 582, 601, 605, 611, 628, 637, 638, 666, 667, 671, 694, 698, 704, 725, 726, 761], "columnstyp": 20, "orient": [20, 112, 546, 548], "two": [20, 37, 60, 67, 97, 117, 152, 241, 242, 249, 292, 360, 479, 493, 544, 546, 548, 553, 554, 555, 565, 760, 772, 781, 783], "dimension": [20, 322, 544, 546, 548], "structur": [20, 32, 327, 531, 536, 537], "repres": [20, 110, 181, 183, 322, 441, 455, 475, 487, 511, 519, 523, 543, 544, 546, 547, 548, 753], "panda": [20, 95, 253, 469, 470, 547, 765, 772, 780], "variou": [20, 115, 322, 802], "form": [20, 101, 208, 322, 415], "must": [20, 42, 43, 54, 75, 160, 196, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 288, 322, 496, 544, 546, 548, 786], "contain": [20, 63, 67, 179, 295, 322, 376, 409, 464, 544, 547, 636, 639, 640, 641, 642, 653, 654, 724, 727, 728, 729, 730, 741, 742], "mai": [20, 21, 30, 32, 54, 81, 82, 101, 114, 150, 160, 163, 220, 221, 222, 223, 224, 226, 227, 228, 233, 234, 288, 302, 303, 317, 327, 357, 366, 372, 444, 445, 489, 494, 496, 541, 543, 578, 585, 623, 663, 667, 674, 695, 716, 763, 766, 775, 776], "other": [20, 28, 32, 38, 53, 54, 60, 75, 121, 139, 140, 141, 152, 179, 242, 253, 269, 284, 285, 292, 316, 322, 327, 347, 348, 349, 360, 390, 439, 470, 477, 523, 609, 702, 763, 764, 765, 774, 786, 787, 802], "datatyp": [20, 21, 29, 37, 78, 110, 122, 136, 160, 196, 253, 270, 288, 300, 322, 328, 342, 358, 364, 381, 384, 396, 398, 470, 481, 487, 539, 656, 663, 744, 753, 754, 763, 764, 765, 767, 771, 788, 789, 790, 791, 802], "pair": [20, 71, 298], "label": [20, 219, 220, 221, 222, 223, 224, 226, 227, 228, 295, 426, 427, 428, 429, 430, 431, 433, 434, 435, 496, 544, 546, 548], "result": [20, 32, 42, 63, 82, 110, 112, 113, 157, 158, 159, 188, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 232, 234, 261, 288, 295, 303, 318, 327, 367, 368, 369, 399, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 442, 445, 468, 494, 495, 544, 546, 548, 553, 651, 652, 739, 740, 754, 772, 774, 776, 778, 784, 791], "specifi": [20, 30, 34, 110, 157, 158, 159, 165, 216, 274, 322, 366, 367, 368, 369, 374, 523, 533, 544, 546, 548, 644, 648, 732, 736, 790], "overrid": [20, 544, 788, 789, 791], "alreadi": [20, 150, 357, 544, 612, 705], "present": [20, 179, 476, 544, 790], "match": [20, 34, 54, 75, 274, 285, 489, 535, 544, 546, 548, 635, 636, 639, 641, 642, 645, 646, 647, 649, 654, 655, 656, 723, 724, 727, 729, 730, 733, 734, 735, 737, 742, 743, 744, 786, 787], "dimens": [20, 217, 424, 544, 546, 548], "col": [20, 21, 35, 41, 42, 43, 51, 63, 66, 75, 85, 100, 106, 107, 110, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 166, 167, 168, 169, 173, 174, 175, 176, 178, 179, 181, 182, 183, 186, 187, 188, 189, 193, 194, 195, 198, 199, 200, 201, 203, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 275, 278, 280, 282, 294, 312, 314, 315, 424, 440, 441, 482, 483, 490, 491, 495, 525, 540, 542, 546, 548, 550, 553, 577, 578, 580, 581, 582, 583, 584, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 625, 626, 628, 629, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 688, 705, 728, 730, 744, 761, 774, 783, 784, 789, 790, 795, 800], "whether": [20, 42, 43, 110, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 483, 523, 546, 548, 791], "interpret": [20, 546, 548, 763, 764, 774], "infer": [20, 21, 110, 217, 322, 424, 546, 548, 656, 763, 764, 765, 774, 777, 788], "doe": [20, 32, 256, 272, 278, 288, 327, 378, 446, 476, 535, 540, 546, 548, 605, 661, 698, 763, 764, 765, 774, 786, 787], "yield": [20, 30, 32, 98, 327, 366, 546, 548, 763, 764, 774], "conclus": [20, 546, 548], "some": [20, 28, 269, 390, 763, 764, 774], "intern": [20, 33, 40, 41, 47, 63, 79, 91, 106, 107, 152, 164, 175, 207, 209, 216, 231, 234, 240, 242, 273, 275, 282, 295, 301, 303, 306, 314, 315, 373, 375, 445, 481, 482, 483, 484, 486, 488, 490, 491, 493, 495, 522, 524, 542, 755, 758, 760, 765, 773, 779, 781, 783, 784, 786, 788, 790, 795], "convert": [20, 76, 91, 92, 93, 94, 95, 97, 467, 468, 469, 476, 547, 549, 628, 751, 765, 772], "befor": [20, 32, 54, 100, 148, 149, 150, 208, 219, 220, 221, 222, 223, 224, 226, 227, 228, 247, 282, 285, 312, 327, 355, 356, 357, 415, 426, 427, 428, 429, 430, 431, 433, 434, 435, 457, 659, 747, 774], "collect": [20, 55, 90, 122, 207, 269, 271, 272, 275, 278, 283, 284, 289, 290, 291, 292, 293, 294, 296, 301, 302, 303, 305, 307, 308, 310, 313, 314, 315, 317, 482, 488, 490, 663, 773, 775, 783], "can": [20, 21, 29, 37, 41, 42, 63, 67, 85, 98, 101, 115, 122, 150, 160, 174, 187, 202, 215, 220, 221, 222, 223, 224, 226, 227, 228, 232, 239, 258, 264, 279, 306, 317, 322, 328, 357, 408, 422, 440, 441, 442, 451, 479, 482, 487, 495, 523, 531, 539, 553, 555, 595, 612, 628, 642, 663, 688, 705, 730, 755, 763, 764, 765, 766, 774, 775, 776, 784, 789, 790, 791, 800], "lead": [20, 232, 249, 258, 288, 442, 645, 649, 655, 659, 663, 733, 743, 747, 755, 758, 781], "unexpect": [20, 534], "behavior": [20, 122, 481, 755, 758], "subclass": 20, "For": [20, 32, 43, 53, 54, 85, 136, 215, 239, 280, 285, 327, 422, 451, 468, 494, 541, 542, 555, 631, 765], "mydatafram": 20, "pass": [20, 114, 173, 282, 288, 304, 328, 523, 544, 582, 671, 765, 789, 790, 791], "isinst": [20, 790, 791], "lazi": [20, 54, 122, 207, 262, 265, 269, 270, 271, 275, 278, 282, 283, 284, 285, 289, 290, 291, 292, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 482, 489, 553, 663, 774, 790, 802, 804], "construct": [20, 277, 297, 322, 543, 544, 545, 546, 547, 548], "b": [20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 47, 48, 50, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 118, 121, 122, 132, 135, 136, 137, 144, 152, 153, 154, 160, 162, 164, 165, 166, 170, 171, 174, 177, 180, 181, 182, 183, 184, 185, 187, 190, 192, 197, 202, 206, 210, 218, 240, 245, 246, 256, 258, 260, 262, 265, 269, 270, 271, 275, 278, 284, 289, 290, 291, 292, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 327, 358, 360, 365, 366, 374, 390, 398, 423, 439, 473, 478, 479, 486, 489, 491, 493, 495, 526, 539, 542, 543, 544, 545, 546, 547, 548, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 609, 612, 616, 618, 646, 660, 661, 663, 664, 665, 666, 705, 734, 760, 765, 781, 783, 784], "notic": [20, 322], "dtype": [20, 42, 43, 54, 95, 122, 123, 124, 125, 126, 127, 128, 131, 133, 136, 139, 140, 141, 142, 143, 148, 149, 160, 162, 168, 195, 196, 215, 216, 220, 221, 222, 223, 224, 226, 227, 228, 237, 238, 247, 249, 251, 252, 253, 257, 258, 279, 280, 285, 322, 342, 346, 347, 348, 349, 355, 356, 366, 371, 381, 386, 425, 439, 457, 468, 469, 470, 481, 490, 492, 539, 581, 584, 587, 589, 591, 594, 599, 605, 607, 608, 609, 616, 634, 650, 670, 673, 679, 681, 684, 687, 692, 698, 700, 701, 702, 709, 722, 738, 744, 753, 754, 763, 764, 774, 783, 788, 789, 790, 791], "automat": [20, 322, 763, 764, 772, 774, 790, 791], "int64": [20, 29, 37, 42, 43, 66, 78, 90, 148, 149, 160, 215, 247, 253, 270, 279, 280, 294, 300, 322, 355, 356, 364, 422, 439, 457, 468, 469, 470, 539, 581, 584, 587, 589, 591, 594, 599, 670, 673, 679, 681, 684, 687, 692], "In": [20, 21, 30, 32, 42, 43, 63, 122, 241, 242, 279, 280, 322, 327, 366, 421, 630, 778, 790, 791], "order": [20, 41, 42, 43, 65, 67, 77, 99, 102, 131, 133, 137, 213, 230, 231, 232, 241, 242, 255, 256, 278, 279, 280, 306, 311, 337, 340, 420, 425, 437, 438, 442, 472, 473, 484, 577, 661, 666, 750, 786], "your": [20, 264, 281, 287, 288, 763, 764, 786, 787], "initi": [20, 494, 541], "list": [20, 24, 29, 30, 31, 35, 40, 42, 47, 62, 65, 76, 85, 91, 92, 98, 99, 100, 101, 107, 115, 117, 134, 160, 162, 168, 187, 196, 207, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 234, 241, 242, 249, 265, 268, 269, 270, 271, 275, 292, 311, 312, 315, 316, 322, 341, 345, 366, 371, 375, 381, 390, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 459, 467, 488, 490, 495, 496, 502, 526, 549, 552, 554, 565, 631, 632, 641, 651, 660, 661, 729, 739, 749, 750, 755, 758, 762, 763, 764, 766, 770, 772, 774, 783, 784, 789, 790, 791, 802], "col1": [20, 101], "float32": [20, 37, 110, 322, 386], "col2": [20, 101], "df2": [20, 32, 38, 104, 478, 489, 786], "f32": [20, 213, 322, 420, 526, 612, 705], "Or": [20, 42, 43, 54, 102, 207, 279, 280, 285, 795], "compat": [20, 114], "valid": [20, 30, 150, 241, 357, 366, 378, 635, 636, 640, 641, 642, 723, 724, 728, 729, 730, 734, 735, 766, 770, 791], "df3": 20, "numpi": [20, 94, 204, 205, 322, 387, 391, 392, 393, 412, 413, 426, 468, 476, 546, 780], "import": [20, 25, 42, 54, 95, 101, 102, 110, 288, 351, 384, 387, 391, 392, 393, 426, 449, 461, 502, 523, 525, 543, 546, 547, 578, 580, 581, 582, 583, 584, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 753, 772, 774, 775, 788, 789, 790, 791], "arrai": [20, 30, 90, 94, 139, 140, 141, 145, 146, 147, 148, 149, 194, 220, 221, 223, 226, 227, 228, 232, 322, 347, 348, 349, 353, 354, 355, 356, 366, 403, 427, 428, 430, 433, 434, 435, 442, 446, 464, 468, 476, 490, 510, 526, 543, 546, 609, 618, 619, 620, 621, 622, 625, 626, 636, 638, 640, 641, 642, 702, 711, 712, 713, 714, 715, 718, 719, 724, 726, 728, 729, 730, 763, 764], "df4": 20, "6": [20, 21, 24, 26, 27, 28, 29, 31, 32, 35, 36, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 51, 53, 56, 57, 58, 59, 60, 61, 64, 67, 68, 69, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 106, 107, 108, 110, 122, 135, 136, 148, 149, 152, 156, 162, 164, 165, 170, 172, 174, 192, 207, 211, 213, 214, 217, 220, 221, 222, 223, 224, 226, 227, 228, 241, 242, 248, 250, 265, 269, 270, 271, 275, 278, 280, 283, 284, 292, 300, 301, 302, 303, 305, 310, 312, 314, 315, 317, 327, 345, 351, 355, 356, 358, 360, 371, 409, 420, 429, 431, 432, 433, 435, 439, 457, 479, 495, 526, 543, 545, 546, 547, 548, 553, 558, 565, 567, 568, 580, 595, 596, 597, 598, 604, 636, 664, 665, 688, 697, 724, 783, 784], "c": [20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 35, 36, 37, 38, 40, 41, 42, 45, 47, 48, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 73, 74, 75, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 90, 93, 94, 95, 96, 98, 99, 101, 103, 104, 107, 110, 114, 122, 256, 258, 262, 265, 269, 270, 271, 275, 278, 284, 292, 300, 301, 305, 315, 358, 398, 473, 478, 479, 486, 491, 495, 542, 547, 556, 557, 558, 559, 560, 561, 563, 565, 567, 568, 609, 616, 618, 652, 656, 663, 664, 665, 740, 744, 765, 774, 783, 784, 789], "attribut": [20, 115, 322, 502, 503, 510, 788, 802], "get": [20, 24, 29, 39, 40, 42, 43, 45, 46, 50, 52, 56, 62, 75, 78, 80, 84, 88, 93, 105, 117, 129, 130, 131, 132, 133, 145, 146, 147, 148, 149, 167, 172, 176, 178, 186, 189, 191, 198, 199, 200, 201, 204, 205, 212, 240, 244, 247, 248, 255, 259, 265, 270, 276, 279, 280, 281, 286, 287, 300, 305, 309, 322, 335, 336, 337, 338, 339, 340, 345, 353, 354, 355, 356, 364, 376, 380, 381, 385, 388, 397, 401, 404, 406, 407, 409, 411, 412, 413, 416, 417, 419, 452, 455, 458, 463, 464, 465, 472, 475, 476, 521, 540, 551, 558, 568, 570, 571, 572, 573, 574, 575, 576, 582, 613, 617, 618, 629, 630, 632, 643, 664, 665, 671, 706, 710, 711, 721, 731, 749, 755, 756, 757, 758, 767, 771, 782, 785, 792, 794], "height": [20, 28], "schema": [20, 21, 22, 23, 29, 262, 263, 270, 288, 350, 489, 536, 630, 663, 763, 764, 767, 771, 774, 777, 790], "__init__": [20, 115, 322, 478, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 788], "f": [21, 25, 28, 56, 90, 98, 101, 122, 196, 197, 269, 288, 315, 481, 490, 494, 541, 555, 628, 656, 663, 744, 754], "callabl": [21, 37, 66, 122, 196, 197, 219, 288, 294, 328, 426, 481, 494, 541, 555, 628, 663, 754, 774], "tupl": [21, 75, 76, 80, 217, 295, 304, 424, 443, 772], "return_dtyp": [21, 122, 196, 328, 481, 754], "union": [21, 26, 28, 29, 31, 41, 57, 58, 60, 61, 63, 65, 71, 78, 79, 85, 87, 98, 100, 102, 107, 122, 136, 160, 175, 179, 196, 240, 264, 269, 271, 272, 278, 288, 292, 295, 300, 301, 304, 306, 315, 390, 479, 480, 481, 484, 487, 488, 489, 490, 491, 495, 510, 521, 524, 525, 539, 544, 553, 602, 624, 656, 662, 663, 744, 754, 755, 758, 779, 783, 784, 788, 789, 790, 791], "inference_s": 21, "256": [21, 415], "custom": [21, 122, 196, 219, 288, 328, 426, 481, 555, 628, 663, 754], "user": [21, 122, 232, 328, 442, 481, 555, 663], "defin": [21, 42, 43, 63, 110, 122, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 328, 481, 502, 523, 555, 663, 753, 788, 789, 790], "udf": [21, 122, 328, 481, 555, 663], "over": [21, 32, 41, 98, 122, 150, 165, 174, 196, 197, 219, 220, 221, 222, 223, 224, 226, 227, 228, 327, 328, 357, 426, 427, 428, 430, 434, 481, 494, 541, 552, 555, 565, 663, 754, 763, 764, 774, 790], "The": [21, 42, 43, 44, 49, 54, 75, 100, 102, 114, 122, 135, 163, 168, 170, 171, 196, 213, 216, 219, 220, 221, 222, 223, 224, 226, 227, 228, 239, 242, 262, 264, 272, 278, 279, 280, 281, 283, 285, 287, 288, 295, 312, 346, 372, 379, 382, 420, 426, 427, 428, 429, 430, 431, 433, 434, 435, 451, 484, 510, 513, 552, 555, 565, 580, 592, 595, 596, 602, 603, 634, 637, 638, 644, 648, 659, 663, 669, 685, 688, 689, 695, 696, 722, 725, 726, 732, 736, 747, 763, 770, 772, 774, 800, 805], "receiv": 21, "each": [21, 54, 122, 168, 213, 285, 295, 345, 420, 481, 555, 556, 558, 568, 615, 627, 641, 652, 653, 663, 664, 665, 708, 720, 729, 740, 741, 777, 786, 787, 789], "implement": [21, 114, 122, 440, 441, 555, 663], "logic": [21, 122, 253, 277, 284, 297, 318, 470, 555, 663], "python": [21, 76, 122, 196, 328, 467, 481, 512, 523, 555, 663, 675, 676, 677, 682, 763, 764, 780], "almost": [21, 122, 555, 663], "alwai": [21, 122, 288, 555, 630, 663, 763], "_significantly_": [21, 122, 555, 663], "slower": [21, 65, 102, 112, 122, 546, 548, 555, 663], "more": [21, 41, 55, 60, 63, 75, 77, 99, 112, 114, 122, 139, 140, 141, 188, 196, 230, 239, 255, 278, 292, 311, 328, 347, 348, 349, 399, 437, 451, 472, 538, 555, 663, 770, 784, 790, 791], "memori": [21, 32, 83, 114, 122, 214, 327, 421, 446, 489, 543, 546, 547, 548, 555, 565, 663, 763, 764, 766, 770, 774, 776, 777, 778], "intens": [21, 122, 555, 663], "than": [21, 41, 54, 75, 77, 101, 122, 230, 239, 241, 278, 285, 437, 451, 523, 538, 546, 548, 555, 644, 648, 653, 659, 663, 732, 736, 741, 747, 763, 764, 781, 784, 790, 791], "same": [21, 99, 116, 121, 122, 162, 168, 219, 220, 221, 222, 223, 224, 226, 227, 228, 311, 323, 327, 328, 371, 426, 427, 428, 429, 430, 431, 433, 434, 435, 477, 478, 488, 555, 663, 786, 789], "nativ": [21, 122, 555, 663, 763, 766, 770], "becaus": [21, 30, 42, 55, 101, 122, 279, 328, 366, 555, 612, 663, 705], "engin": [21, 122, 555, 663, 772], "run": [21, 55, 122, 150, 264, 272, 295, 304, 357, 488, 502, 555, 612, 663, 705, 773, 779, 806], "rust": [21, 110, 114, 122, 534, 555, 663, 766, 770], "forc": [21, 54, 122, 284, 285, 555, 663], "materi": [21, 122, 295, 555, 663], "parallelis": [21, 122, 555, 663], "cannot": [21, 77, 122, 230, 304, 437, 555, 652, 663, 740, 763, 764], "optimis": [21, 122, 440, 441, 555, 663], "wherev": [21, 122, 555, 663], "possibl": [21, 122, 195, 257, 322, 555, 630, 653, 663, 741, 763], "you": [21, 28, 32, 54, 63, 94, 98, 114, 122, 139, 140, 141, 160, 166, 196, 215, 220, 221, 222, 223, 224, 226, 227, 228, 264, 269, 281, 285, 287, 304, 322, 327, 347, 348, 349, 422, 468, 476, 482, 544, 555, 565, 612, 663, 705, 763, 764, 765, 774], "should": [21, 42, 54, 109, 110, 111, 112, 113, 114, 117, 122, 150, 181, 183, 219, 220, 221, 222, 223, 224, 226, 227, 228, 231, 239, 268, 284, 285, 288, 304, 318, 328, 357, 426, 427, 428, 429, 430, 431, 433, 434, 435, 438, 451, 555, 577, 605, 612, 649, 655, 663, 666, 698, 705, 733, 737, 743, 753, 788, 789, 791], "strongli": [21, 122, 555, 663], "prefer": [21, 32, 122, 219, 327, 426, 555, 663], "achiev": [21, 122, 555, 663], "best": [21, 122, 555, 663], "perform": [21, 42, 43, 54, 70, 114, 122, 279, 280, 285, 317, 531, 555, 663, 763, 764, 766, 770, 774, 776, 777, 778], "lambda": [21, 28, 37, 122, 157, 158, 159, 196, 197, 219, 269, 288, 328, 367, 368, 369, 495, 555, 628, 663, 774, 784], "given": [21, 30, 75, 81, 82, 156, 163, 193, 213, 216, 217, 220, 221, 223, 226, 227, 228, 233, 234, 254, 302, 303, 319, 321, 328, 365, 366, 372, 402, 420, 424, 427, 428, 430, 433, 434, 435, 444, 445, 471, 477, 479, 496, 601, 610, 623, 641, 656, 663, 694, 703, 716, 729, 763, 764, 774, 788, 789, 790, 791], "tri": 21, "case": [21, 32, 42, 43, 196, 279, 280, 322, 327, 630, 631, 778, 795], "first": [21, 45, 54, 56, 62, 67, 98, 99, 102, 131, 132, 133, 150, 172, 178, 191, 264, 281, 285, 287, 311, 322, 337, 340, 357, 358, 380, 388, 401, 484, 486, 551, 558, 565, 595, 612, 614, 615, 640, 642, 646, 647, 664, 688, 705, 707, 708, 728, 730, 734, 735, 763, 764, 765, 772, 774, 777], "determin": [21, 37, 42, 43, 98, 102, 216, 220, 221, 222, 223, 224, 226, 227, 228, 239, 279, 280, 451, 484, 489, 519, 545, 548, 577, 628, 630, 666, 763, 764, 765, 770, 778], "frame": [21, 47, 63, 95, 101, 110, 282, 295, 488, 552, 765, 786, 790], "level": [21, 37, 63, 114, 166, 281, 287, 774, 776, 777, 778, 790], "track": 21, "black": [21, 478], "box": 21, "arbitrarili": 21, "drop": [21, 27, 28, 99, 151, 153, 154, 269, 311, 359, 361, 611, 704], "rearrang": 21, "transform": [21, 196, 319, 657, 658], "add": [21, 32, 42, 107, 108, 210, 246, 279, 284, 314, 315, 316, 317, 321, 327, 525, 795], "new": [21, 26, 28, 47, 48, 63, 64, 71, 72, 89, 101, 106, 118, 162, 168, 174, 197, 250, 298, 310, 324, 328, 362, 371, 423, 460, 466, 477, 646, 647, 652, 653, 660, 661, 663, 734, 735, 740, 741, 748, 750], "want": [21, 32, 63, 139, 140, 141, 166, 196, 220, 221, 222, 223, 224, 226, 227, 228, 264, 281, 287, 327, 347, 348, 349, 468], "ar": [21, 28, 30, 33, 37, 42, 43, 54, 55, 60, 75, 91, 95, 102, 114, 119, 148, 149, 153, 154, 156, 177, 179, 180, 181, 183, 184, 185, 188, 213, 216, 217, 219, 225, 239, 241, 242, 247, 269, 273, 279, 280, 281, 285, 287, 288, 292, 295, 316, 322, 325, 327, 355, 356, 365, 366, 376, 378, 387, 390, 391, 392, 393, 394, 395, 399, 420, 424, 426, 432, 451, 457, 468, 476, 478, 482, 484, 489, 491, 523, 532, 538, 543, 545, 547, 548, 602, 628, 695, 763, 764, 765, 772, 774, 776, 777, 781, 786, 787, 789, 790, 793, 800, 802, 805], "preserv": 21, "syntax": [21, 63, 85, 304, 322], "instead": [21, 42, 58, 63, 65, 110, 112, 113, 131, 133, 273, 278, 279, 318, 337, 340, 440, 441, 482, 770, 784, 790], "foo": [21, 24, 26, 27, 28, 29, 32, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 51, 53, 56, 57, 58, 59, 61, 64, 65, 67, 69, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 98, 100, 103, 104, 105, 110, 118, 139, 168, 172, 173, 209, 217, 233, 234, 248, 250, 265, 269, 270, 275, 282, 283, 284, 300, 301, 312, 315, 347, 479, 482, 487, 550, 553, 565, 595, 610, 613, 614, 617, 618, 634, 636, 637, 638, 641, 645, 649, 651, 653, 655, 657, 658, 663, 688, 709, 724, 725, 726, 729, 731, 741, 753, 761, 779, 795], "bar": [21, 24, 26, 27, 28, 29, 32, 35, 36, 37, 38, 39, 40, 45, 47, 48, 49, 51, 53, 56, 57, 58, 59, 61, 64, 65, 67, 69, 71, 72, 73, 75, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 100, 103, 104, 110, 118, 173, 239, 265, 269, 270, 275, 282, 283, 284, 300, 301, 312, 451, 479, 553, 565, 618, 637, 638, 651, 653, 663, 709, 725, 726, 741, 779, 795], "8": [21, 24, 25, 26, 27, 28, 29, 31, 35, 36, 38, 45, 47, 53, 57, 58, 59, 61, 69, 71, 73, 75, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 93, 94, 95, 96, 101, 103, 104, 107, 110, 121, 132, 144, 150, 153, 154, 174, 190, 207, 209, 210, 217, 218, 221, 222, 224, 226, 228, 240, 246, 250, 265, 269, 270, 271, 275, 284, 295, 300, 301, 310, 315, 357, 415, 426, 429, 431, 432, 433, 435, 495, 509, 518, 520, 526, 611, 612, 644, 648, 656, 674, 704, 705, 732, 736, 744, 780, 783, 784, 789, 790], "map": [21, 29, 71, 91, 197, 258, 270, 298, 481, 544, 545, 763, 764, 766, 767, 770, 771, 774, 776], "t": [21, 101, 150, 156, 157, 158, 159, 357, 365, 367, 368, 369, 439, 476, 481, 489, 612, 656, 705, 744, 765, 774, 795], "column_0": [21, 98, 546, 548], "column_1": [21, 98, 546, 548], "15": [21, 42, 43, 48, 150, 280, 357], "24": [21, 30, 43, 148, 150, 280, 357, 584, 673], "It": [21, 122, 288, 322, 440, 441, 523, 555, 630, 663], "better": [21, 122, 258, 440, 441, 555, 663], "an": [21, 22, 23, 30, 33, 37, 42, 43, 54, 63, 65, 67, 73, 75, 90, 94, 101, 115, 118, 119, 122, 134, 136, 137, 139, 140, 141, 145, 146, 147, 148, 149, 150, 155, 166, 196, 197, 211, 219, 220, 221, 222, 223, 224, 226, 227, 228, 245, 249, 262, 263, 264, 272, 279, 280, 285, 288, 295, 304, 306, 316, 322, 341, 342, 343, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 363, 366, 426, 427, 428, 429, 430, 431, 433, 434, 435, 440, 441, 456, 468, 476, 482, 487, 488, 526, 527, 530, 531, 534, 543, 555, 565, 605, 612, 614, 631, 637, 641, 649, 655, 656, 663, 698, 705, 707, 725, 729, 733, 737, 743, 744, 753, 763, 764, 765, 772, 774, 776, 779, 789, 790, 791, 802], "select": [21, 54, 58, 63, 75, 84, 96, 100, 102, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 167, 168, 169, 170, 171, 173, 174, 176, 177, 179, 180, 182, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 255, 256, 257, 258, 259, 265, 282, 285, 305, 312, 440, 441, 452, 459, 479, 481, 482, 483, 487, 490, 495, 525, 539, 542, 578, 580, 581, 582, 583, 584, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 625, 626, 628, 629, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 648, 649, 651, 652, 653, 655, 657, 658, 660, 661, 705, 728, 730, 762, 763, 764, 766, 770, 772, 774, 775, 783, 784, 802], "scalar": [21, 231, 438], "9": [21, 37, 43, 45, 49, 88, 93, 101, 104, 106, 107, 110, 121, 132, 144, 149, 153, 154, 174, 179, 190, 207, 217, 219, 221, 227, 236, 240, 250, 280, 283, 314, 315, 371, 390, 426, 434, 436, 448, 486, 490, 553, 567, 580, 596, 603, 604, 622, 625, 669, 678, 680, 686, 691, 696, 783], "14": [21, 174, 556, 557, 559, 560, 561, 562, 563, 564, 566, 567, 780], "follow": [21, 42, 43, 54, 102, 122, 168, 213, 220, 221, 222, 223, 224, 226, 227, 228, 278, 279, 280, 285, 420, 440, 441, 481, 595, 602, 688, 695, 763, 764, 772, 774, 800, 805, 807], "creat": [22, 23, 42, 43, 64, 67, 102, 115, 134, 137, 155, 214, 245, 258, 262, 263, 266, 267, 279, 280, 322, 341, 343, 346, 350, 362, 363, 421, 456, 468, 482, 490, 496, 522, 523, 524, 525, 543, 546, 548, 602, 650, 695, 738, 789, 790, 791], "empti": [22, 23, 51, 60, 110, 262, 263, 292, 322, 346, 350, 386, 531, 765, 779], "copi": [22, 23, 90, 262, 263, 324, 346, 350, 362, 464, 468, 543, 659, 747], "ident": [22, 23, 262, 263, 346, 350], "clone": [22, 94, 95, 262, 346, 467, 468, 476, 544, 545, 546, 547, 548], "cheap": [22, 23, 262, 263, 327, 346, 350], "deepcopi": [22, 23, 262, 263, 346, 350], "13": [22, 23, 33, 34, 40, 43, 48, 62, 107, 219, 221, 262, 280, 315, 328, 490, 556, 557, 559, 560, 561, 562, 563, 564, 566, 567, 696], "clear": [23, 263, 350], "properti": [24, 29, 46, 78, 80, 105, 134, 137, 155, 245, 265, 270, 300, 341, 343, 363, 364, 376, 381, 411, 443, 456, 463, 749, 802], "7": [24, 25, 26, 27, 29, 31, 35, 36, 38, 42, 43, 45, 47, 49, 53, 57, 58, 59, 61, 64, 69, 71, 73, 75, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 93, 94, 95, 96, 101, 102, 103, 104, 110, 149, 161, 172, 174, 207, 217, 221, 227, 248, 250, 265, 270, 271, 275, 280, 283, 284, 296, 300, 301, 310, 334, 434, 523, 580, 596, 604, 606, 669, 674, 697, 783], "ham": [24, 26, 27, 28, 29, 35, 36, 38, 44, 45, 47, 53, 57, 58, 59, 61, 64, 69, 71, 73, 75, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 93, 94, 95, 96, 103, 104, 110, 265, 269, 270, 275, 284, 300, 301, 487], "appl": [24, 47, 53, 71, 73, 91, 210, 218, 246, 284, 556, 557, 559, 560, 561, 562, 563, 564, 566, 567, 639, 654, 727, 742], "banana": [24, 91, 210, 218, 246, 556, 557, 559, 560, 561, 562, 563, 564, 566, 567], "orang": [24, 478, 556, 557, 559, 560, 561, 563, 566, 567], "summari": [25, 358], "statist": [25, 114, 158, 159, 188, 220, 221, 222, 223, 224, 225, 226, 227, 228, 239, 358, 368, 369, 399, 432, 451, 763, 764], "datetim": [25, 42, 43, 54, 102, 110, 115, 155, 175, 220, 221, 222, 223, 224, 226, 227, 228, 253, 279, 280, 285, 322, 363, 384, 404, 407, 412, 413, 441, 463, 470, 486, 523, 525, 610, 656, 703, 744, 753, 758], "date": [25, 42, 43, 54, 95, 220, 221, 222, 223, 224, 226, 227, 228, 253, 279, 280, 285, 384, 404, 407, 412, 413, 441, 470, 486, 502, 523, 578, 580, 581, 582, 583, 584, 585, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 656, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 703, 744, 758, 763, 764, 774, 775, 802], "d": [25, 44, 45, 48, 53, 56, 88, 90, 101, 104, 107, 110, 168, 284, 315, 478, 486, 556, 557, 559, 560, 561, 562, 563, 564, 566, 567, 582, 636, 641, 652, 656, 671, 693, 724, 729, 740, 744, 775], "e": [25, 45, 56, 88, 90, 101, 107, 110, 156, 160, 168, 193, 232, 239, 315, 365, 439, 442, 451, 468, 478, 539, 763, 764, 765, 766, 770, 776, 778], "usd": 25, "eur": [25, 788], "2020": [25, 43, 280, 581, 584, 587, 589, 591, 594, 599, 668, 670, 673, 679, 681, 684, 687, 692], "2021": [25, 42, 102, 384, 656, 674, 744, 753], "2022": [25, 523, 525, 656, 674, 744, 780], "count": [25, 42, 43, 54, 63, 64, 67, 98, 102, 108, 145, 190, 203, 206, 220, 221, 222, 223, 224, 226, 227, 228, 256, 258, 279, 280, 285, 317, 358, 410, 414, 473, 474, 555, 564, 595, 636, 688, 724, 759, 763, 764, 766, 770, 774, 776, 777, 778], "null_count": [25, 28, 150, 357, 358], "mean": [25, 34, 67, 93, 114, 162, 165, 168, 221, 239, 274, 358, 371, 374, 378, 428, 451, 485, 549, 640, 728, 763, 764, 774], "266667": 25, "null": [25, 28, 34, 37, 38, 49, 53, 58, 59, 64, 69, 81, 82, 85, 86, 87, 91, 100, 103, 110, 118, 121, 131, 133, 135, 139, 144, 151, 153, 154, 157, 158, 159, 160, 163, 164, 165, 166, 170, 174, 181, 182, 183, 184, 185, 187, 190, 206, 208, 214, 219, 220, 221, 222, 223, 224, 226, 227, 228, 233, 234, 236, 241, 253, 260, 269, 274, 283, 284, 302, 303, 306, 312, 328, 337, 340, 347, 359, 362, 367, 368, 369, 372, 374, 378, 394, 395, 414, 415, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 439, 444, 445, 448, 468, 470, 476, 479, 486, 489, 490, 491, 539, 561, 581, 584, 587, 589, 591, 594, 599, 611, 613, 614, 617, 623, 628, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 650, 652, 653, 654, 659, 670, 673, 679, 681, 684, 687, 692, 704, 716, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 736, 738, 740, 741, 742, 753, 763, 764, 774, 783], "std": [25, 219, 358, 433], "101514": 25, "707107": [25, 158, 368], "min": [25, 34, 42, 43, 67, 114, 139, 141, 147, 165, 213, 223, 274, 280, 347, 349, 354, 358, 374, 420, 430, 779, 790, 791], "01": [25, 42, 43, 102, 280, 523, 525, 578, 580, 581, 582, 583, 584, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 656, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 744], "max": [25, 34, 42, 43, 67, 114, 139, 140, 146, 165, 207, 213, 220, 232, 274, 280, 347, 348, 353, 358, 374, 420, 427, 442, 653, 662, 741, 790, 791], "median": [25, 67, 222, 429], "": [26, 28, 30, 41, 42, 48, 53, 54, 72, 73, 89, 110, 160, 163, 188, 202, 204, 205, 207, 208, 215, 219, 242, 269, 278, 279, 285, 310, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 360, 364, 366, 368, 369, 371, 372, 373, 374, 375, 377, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 419, 420, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 444, 447, 448, 449, 450, 452, 453, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 495, 496, 525, 539, 542, 553, 582, 602, 611, 615, 616, 623, 624, 627, 631, 643, 644, 648, 650, 651, 653, 656, 659, 661, 662, 668, 671, 695, 704, 708, 709, 711, 716, 717, 720, 723, 724, 725, 726, 727, 729, 731, 732, 734, 736, 738, 741, 742, 744, 747, 750, 755, 758, 760, 763, 764, 784, 791], "place": [27, 47, 48, 72, 81, 82, 85, 104, 110, 131, 133, 233, 234, 302, 303, 306, 337, 340, 421, 423, 444, 445, 453, 616, 623, 709, 716], "subset": [28, 63, 93, 99, 269, 311, 549], "where": [28, 32, 60, 106, 156, 231, 239, 292, 327, 338, 365, 438, 451, 455, 475, 477, 483, 604, 697, 772, 781, 795], "which": [28, 32, 85, 99, 109, 110, 111, 112, 113, 114, 119, 177, 180, 181, 183, 184, 185, 269, 311, 318, 327, 387, 391, 392, 393, 394, 395, 440, 631, 763, 764, 765, 772, 774], "appli": [28, 37, 66, 110, 158, 159, 196, 207, 219, 220, 221, 223, 227, 269, 281, 287, 288, 294, 368, 369, 426, 427, 428, 430, 434, 479, 483, 489, 494, 541, 553, 580, 583, 585, 586, 588, 590, 592, 593, 596, 597, 598, 603, 604, 606, 669, 672, 674, 678, 680, 683, 685, 686, 689, 690, 691, 696, 697, 699, 754, 774, 788, 790, 791, 802], "wise": [28, 37, 123, 124, 125, 126, 127, 128, 142, 143, 161, 194, 236, 237, 238, 251, 252, 269, 329, 330, 331, 332, 333, 334, 351, 352, 370, 403, 448, 449, 450, 461, 462, 494, 541], "singl": [28, 32, 39, 85, 166, 196, 214, 217, 260, 269, 306, 322, 327, 421, 424, 464, 487, 489, 553, 595, 634, 649, 655, 662, 688, 722, 733, 737, 743, 754, 763, 764, 772, 773, 774, 789], "snippet": [28, 269], "how": [28, 53, 101, 151, 174, 216, 269, 284, 322, 359, 478, 489, 545, 548, 577, 611, 637, 666, 704, 725, 772], "could": [28, 42, 136, 269, 279, 342, 494, 519, 528, 541], "base": [28, 35, 42, 43, 156, 193, 194, 269, 275, 279, 280, 365, 402, 403, 477, 500, 565, 755, 758, 802], "condit": [28, 35, 75, 269, 275, 483, 639, 654], "filter": [28, 51, 260, 269, 272, 282, 440, 482, 555, 639, 654, 774, 775], "fold": [28, 269, 486, 494, 631, 784], "acc": [28, 269, 494, 541], "is_nul": [28, 269], "expr": [28, 31, 33, 35, 41, 42, 43, 53, 63, 67, 75, 79, 85, 106, 107, 269, 271, 273, 275, 278, 279, 280, 284, 301, 303, 306, 314, 315, 357, 373, 445, 459, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 522, 524, 525, 526, 539, 540, 541, 542, 550, 551, 553, 662, 705, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 773, 779, 781, 782, 783, 784, 785, 794, 795, 800], "also": [29, 41, 42, 43, 63, 85, 160, 174, 213, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 316, 420, 494, 523, 541, 579, 668, 790, 791, 800], "found": [29, 110, 533, 642, 656, 661, 730], "header": [29, 67, 98, 110, 114, 763, 764, 765, 774], "colnam": [29, 197, 270, 790], "float64": [29, 30, 37, 78, 110, 123, 124, 125, 126, 127, 128, 136, 142, 143, 160, 181, 183, 237, 238, 251, 252, 270, 300, 486, 539, 598, 691, 790], "unit": [30, 195, 257, 295, 322, 366, 463, 502, 503, 523, 578, 582, 601, 605, 631, 667, 671, 694, 698, 790, 791], "sizeunit": [30, 366], "float": [30, 33, 54, 69, 77, 82, 138, 139, 140, 141, 153, 154, 156, 157, 158, 159, 163, 164, 169, 174, 181, 183, 184, 185, 193, 209, 212, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 234, 273, 285, 296, 303, 304, 342, 344, 347, 348, 349, 360, 365, 366, 367, 368, 369, 372, 373, 377, 389, 399, 402, 404, 405, 406, 407, 412, 413, 418, 419, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 440, 441, 451, 455, 457, 475, 485, 486, 495, 496, 504, 505, 566, 598, 610, 691, 703, 755, 756, 757, 758, 761, 773, 775, 782, 784, 786, 787, 788, 790, 791, 794], "estim": [30, 158, 159, 188, 366, 368, 369, 399, 763, 764], "total": [30, 366], "heap": [30, 366], "alloc": [30, 70, 366, 763, 764], "size": [30, 42, 101, 114, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 279, 366, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 482, 763, 764, 789, 790, 791, 792], "byte": [30, 110, 366, 763, 764, 765, 766, 767, 770, 771, 774], "sum": [30, 37, 41, 43, 67, 122, 148, 149, 156, 166, 207, 220, 221, 223, 226, 227, 228, 260, 278, 280, 355, 356, 365, 366, 427, 428, 430, 433, 434, 435, 479, 494, 495, 541, 553, 663, 758], "its": [30, 100, 312, 366], "buffer": [30, 366, 763, 764], "nest": [30, 366, 478, 510, 802], "multipl": [30, 32, 35, 42, 47, 65, 67, 85, 107, 160, 202, 217, 220, 221, 222, 223, 224, 226, 227, 228, 242, 268, 275, 279, 306, 315, 316, 327, 366, 408, 424, 484, 488, 489, 494, 539, 541, 553, 631, 662, 754, 763, 764, 774, 776, 778, 789, 791, 795], "bitmap": [30, 366], "therefor": [30, 366], "comput": [30, 54, 99, 114, 116, 123, 124, 125, 126, 127, 128, 142, 143, 145, 146, 147, 148, 149, 152, 156, 161, 188, 193, 194, 202, 208, 211, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 236, 237, 238, 239, 243, 251, 252, 282, 284, 285, 311, 316, 323, 329, 330, 331, 332, 333, 334, 351, 352, 353, 354, 355, 356, 360, 365, 366, 370, 399, 402, 403, 408, 415, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 448, 449, 450, 451, 454, 461, 462, 488, 489, 493, 526, 528, 566, 619, 620, 621, 712, 713, 714, 760, 781, 802, 804], "particular": [30, 366, 763, 766, 770, 776, 778], "structarrai": [30, 366], "upper": [30, 42, 175, 257, 279, 366, 482, 523, 763, 764], "bound": [30, 42, 175, 195, 257, 279, 366, 482, 523, 614, 707, 763, 764], "slice": [30, 219, 220, 221, 222, 223, 224, 226, 227, 228, 264, 272, 288, 295, 304, 366, 426, 427, 428, 429, 430, 431, 433, 434, 435, 488, 615, 627, 708, 720], "remain": [30, 41, 122, 278, 288, 366, 652, 653, 740, 741, 763, 764, 774], "constant": [30, 43, 280, 366], "unchang": [30, 122, 253, 288, 366, 470, 663], "howev": [30, 366], "smaller": [30, 114, 272, 366], "visibl": [30, 366], "capac": [30, 83, 366, 446], "ffi": [30, 366], "kb": [30, 366], "mb": [30, 366], "gb": [30, 366], "tb": [30, 366], "scale": [30, 366], "x": [30, 47, 50, 52, 53, 60, 122, 171, 196, 216, 239, 253, 284, 292, 305, 324, 328, 374, 398, 451, 470, 495, 609, 616, 652, 663, 740, 763, 764, 774, 784, 789, 790], "revers": [30, 85, 131, 133, 145, 146, 147, 148, 149, 197, 210, 213, 232, 241, 242, 246, 254, 306, 337, 340, 353, 354, 355, 356, 420, 442, 453, 471, 484, 625, 718], "1_000_000": [30, 366], "y": [30, 50, 52, 53, 60, 216, 284, 292, 305, 324, 495, 609, 616, 656, 693, 744, 784, 789, 790], "v": [30, 114, 231, 438, 496], "1000": [30, 587, 659, 679, 765], "z": [30, 50, 52, 53, 60, 171, 216, 284, 292, 305, 374, 577, 609, 666, 789, 790], "uint32": [30, 131, 133, 216, 249, 253, 338, 342, 366, 439, 470, 521, 580, 583, 586, 588, 590, 592, 593, 596, 597, 598, 603, 604, 607, 608, 618, 636, 643, 669, 672, 678, 680, 683, 685, 686, 689, 690, 691, 696, 697, 700, 701, 711, 724, 780], "25888898": 30, "689577102661133": 30, "long": [31, 60, 101, 271, 292], "largelist": 31, "letter": [31, 160, 245, 271, 539, 558, 568, 664, 665], "differ": [32, 42, 43, 98, 151, 204, 205, 256, 279, 280, 327, 359, 412, 413, 439, 540, 579, 580, 595, 596, 603, 611, 656, 668, 669, 688, 689, 696, 704, 744, 755, 758, 763], "vstack": [32, 489], "chunk": [32, 62, 114, 121, 214, 327, 345, 409, 421, 464, 552, 763, 764, 774, 776, 777, 778, 790, 791], "append": [32, 53, 54, 214, 284, 285, 790], "underli": [32, 90, 215, 229, 322, 327, 422, 436, 446, 463, 464, 468, 527, 534, 578, 579, 580, 583, 585, 586, 588, 590, 592, 593, 596, 597, 598, 603, 604, 605, 606, 667, 668, 669, 672, 674, 678, 680, 683, 685, 686, 689, 690, 691, 696, 697, 698, 699, 770, 790, 791], "locat": [32, 73, 96, 100, 312, 327, 441, 459], "thu": [32, 327, 774, 781], "caus": [32, 327, 534, 763, 764, 774], "realloc": [32, 327, 774, 776, 777], "have": [32, 70, 150, 157, 158, 159, 213, 304, 317, 327, 357, 367, 368, 369, 378, 420, 565, 631, 668, 763, 764, 765, 786, 790, 791, 793], "extra": [32, 65, 114, 327, 763, 765, 766, 770, 776, 778], "faster": [32, 101, 219, 256, 327, 328, 426], "queri": [32, 55, 264, 266, 267, 272, 281, 287, 295, 304, 317, 319, 327, 488, 642, 663, 730, 766, 772, 774, 776, 777, 778, 804, 806], "do": [32, 54, 90, 98, 101, 150, 264, 285, 288, 295, 304, 327, 357, 468, 476, 479, 488, 565, 612, 705, 774], "after": [32, 100, 213, 312, 327, 420, 659, 668, 747, 762, 763, 764, 766, 770, 774, 776, 777, 778], "instanc": [32, 37, 136, 220, 221, 222, 223, 224, 226, 227, 228, 288, 317, 327, 342, 494, 541, 631, 763, 764, 774, 790, 791], "dure": [32, 327, 763, 764, 774], "onlin": [32, 327], "rerun": [32, 327], "mani": [32, 327, 545, 548, 772], "time": [32, 42, 43, 54, 102, 253, 254, 264, 279, 280, 285, 295, 322, 327, 463, 470, 471, 488, 490, 491, 502, 503, 522, 523, 524, 525, 578, 579, 582, 595, 601, 605, 609, 610, 656, 667, 668, 671, 688, 694, 698, 702, 744, 773, 774, 802], "read": [32, 196, 272, 277, 297, 327, 552, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 776, 777, 778], "file": [32, 109, 110, 111, 112, 113, 114, 272, 297, 318, 327, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 774, 776, 777, 778], "store": [32, 327], "them": [32, 42, 43, 54, 102, 204, 205, 279, 280, 285, 327, 412, 413, 490, 616, 709], "latter": [32, 327], "finish": [32, 327, 478, 528], "rechunk": [32, 327, 345, 409, 489, 543, 547, 763, 764, 766, 774, 776, 777, 778], "vertic": [32, 101, 104, 489, 634, 722, 755], "df1": [32, 38, 104, 478, 489, 786], "20": [32, 47, 48, 66, 68, 72, 73, 129, 130, 131, 133, 151, 171, 174, 294, 602, 695, 753], "30": [32, 42, 47, 66, 72, 73, 91, 107, 129, 130, 131, 133, 151, 171, 294, 315, 496, 581, 597, 602, 606, 668, 670, 695], "40": [32, 66, 171, 294, 674], "50": [32, 139, 347, 545, 548], "60": [32, 598, 599, 656, 689, 691, 692, 744], "fill_valu": [33, 82, 101, 164, 234, 273, 303, 373, 445], "fill": [33, 34, 82, 101, 135, 163, 164, 165, 170, 174, 220, 221, 223, 226, 227, 228, 234, 273, 274, 303, 372, 373, 374, 427, 428, 430, 433, 434, 435, 445, 489, 542, 644, 648, 659, 732, 736, 747], "point": [33, 55, 77, 138, 153, 154, 164, 169, 181, 183, 229, 230, 273, 288, 344, 373, 377, 389, 436, 437, 504, 505, 598, 691, 790, 791], "nan": [33, 153, 154, 164, 174, 181, 183, 184, 185, 204, 205, 273, 322, 330, 334, 361, 373, 392, 393, 412, 413, 426, 547, 781, 786, 787, 790], "evalu": [33, 35, 54, 58, 107, 150, 173, 175, 179, 275, 282, 284, 285, 314, 315, 338, 357, 477, 480, 482, 483, 526, 783], "replac": [33, 34, 73, 98, 106, 273, 314, 440, 441, 637, 647, 725, 735, 763, 764, 774], "Not": [33, 181, 183, 273], "miss": [33, 135, 170, 174, 181, 183, 273, 476, 489, 781], "To": [33, 153, 154, 165, 273, 784], "fill_nul": [33, 273, 656, 744], "strategi": [34, 53, 54, 62, 165, 274, 284, 285, 374, 628, 763, 788, 789, 790, 791], "fillnullstrategi": [34, 165, 274, 374], "limit": [34, 135, 139, 140, 141, 165, 170, 274, 281, 347, 348, 349, 374, 774], "matches_supertyp": [34, 274], "forward": [34, 54, 165, 170, 274, 285, 374], "backward": [34, 54, 114, 135, 165, 274, 285, 374], "zero": [34, 75, 90, 164, 165, 239, 274, 374, 451, 464, 468, 543, 659, 747, 762, 763, 764, 766, 770], "one": [34, 35, 42, 43, 60, 67, 75, 93, 97, 117, 165, 219, 241, 242, 249, 268, 274, 275, 279, 280, 292, 316, 327, 374, 426, 479, 532, 553, 554, 565, 660, 748, 783, 784, 791], "consecut": [34, 135, 165, 170, 274, 374, 634, 722], "supertyp": [34, 121, 274], "fill_nan": 34, "predic": [35, 75, 166, 260, 264, 272, 275, 288, 295, 304, 317, 375, 440, 441, 488, 774, 776, 777, 778, 795], "boolean": [35, 37, 58, 107, 119, 120, 166, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 260, 275, 315, 325, 326, 338, 375, 383, 385, 387, 388, 390, 391, 392, 393, 394, 395, 397, 416, 417, 440, 477, 483, 610, 703, 723, 802], "find": [36, 231, 438, 484, 489], "index": [36, 42, 43, 48, 54, 67, 73, 75, 84, 96, 102, 108, 117, 129, 130, 131, 132, 133, 220, 221, 222, 223, 224, 226, 227, 228, 240, 249, 279, 280, 285, 305, 317, 335, 336, 337, 338, 339, 340, 441, 452, 459, 484, 521, 595, 607, 608, 614, 624, 640, 650, 688, 700, 701, 707, 717, 728, 738, 780], "reduct": 37, "effect": [37, 114, 317], "aggreg": [37, 41, 42, 57, 58, 59, 61, 63, 67, 68, 69, 86, 87, 101, 103, 117, 166, 187, 192, 196, 207, 219, 220, 221, 222, 223, 224, 226, 227, 228, 258, 288, 289, 290, 291, 293, 296, 307, 308, 313, 426, 427, 428, 430, 433, 434, 435, 489, 494, 495, 541, 553, 554, 557, 559, 565, 662, 752, 755, 758, 763, 764, 784, 802], "supercast": 37, "cast": [37, 42, 43, 58, 66, 95, 121, 137, 148, 149, 215, 247, 253, 279, 280, 294, 355, 356, 422, 457, 466, 470, 491, 543, 577, 578, 579, 642, 659, 666, 667, 668, 730, 793], "similar": [37, 54, 207, 285], "parent": 37, "rule": [37, 600, 693], "arithmet": 37, "int8": [37, 148, 149, 247, 355, 356, 425, 457], "take": [37, 89, 250, 310, 460, 477, 526, 540, 595, 688, 790], "A": [37, 42, 54, 65, 67, 91, 93, 101, 102, 110, 116, 177, 180, 181, 183, 187, 196, 197, 210, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 245, 246, 279, 285, 306, 319, 322, 426, 427, 428, 430, 433, 434, 435, 487, 488, 490, 499, 523, 526, 542, 549, 565, 581, 584, 587, 589, 591, 594, 599, 628, 631, 635, 636, 640, 641, 642, 659, 670, 673, 679, 681, 684, 687, 692, 723, 724, 728, 729, 730, 734, 735, 744, 747, 763, 764, 774, 800], "s1": [37, 477, 787], "s2": [37, 322, 327, 345, 360, 390, 409, 439, 477, 787], "minimum": [37, 61, 139, 141, 157, 158, 159, 201, 205, 213, 293, 347, 349, 367, 368, 369, 413, 417, 420, 682, 758, 789, 790, 791], "zip_with": 37, "concaten": [37, 345, 409, 489], "foo11": 37, "bar22": 37, "null_equ": [38, 439], "check": [38, 51, 119, 120, 175, 179, 288, 325, 326, 383, 384, 386, 389, 390, 396, 398, 439, 610, 635, 639, 654, 703, 723, 727, 742, 763, 764, 774, 786, 787], "equal": [38, 42, 54, 219, 220, 221, 222, 223, 224, 226, 227, 228, 279, 285, 426, 427, 428, 429, 430, 431, 433, 434, 435, 439, 482, 644, 648, 659, 732, 736, 747, 763, 764, 774, 786, 787, 793], "compar": [38, 99, 311, 439, 786, 787], "consid": [38, 60, 101, 107, 139, 140, 141, 150, 220, 221, 222, 223, 224, 226, 227, 228, 241, 281, 287, 292, 315, 322, 347, 348, 349, 357, 439, 440, 441, 496, 553, 565, 695, 775], "retriev": [39, 607, 608, 660, 700, 701, 748], "maintain_ord": [41, 65, 67, 99, 102, 117, 122, 249, 255, 278, 311, 472, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 663], "start": [41, 42, 55, 84, 102, 108, 160, 175, 240, 278, 305, 317, 452, 487, 494, 539, 541, 580, 582, 583, 590, 592, 596, 597, 598, 601, 602, 603, 604, 606, 624, 635, 639, 650, 654, 667, 668, 669, 671, 672, 678, 680, 683, 685, 686, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 717, 727, 738, 742, 762, 763, 764, 766, 770, 774, 776, 777, 778, 795], "group": [41, 42, 43, 63, 65, 67, 101, 102, 114, 117, 122, 207, 241, 242, 249, 278, 279, 280, 481, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 612, 640, 662, 663, 664, 665, 705, 728], "make": [41, 42, 43, 63, 70, 102, 158, 159, 216, 278, 279, 280, 368, 369, 489, 513, 543, 547, 652, 659, 740, 747, 763, 764, 766, 770, 772, 776, 778], "sure": [41, 70, 278, 482, 489, 543, 547, 763, 764, 766, 772], "consist": [41, 278], "expens": [41, 98, 278, 327, 763, 764, 770, 774, 777, 778], "work": [41, 43, 72, 99, 138, 139, 140, 141, 169, 255, 278, 280, 311, 344, 347, 348, 349, 377, 472, 612, 661, 705, 764, 765], "we": [41, 54, 85, 187, 285, 288, 328, 612, 705, 753, 763, 764, 765, 774, 795], "agg": [41, 42, 43, 117, 122, 166, 187, 241, 249, 260, 278, 280, 663], "sort": [41, 42, 43, 54, 65, 67, 102, 131, 133, 166, 187, 232, 242, 258, 260, 279, 280, 285, 337, 340, 442, 472, 474, 484, 553, 558, 568, 577, 664, 665, 666], "11": [41, 43, 114, 153, 154, 174, 208, 227, 240, 278, 280, 328, 426, 487, 595, 659, 688, 784], "loop": 41, "sub_df": 41, "index_column": [42, 43, 279, 280], "everi": [42, 89, 92, 102, 145, 146, 147, 148, 149, 150, 162, 168, 250, 272, 279, 310, 353, 354, 355, 356, 357, 371, 460, 494, 602, 607, 608, 611, 614, 615, 624, 627, 695, 700, 701, 704, 707, 708, 717, 720, 763, 764, 774], "period": [42, 43, 81, 82, 102, 157, 158, 159, 208, 233, 234, 279, 280, 302, 303, 367, 368, 369, 415, 444, 445, 523, 602, 623, 695, 716], "offset": [42, 43, 84, 102, 108, 240, 279, 280, 305, 317, 452, 595, 602, 624, 650, 688, 695, 717, 738, 763, 764, 766, 770, 774, 776, 777, 778], "truncat": [42, 279, 295], "include_boundari": [42, 279], "close": [42, 43, 220, 221, 222, 223, 224, 226, 227, 228, 239, 279, 280, 451, 523], "closedwindow": [42, 43, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 523], "dynamicgroupbi": 42, "int32": [42, 43, 136, 253, 279, 280, 470, 585, 606, 674, 699, 790, 791], "window": [42, 43, 150, 157, 158, 159, 207, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 279, 280, 357, 367, 368, 369, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 490, 523, 602, 695, 802], "calcul": [42, 151, 157, 158, 159, 188, 195, 225, 239, 257, 279, 359, 367, 368, 369, 399, 432, 451, 455, 475, 611, 704], "assign": [42, 213, 279, 420, 496, 652, 653, 740, 741, 789], "normal": [42, 156, 188, 239, 279, 365, 399, 451], "groupbi": [42, 43, 63, 117, 122, 150, 166, 187, 207, 241, 242, 249, 260, 279, 280, 357, 481, 612, 705, 802], "member": [42, 279, 390], "seen": [42, 135, 170, 279], "roll": [42, 43, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 279, 280, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 490], "slot": [42, 150, 151, 279, 357, 359, 611, 704], "interv": [42, 43, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 523, 598, 602, 669, 671, 672, 678, 680, 683, 685, 686, 689, 690, 691, 693, 694, 695, 696, 697, 699], "length": [42, 43, 84, 150, 219, 220, 221, 222, 223, 224, 226, 227, 228, 240, 279, 280, 295, 305, 345, 357, 400, 426, 427, 428, 429, 430, 431, 433, 434, 435, 452, 489, 496, 602, 624, 631, 644, 648, 650, 659, 695, 717, 732, 736, 738, 747, 777, 789], "argument": [42, 43, 58, 66, 67, 87, 95, 102, 112, 114, 220, 221, 222, 223, 224, 226, 227, 228, 264, 272, 279, 280, 294, 318, 322, 488, 602, 695, 763, 768, 770], "languag": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 595, 602, 688, 695, 774], "1n": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 595, 602, 688, 695], "nanosecond": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 525, 595, 598, 602, 688, 691, 695], "1u": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 595, 602, 688, 695], "microsecond": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 295, 524, 525, 595, 598, 602, 688, 695], "1m": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 587, 589, 594, 595, 599, 602, 679, 681, 687, 688, 692, 695], "millisecond": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 525, 595, 602, 688, 695], "second": [42, 43, 54, 102, 110, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 484, 523, 524, 525, 595, 602, 656, 688, 695], "minut": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 523, 524, 525, 595, 602, 688, 695], "1h": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 595, 602, 672, 688, 695], "hour": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 523, 524, 525, 595, 602, 688, 695], "1d": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 523, 578, 584, 591, 595, 602, 605, 667, 671, 673, 675, 676, 677, 682, 684, 688, 693, 694, 695, 697, 698], "dai": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 514, 522, 523, 524, 525, 582, 592, 595, 596, 597, 601, 602, 603, 604, 606, 688, 689, 695, 697], "1w": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 595, 602, 688, 695], "week": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 525, 595, 602, 604, 688, 695, 697], "1mo": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 523, 581, 595, 602, 668, 670, 685, 688, 689, 690, 695, 696], "calendar": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 501, 502, 585, 595, 602, 606, 674, 688, 695, 699], "month": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 522, 524, 580, 595, 602, 669, 688, 695], "1y": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 595, 602, 688, 695, 699], "year": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 522, 524, 585, 595, 596, 602, 603, 674, 688, 689, 695, 696], "1i": [42, 43, 54, 102, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 285, 595, 688], "combin": [42, 43, 44, 54, 102, 279, 280, 285, 304, 536, 537, 553], "3d12h4m25": [42, 43, 54, 102, 279, 280, 285, 523, 602, 695], "12": [42, 43, 54, 102, 148, 208, 279, 280, 285, 304, 328, 436, 496, 522, 523, 524, 583, 592, 597, 602, 606, 685, 695], "25": [42, 43, 54, 102, 106, 107, 279, 280, 285, 290, 313, 314, 315, 365, 415, 523, 602, 606, 695], "integ": [42, 43, 138, 169, 215, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 335, 336, 344, 377, 422, 441, 506, 507, 508, 509, 515, 516, 517, 518, 598, 691, 753, 789, 790], "10i": [42, 43, 279, 280], "often": [42, 43, 187, 216, 279, 280], "ascend": [42, 43, 279, 280, 484], "sens": [42, 43, 102, 279, 280, 763, 766, 770, 776, 778], "dynam": [42, 220, 221, 222, 223, 224, 226, 227, 228, 279], "indic": [42, 43, 177, 180, 181, 183, 184, 185, 220, 221, 222, 223, 224, 226, 227, 228, 231, 236, 249, 279, 280, 322, 387, 391, 392, 393, 394, 395, 438, 448, 459, 483, 549, 762, 763, 764, 766, 770, 774, 788, 789, 791], "need": [42, 43, 83, 94, 279, 280, 468, 662, 763, 764, 765, 786, 787], "temporarili": [42, 43, 279, 280, 478], "so": [42, 43, 67, 279, 280, 478, 484, 614, 707, 774], "matter": [42, 43, 279, 280], "neg": [42, 81, 82, 84, 233, 234, 240, 279, 302, 303, 305, 317, 444, 445, 452, 623, 624, 650, 716, 717, 738], "lower": [42, 69, 175, 195, 212, 215, 224, 272, 279, 296, 419, 422, 431, 482, 523, 566, 761, 774], "_lower_bound": [42, 279], "_upper_bound": [42, 279], "impact": [42, 279], "harder": [42, 279], "parallel": [42, 54, 55, 150, 279, 284, 285, 357, 488, 489, 552, 612, 705, 770, 772, 778, 802], "both": [42, 43, 53, 54, 75, 110, 121, 175, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 284, 285, 478, 523, 645, 649, 655], "tempor": [42, 43, 220, 221, 222, 223, 224, 226, 227, 228, 279, 280, 523], "date_rang": [42, 102, 578, 580, 581, 582, 583, 584, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699], "low": [42, 482, 523, 598], "16": [42, 43, 106, 107, 174, 221, 280, 304, 314, 315, 415, 449, 461, 506, 515, 525, 526, 780], "high": [42, 482, 523, 598], "30m": 42, "\u03bc": [42, 43, 54, 102, 280, 578, 580, 581, 582, 583, 584, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699], "00": [42, 54, 102, 523, 525, 578, 580, 581, 582, 583, 584, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 656, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 744], "02": [42, 43, 102, 229, 280, 523, 525, 578, 582, 583, 584, 590, 591, 592, 598, 599, 601, 602, 603, 605, 667, 668, 671, 672, 673, 675, 676, 677, 678, 680, 682, 683, 684, 685, 686, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698], "03": [42, 43, 102, 280, 523, 578, 581, 582, 584, 591, 592, 598, 599, 601, 602, 603, 605, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 680, 682, 684, 685, 686, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698], "alia": [42, 43, 56, 100, 106, 107, 122, 133, 139, 145, 146, 147, 148, 149, 166, 168, 173, 178, 179, 190, 191, 207, 208, 215, 253, 260, 280, 282, 287, 312, 314, 315, 340, 401, 485, 486, 490, 491, 495, 525, 526, 542, 578, 580, 581, 582, 584, 587, 589, 591, 594, 595, 596, 598, 599, 601, 604, 605, 612, 633, 635, 636, 639, 641, 643, 650, 652, 653, 654, 662, 667, 668, 671, 688, 694, 698, 705, 740, 741, 773, 783, 784], "time_min": 42, "time_max": 42, "boundari": [42, 139, 140, 141, 347, 348, 349], "ad": [42, 98, 106, 121, 314, 494], "time_count": 42, "_lower_boundari": 42, "_upper_boundari": 42, "u32": [42, 64, 108, 117, 129, 130, 131, 132, 133, 144, 145, 190, 203, 206, 213, 253, 256, 317, 337, 338, 339, 342, 420, 470, 473, 474, 483, 556, 560, 563, 564, 567, 580, 583, 590, 592, 596, 597, 598, 603, 604, 607, 608, 618, 636, 643, 669, 672, 678, 680, 683, 685, 686, 689, 690, 691, 696, 697, 711, 724, 731], "23": [42, 43, 280, 524, 583, 602, 672, 695, 780], "end": [42, 160, 175, 281, 287, 487, 539, 624, 635, 639, 650, 654, 717, 727, 738, 742, 763, 764, 774], "lower_bound": 42, "upper_bound": 42, "time_agg_list": 42, "belong": 42, "kei": [42, 54, 65, 67, 71, 74, 285, 298, 565], "04": [42, 102, 523, 525, 580, 581, 584, 590, 591, 592, 596, 598, 599, 602, 603, 604, 605, 656, 668, 670, 673, 678, 680, 683, 684, 685, 686, 690, 691, 692, 693, 695, 696, 697, 698, 744, 775], "idx": [42, 441, 628], "arang": [42, 101, 555], "2i": 42, "3i": 42, "a_agg_list": 42, "rollinggroupbi": 43, "dynamic_groupbi": [43, 280], "now": [43, 280], "individu": [43, 122, 134, 137, 245, 280, 345, 641, 729, 790], "groupby_dynam": [43, 280], "45": [43, 280, 636, 641, 724, 729], "48": [43, 280], "42": [43, 44, 280, 379], "09": [43, 280, 669], "18": [43, 174, 280, 295, 602, 605, 695, 698], "19": [43, 54, 280, 602, 668, 695], "32": [43, 280, 360, 415, 431, 504, 507, 516, 689, 780], "08": [43, 280, 523, 525, 656, 744, 786, 787], "43": [43, 280], "dt": [43, 115, 280, 322, 578, 580, 581, 582, 583, 584, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 800, 805], "with_column": [43, 66, 122, 136, 139, 171, 174, 175, 178, 181, 183, 184, 185, 207, 208, 253, 280, 294, 482, 486, 490, 491, 495, 526, 577, 612, 639, 646, 647, 650, 652, 653, 654, 656, 659, 661, 666, 705, 744, 783, 784, 795], "strptime": [43, 280, 600, 693], "out": [43, 177, 180, 280, 614, 707, 775, 780], "2d": [43, 94, 280, 669], "sum_a": [43, 280], "min_a": [43, 280], "max_a": [43, 280], "assert": [43, 280, 378, 786, 787, 789, 790, 791, 802], "to_list": [43, 280, 628], "seed": [44, 77, 171, 230, 235, 379, 437, 447], "seed_1": [44, 171, 379], "seed_2": [44, 171, 379], "seed_3": [44, 171, 379], "hash": 44, "uint64": [44, 171, 215, 379, 422, 521, 607, 608, 700, 701], "random": [44, 77, 171, 213, 230, 235, 379, 420, 437, 447, 789, 790, 791], "u64": [44, 171, 215, 379], "1381515935931787907": 44, "14326417405130769253": 44, "12561864296213327929": 44, "11391467306893437193": 44, "in_plac": [47, 83, 104, 421, 423, 446, 453], "grown": 47, "stack": [47, 104, 489], "modifi": [47, 104, 423, 579, 605, 668, 698, 745, 746, 763, 764, 774], "insert": [48, 72, 98, 100, 231, 312, 438, 634, 659, 722, 747, 763, 764, 766, 770, 774, 776, 777, 778], "certain": [48, 102, 160, 264, 295, 322, 530, 539], "baz": [48, 49, 67, 100, 283, 312, 565, 651, 653, 741], "intermedi": [49, 283, 382], "linear": [49, 69, 174, 200, 212, 224, 283, 296, 382, 419, 431, 490, 491, 566, 609, 702, 761], "mask": [50, 52, 176, 178, 186, 375, 385, 388, 397, 416, 417, 440, 477, 610, 703, 723], "duplic": [50, 53, 54, 99, 176, 284, 285, 311, 385, 484, 529], "uniqu": [52, 63, 132, 178, 186, 203, 256, 258, 339, 358, 388, 397, 410, 473, 474, 564, 759, 788, 789, 791], "left_on": [53, 54, 284, 285], "right_on": [53, 54, 284, 285], "joinstrategi": [53, 284], "inner": [53, 152, 284, 322, 360, 381, 478, 510, 616, 709], "suffix": [53, 54, 181, 183, 184, 185, 218, 284, 285, 553, 639, 727], "_right": [53, 54, 284, 285], "like": [53, 213, 272, 297, 420, 523, 565, 612, 633, 705, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771], "fashion": [53, 264, 272, 295, 304, 488], "outer": [53, 284], "semi": [53, 284], "anti": [53, 284, 322, 440, 441], "cross": [53, 284], "join_asof": [53, 284], "categor": [53, 115, 137, 253, 322, 343, 470, 478, 549, 793], "see": [53, 134, 137, 139, 140, 141, 165, 174, 188, 196, 239, 245, 347, 348, 349, 399, 451, 600, 693, 765, 772, 786, 787, 790, 791, 807], "stringcach": 53, "other_df": [53, 284], "by_left": [54, 285], "by_right": [54, 285], "asofjoinstrategi": [54, 285], "toler": [54, 285, 786, 787], "allow_parallel": [54, 284, 285], "force_parallel": [54, 284, 285], "asof": [54, 285], "join": [54, 174, 207, 264, 272, 285, 295, 304, 478, 488], "nearest": [54, 69, 138, 169, 212, 224, 285, 296, 344, 377, 419, 431, 566, 761], "rather": [54, 285, 659, 747], "asof_join": 54, "search": [54, 285], "last": [54, 67, 85, 88, 99, 131, 133, 150, 248, 285, 306, 309, 311, 337, 340, 357, 458, 568, 580, 596, 603, 614, 627, 653, 665, 669, 689, 696, 707, 720, 741, 785], "whose": [54, 67, 160, 285, 539], "less": [54, 285, 644, 648, 653, 659, 732, 736, 741, 747, 774], "greater": [54, 239, 285, 451, 653, 741], "numer": [54, 58, 139, 140, 141, 216, 285, 322, 347, 348, 349, 396, 439, 802], "By": [54, 85, 285, 455, 468, 475, 753, 763, 764, 765], "done": [54, 121, 136, 285, 306, 342, 644, 648, 662, 732, 736, 763, 764, 774], "within": [54, 285, 510, 786, 787], "distanc": [54, 285], "durat": [54, 102, 253, 285, 470, 523, 581, 584, 587, 589, 591, 594, 599, 605, 670, 673, 679, 681, 684, 687, 692, 698], "allow": [54, 55, 77, 215, 230, 284, 285, 288, 316, 422, 437, 439, 478, 530, 595, 656, 688, 744, 774, 776, 777, 778, 790, 791], "physic": [54, 137, 253, 261, 284, 285, 470, 577, 666, 763, 764], "plan": [54, 55, 261, 266, 267, 277, 284, 285, 297, 304, 318], "up": [54, 138, 284, 285, 288, 344, 513, 659, 747], "gdp": 54, "2016": 54, "2017": 54, "2018": 54, "2019": 54, "record": 54, "jan": 54, "1st": 54, "4164": 54, "4411": 54, "4566": 54, "4696": 54, "popul": 54, "12th": 54, "82": 54, "66": [54, 431], "83": 54, "52": [54, 107, 229, 315], "05": [54, 102, 523, 581, 598, 602, 668, 669, 670, 695, 697, 775, 786, 787], "object": [55, 95, 114, 115, 134, 137, 155, 245, 278, 282, 297, 322, 341, 343, 363, 456, 464, 523, 544, 753, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 776, 778, 789, 790, 791, 802], "execut": [55, 261, 295, 489, 612, 705], "until": [55, 478], "request": 55, "either": [55, 58, 75, 87, 790], "call": [55, 328, 764, 790, 791, 797, 803, 804], "fetch": [55, 262, 264, 281, 287, 312, 552, 774], "small": [55, 241, 242, 272], "describe_plan": 55, "unoptim": [55, 267], "describe_optimized_plan": 55, "optim": [55, 70, 264, 266, 272, 288, 295, 304, 317, 488, 770, 774, 776, 777, 778], "show_graph": 55, "un": 55, "graphviz": [55, 304], "graph": [55, 282, 316, 488, 804], "advis": 55, "thei": [55, 160, 219, 426], "head": [56, 121, 191, 287, 401], "axi": [57, 58, 60, 61, 87, 292], "maximum": [57, 110, 139, 140, 198, 204, 213, 289, 347, 348, 404, 412, 416, 420, 607, 675, 700, 755, 763, 764, 774, 789, 790, 791], "null_strategi": [58, 87], "nullstrategi": [58, 87], "ignor": [58, 87, 112, 151, 204, 205, 264, 272, 318, 359, 412, 413, 488, 611, 704, 790, 791], "propag": [58, 87, 204, 205, 412, 413], "uint8": [58, 148, 149, 247, 355, 356, 457, 478, 788], "666667": [58, 157, 313], "id_var": [60, 292], "value_var": [60, 292], "variable_nam": [60, 292], "value_nam": [60, 292], "unpivot": [60, 292], "wide": [60, 101, 292], "leav": [60, 292], "identifi": [60, 292], "massag": [60, 292], "while": [60, 98, 292, 765, 790, 791], "measur": [60, 292], "just": [60, 292, 774], "non": [60, 208, 219, 220, 221, 222, 223, 224, 226, 227, 228, 292, 415, 426, 427, 428, 429, 430, 431, 433, 434, 435, 468, 486, 491, 636, 641, 724, 729], "give": [60, 188, 216, 292, 399, 582, 671, 766, 770, 776, 777, 778, 802], "chunkedarrai": [62, 543], "One": [63, 67, 316, 322], "what": [63, 468, 476], "omit": [63, 789, 790, 791], "struct": [63, 97, 100, 115, 258, 312, 322, 494, 495, 628, 652, 653, 740, 741, 802], "pack": 63, "expr_unique_subset": 63, "per": [63, 64, 110, 562, 564, 566, 569, 570, 571, 572, 573, 574, 575, 576, 612, 614, 705, 707, 789, 790], "df_nuniqu": 63, "context": [63, 115, 117, 122, 166, 241, 242, 258, 316, 478, 481, 492, 540, 612, 630, 705, 779, 800], "equival": [63, 745, 746], "df_agg_nuniqu": 63, "simpl": 63, "as_dict": 65, "split": [65, 168, 553, 652, 653, 740, 741], "partit": [65, 770, 772, 775], "keep": [65, 99, 102, 187, 311, 486, 763, 764, 774], "predict": [65, 67, 70, 102], "requir": [65, 95, 99, 107, 114, 157, 158, 159, 255, 311, 315, 367, 368, 369, 468, 472, 547, 656, 744, 786, 787], "distinct": [65, 213, 420, 522, 524, 525, 629, 721, 791], "k": [65, 188, 254, 399, 471, 577, 666], "l": [65, 168], "m": [65, 322, 463, 502, 503, 523, 525, 578, 582, 601, 605, 656, 667, 671, 693, 694, 698, 744], "func": [66, 294, 328], "arg": [66, 95, 115, 294, 328, 468, 478, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 542], "kwarg": [66, 95, 107, 115, 294, 315, 468, 478, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520], "self": [66, 207, 264, 272, 294, 295, 304, 327, 440, 441, 477, 488], "keyword": [66, 75, 294, 322, 770], "def": [66, 98, 294, 789, 790, 791], "cast_str_to_int": [66, 294], "col_nam": [66, 294], "aggregate_fn": 67, "pivotagg": 67, "sort_column": 67, "spreadsheet": [67, 765], "well": 67, "predefin": 67, "transpos": [67, 565], "discoveri": 67, "interpol": [69, 165, 200, 212, 224, 296, 419, 431, 566, 761], "interpolationmethod": [69, 212, 224, 296, 419, 431, 566, 761], "between": [69, 112, 136, 152, 175, 208, 212, 224, 296, 342, 360, 415, 419, 431, 489, 493, 566, 616, 634, 709, 722, 760, 761, 768, 781, 788, 789, 790, 791], "higher": [69, 114, 212, 224, 296, 419, 431, 566, 761], "midpoint": [69, 212, 224, 296, 419, 431, 566, 761], "contigu": [70, 489, 543, 547, 763, 764, 766, 774, 776, 777, 778], "subsequ": 70, "old": [71, 298], "new_col": 72, "val": [74, 253, 577, 666], "by_pred": 75, "accord": [75, 674], "param": [75, 790, 791], "mutual": 75, "exclus": 75, "addition": 75, "ensur": [75, 258, 288, 468, 474, 790, 791, 793], "clariti": 75, "suppli": 75, "error": [75, 136, 322, 342, 527, 616, 637, 642, 656, 663, 709, 725, 730, 744, 763, 764, 774], "anyth": 75, "toomanyrowsreturn": [75, 802], "norowsreturn": [75, 802], "inherit": 75, "rowsexcept": [75, 802], "columnar": [76, 546, 548], "frac": [77, 157, 158, 159, 230, 239, 254, 367, 368, 369, 437, 451, 471], "with_replac": [77, 230, 437], "shuffl": [77, 230, 437, 555], "item": [77, 162, 168, 230, 371, 437, 489, 610, 614, 616, 653, 703, 707, 709, 741], "fraction": [77, 110, 208, 230, 415, 437, 598, 656, 691, 786, 787], "onc": [77, 230, 261, 437, 763, 764, 765], "gener": [77, 98, 230, 235, 437, 447, 628, 772, 788, 789, 790, 791], "shift_and_fil": 81, "shift": [82, 151, 208, 234, 303, 359, 415, 445, 490, 611, 704], "shrink": [83, 446], "usag": [83, 446, 763, 764, 774, 790, 791], "fit": [83, 101, 446], "exact": [83, 656, 744, 789, 790, 791], "hold": [83, 487], "support": [84, 107, 114, 240, 305, 315, 322, 452, 543, 624, 650, 717, 738, 765, 772, 788, 791], "nulls_last": [85, 131, 133, 241, 306, 337, 340], "accept": [85, 762, 763, 764, 766, 770], "descend": [85, 131, 133, 232, 306, 337, 340, 442], "ddof": [86, 103, 244, 259, 307, 313, 455, 475, 760, 781, 782, 794], "standard": [86, 158, 226, 239, 244, 307, 368, 451, 455, 585, 642, 674, 730, 780, 782], "deviat": [86, 158, 226, 244, 307, 368, 455, 782], "degre": [86, 103, 244, 259, 455, 475, 760, 781], "freedom": [86, 103, 244, 259, 455, 475, 760, 781], "21": [87, 602, 695], "nth": [89, 250, 310, 460, 653, 741], "arrow": [90, 111, 464, 468, 527, 543, 565, 766, 776], "mostli": [90, 166], "categoricaltyp": 90, "pyarrow": [90, 94, 95, 114, 322, 464, 467, 468, 543, 547, 763, 766, 770, 775, 780, 803], "large_str": 90, "as_seri": 91, "fruit": [91, 210, 218, 246, 639, 654, 727, 742], "car": [91, 210, 218, 246], "beetl": [91, 210, 218, 246], "audi": [91, 210, 218, 246], "28": [91, 605, 698], "300": [91, 427, 428, 430], "slow": [92, 150, 357, 545, 548, 763, 764, 774], "hot": 93, "encod": [93, 499, 520, 637, 725, 763, 764, 774], "dummi": [93, 465, 549], "foo_1": 93, "foo_2": 93, "foo_3": 93, "bar_6": 93, "bar_7": 93, "bar_8": 93, "ham_a": 93, "ham_b": 93, "ham_c": 93, "u8": [93, 465, 478], "re": [94, 752], "attempt": [94, 468], "ll": [94, 468], "instal": [94, 95, 304, 468, 547, 763, 764, 766, 770, 772, 780], "numpy_arrai": 94, "date_as_object": 95, "sent": [95, 468], "datetime64": 95, "pandas_df": 95, "core": 95, "three": [97, 783], "four": [97, 783], "five": 97, "num": [97, 175, 178, 659], "include_head": 98, "header_nam": 98, "column_nam": 98, "iter": [98, 150, 357], "diagon": [98, 489], "Will": [98, 264, 272, 295, 304, 322, 488, 755, 758], "veri": [98, 263, 350], "perhap": 98, "column_2": 98, "auto": [98, 770, 778], "name_gener": [98, 628], "base_nam": 98, "my_column_": 98, "my_column_0": 98, "my_column_1": 98, "my_column_2": 98, "uniquekeepstrategi": [99, 311], "origin": [99, 187, 215, 311, 636, 640, 641, 642, 644, 648, 659, 724, 728, 729, 730, 732, 736, 747, 763, 764], "conjunct": 99, "fail": [99, 311, 328, 656, 744], "decompos": [100, 312], "field": [100, 110, 312, 494, 513, 628, 652, 653, 661, 740, 741, 750], "t_a": [100, 312], "t_b": [100, 312], "t_c": [100, 312], "t_d": [100, 312], "womp": [100, 312], "t_": [100, 312], "t_struct": [100, 312], "step": [101, 482], "unstackdirect": 101, "without": [101, 150, 220, 221, 222, 223, 224, 226, 227, 228, 357, 362, 496, 695, 767, 771, 775, 779], "much": [101, 150, 357], "pivot": [101, 802], "skip": [101, 328, 763, 764, 765, 774], "phase": 101, "direct": [101, 770, 772, 778], "don": [101, 150, 357, 439, 476, 481, 489, 612, 705], "experiment": [101, 107, 150, 220, 221, 222, 223, 224, 226, 227, 228, 315, 357, 496, 695, 775], "subject": 101, "being": [101, 150, 220, 221, 222, 223, 224, 226, 227, 228, 357, 496, 695, 763, 764, 774, 775, 795], "break": [101, 150, 220, 221, 222, 223, 224, 226, 227, 228, 357, 496, 695, 775], "ascii_uppercas": 101, "eager": [101, 482, 483, 753, 773, 783, 800, 802], "g": [101, 160, 232, 439, 442, 468, 539, 763, 764, 765, 766, 770, 776, 778], "h": [101, 168], "col1_0": 101, "col1_1": 101, "col1_2": 101, "col2_0": 101, "col2_1": 101, "col2_2": 101, "time_column": 102, "regular": [102, 160, 487, 521, 539], "frequenc": 102, "ha": [102, 114, 122, 150, 254, 262, 346, 357, 378, 389, 471, 481, 631, 663], "forward_fil": 102, "06": [102, 597, 606, 697], "varianc": [103, 159, 188, 228, 259, 313, 369, 399, 435, 475, 794], "grow": 104, "b_squar": [106, 314], "36": [106, 314], "named_expr": [107, 315], "overwrit": [107, 272, 314, 315, 763, 764, 774], "provid": [107, 315, 637, 638, 640, 642, 663, 725, 726, 728, 730, 763, 764, 772, 774, 790, 791, 807], "is_not": [107, 315], "opt": [107, 315], "via": [107, 315, 763, 764, 765, 774, 776, 778], "with_columns_kwarg": [107, 315], "row_nr": [108, 317, 441], "binaryio": [109, 111, 762, 763, 765, 766, 767, 770, 771], "bytesio": [109, 110, 111, 114, 762, 763, 764, 765, 766, 770], "path": [109, 110, 111, 112, 113, 114, 232, 297, 318, 442, 642, 730, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 774, 776, 777, 778], "compress": [109, 111, 114], "avrocompress": 109, "uncompress": [109, 111, 114, 766, 776], "write": [109, 110, 111, 112, 114, 139, 140, 141, 304, 318, 347, 348, 349], "apach": [109, 114, 762], "avro": [109, 762, 802], "written": [109, 110, 111, 112, 113, 114, 318], "snappi": [109, 114], "deflat": 109, "has_head": [110, 763, 764, 765, 774], "sep": [110, 491, 552, 763, 764, 774], "quot": [110, 763, 764, 774], "batch_siz": [110, 763, 764, 777], "1024": [110, 763, 764, 777], "datetime_format": 110, "date_format": 110, "time_format": 110, "float_precis": 110, "null_valu": [110, 763, 764, 774], "textio": [110, 763], "_io": [110, 762, 765, 766], "pathlib": [110, 112, 113, 297, 318, 762, 765, 766, 767, 768, 769, 771, 774, 776, 777], "comma": 110, "csv": [110, 662, 763, 764, 765, 774, 802], "symbol": 110, "process": 110, "thread": [110, 552, 612, 705, 763, 764, 772, 792], "chrono": [110, 600, 656, 693, 744], "crate": 110, "precis": [110, 578, 656, 667], "timeunit": [110, 463, 502, 503, 523, 578, 601, 605, 667, 694, 698], "decim": [110, 229, 436], "dirpath": [110, 774], "new_fil": 110, "ipccompress": 111, "ipc": [111, 766, 767, 775, 776, 802], "binari": 111, "stream": [111, 264, 272, 295, 304, 488], "feather": [111, 766, 776, 802], "lz4": [111, 114], "zstd": [111, 114], "pretti": 112, "row_ori": 112, "json_lin": [112, 768], "to_str": [112, 318], "io": [112, 113, 297, 318, 768, 769, 807], "iobas": [112, 113, 297, 318, 768, 769], "serial": [112, 113], "represent": [112, 113, 253, 266, 267, 470, 577, 580, 583, 585, 586, 588, 590, 592, 593, 596, 597, 598, 603, 604, 606, 666, 669, 672, 674, 678, 680, 683, 685, 686, 689, 690, 691, 696, 697, 699, 804], "common": 112, "deprec": [112, 264, 272, 318, 488, 768, 797], "toggl": [112, 768, 793], "ndjson": [112, 768], "write_ndjson": 112, "newlin": [113, 769, 777], "delimit": [113, 634, 722, 763, 764, 769, 774, 777], "parquetcompress": 114, "compression_level": 114, "row_group_s": 114, "use_pyarrow": [114, 467, 763, 766, 770], "pyarrow_opt": [114, 770], "parquet": [114, 770, 771, 778, 802], "gzip": 114, "lzo": 114, "brotli": 114, "choos": 114, "good": 114, "fast": [114, 232, 442], "decompress": 114, "guarante": [114, 272, 763, 764], "deal": [114, 213, 322, 420, 656, 744], "older": 114, "reader": [114, 552, 764, 766, 770, 803], "disk": [114, 304], "22": [114, 487, 602, 605, 656, 695, 698, 744], "reduc": [114, 405, 418, 457, 560, 561, 563, 567, 763, 764, 770, 774, 776, 777, 778], "pressur": [114, 770, 777, 778], "improv": [114, 766, 776], "speed": 114, "At": 114, "moment": [114, 188, 239, 399, 451], "featur": [114, 478], "write_t": 114, "arr": [115, 322, 468, 526, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 704, 705, 708, 709, 711, 716, 717, 720, 800, 805], "namespac": [115, 134, 137, 155, 245, 322, 341, 343, 363, 456, 797, 802, 804], "relat": [115, 134, 137, 155, 245, 322, 341, 343, 363, 456], "cat": [115, 253, 322, 478, 491, 496, 577, 635, 657, 658, 666, 723, 800, 805], "meta": [115, 802], "absolut": [116, 323, 786, 787], "94": 117, "renam": [118, 197, 466, 633, 661, 750, 763, 764, 800], "confus": [119, 181, 183], "tt": 119, "tf": [119, 120], "ff": [119, 120], "upcast": 121, "tail": [121, 239, 451, 553], "project": [122, 241, 242, 264, 272, 288, 295, 304, 488, 774, 776, 777, 778], "depend": [122, 213, 420, 481, 540, 607, 608, 630, 700, 701, 780], "expect": [122, 288, 481, 532, 535, 538], "assum": [122, 288, 663], "a_times_2": 122, "invers": [123, 124, 125, 126, 127, 128, 329, 330, 331, 332, 333, 334], "cosin": [123, 124, 142, 143, 196, 329, 330, 351, 352], "570796": [123, 125, 329, 331], "hyperbol": [124, 126, 128, 143, 238, 252, 330, 332, 334, 352, 450, 462], "sine": [125, 126, 196, 237, 238, 331, 332, 449, 450], "881374": [126, 332], "tangent": [127, 128, 251, 252, 333, 334, 461, 462], "785398": [127, 333], "inf": [128, 177, 180, 334, 387, 391, 415, 496, 790, 791], "maxim": [129, 335, 560, 572], "minim": [130, 336, 407, 563, 575, 608, 701], "would": [131, 133, 213, 337, 340, 420, 468, 484, 614, 630, 707], "arg_sort": [133, 340], "exprlistnamespac": 134, "page": [134, 137, 245, 766, 776, 802], "full": [134, 137, 245, 502, 763, 764, 774], "detail": [134, 137, 245, 772, 786, 787, 807], "next": [135, 213, 420], "strict": [136, 322, 342, 439, 637, 656, 725, 744], "throw": [136, 322, 342, 642, 730], "due": [136, 342], "overflow": [136, 148, 149, 247, 322, 342, 355, 356, 457], "i32": [136, 606, 674, 699, 790, 795], "exprcatnamespac": 137, "set_ord": 137, "round": [138, 169, 251, 344, 377], "min_val": [139, 141, 347, 349], "max_val": [139, 140, 347, 348], "otherwis": [139, 140, 141, 157, 158, 159, 215, 328, 347, 348, 349, 367, 368, 369, 422, 440, 441, 795], "foo_clip": 139, "clip": [140, 141, 348, 349], "543081": [143, 352], "cumul": [145, 146, 147, 148, 149, 353, 354, 355, 356, 494, 495], "len": [145, 217, 424, 496, 643, 644, 648, 659, 732, 736, 747, 789, 790], "a_revers": [145, 146, 147, 148, 149, 197, 218, 246], "product": [148, 152, 355, 360], "int16": [148, 149, 247, 355, 356, 457], "uint16": [148, 149, 247, 355, 356, 457], "prevent": [148, 149, 247, 355, 356, 457], "issu": [148, 149, 247, 355, 356, 457, 763, 764, 765, 774], "min_period": [150, 157, 158, 159, 219, 220, 221, 222, 223, 224, 226, 227, 228, 357, 367, 368, 369, 426, 427, 428, 429, 430, 431, 433, 434, 435], "slide": [150, 357], "increas": [150, 357, 770], "anoth": [150, 242, 328, 357, 439, 578, 667], "realli": [150, 357], "o": [150, 168, 254, 357, 471, 766, 776], "complex": [150, 254, 357, 471], "visit": [150, 357], "null_behavior": [151, 359, 611, 704], "nullbehavior": [151, 359, 611, 704], "th": [151, 239, 359, 451, 611, 704], "discret": [151, 156, 359, 365, 496, 611, 704], "handl": [151, 359, 611, 637, 659, 704, 725, 747, 763, 764, 774], "44": 152, "drop_nul": 153, "drop_nan": 154, "exprdatetimenamespac": 155, "718281828459045": [156, 193, 365, 402], "formula": [156, 365], "pk": [156, 365], "probabl": [156, 365], "doesn": [156, 365, 476, 774], "459148": 156, "754888": 156, "com": [157, 158, 159, 367, 368, 369, 640, 728], "span": [157, 158, 159, 367, 368, 369], "half_lif": [157, 158, 159, 367, 368, 369], "alpha": [157, 158, 159, 264, 272, 295, 304, 367, 368, 369, 488], "adjust": [157, 158, 159, 239, 367, 368, 369, 451], "exponenti": [157, 158, 159, 161, 367, 368, 369, 370], "weight": [157, 158, 159, 219, 220, 221, 222, 223, 224, 226, 227, 228, 239, 367, 368, 369, 426, 427, 428, 429, 430, 431, 433, 434, 435, 451], "move": [157, 158, 159, 220, 221, 223, 227, 367, 368, 369, 427, 428, 430, 434], "averag": [157, 213, 367, 420], "decai": [157, 158, 159, 367, 368, 369], "term": [157, 158, 159, 367, 368, 369], "mass": [157, 158, 159, 367, 368, 369], "gamma": [157, 158, 159, 367, 368, 369], "foral": [157, 158, 159, 367, 368, 369], "geq": [157, 158, 159, 367, 368, 369], "theta": [157, 158, 159, 367, 368, 369], "half": [157, 158, 159, 367, 368, 369], "life": [157, 158, 159, 367, 368, 369], "exp": [157, 158, 159, 367, 368, 369], "ln": [157, 158, 159, 367, 368, 369], "smooth": [157, 158, 159, 367, 368, 369], "factor": [157, 158, 159, 253, 367, 368, 369, 470], "leq": [157, 158, 159, 367, 368, 369], "divid": [157, 158, 159, 188, 367, 368, 369, 399, 602, 695], "begin": [157, 158, 159, 367, 368, 369, 640, 728], "account": [157, 158, 159, 367, 368, 369, 595, 688], "imbal": [157, 158, 159, 367, 368, 369], "rel": [157, 158, 159, 367, 368, 369, 565, 595, 688, 786, 787], "ew": [157, 158, 159, 367, 368, 369], "w_i": [157, 158, 159, 367, 368, 369], "recurs": [157, 158, 159, 367, 368, 369], "y_0": [157, 158, 159, 367, 368, 369], "x_0": [157, 158, 159, 367, 368, 369], "y_t": [157, 158, 159, 367, 368, 369], "y_": [157, 158, 159, 367, 368, 369], "x_t": [157, 158, 159, 367, 368, 369], "observ": [157, 158, 159, 367, 368, 369], "428571": 157, "bia": [158, 159, 188, 225, 239, 368, 369, 399, 432, 451], "correct": [158, 159, 188, 225, 239, 288, 368, 369, 399, 432, 451, 765], "unbias": [158, 159, 368, 369], "963624": [158, 368], "928571": [159, 369], "wildcard": [160, 479, 487, 494, 539, 541, 800], "regex": [160, 487, 539, 635, 636, 639, 640, 641, 646, 647, 654, 723, 724, 727, 728, 729, 734, 735, 742], "aa": [160, 539], "ba": [160, 539], "cc": [160, 539], "718282": 161, "389056": 161, "54": 161, "59815": 161, "expand": [162, 168, 216, 371], "extend": [163, 327, 372], "group_col": [166, 260], "g1": [166, 207, 260], "g2": [166, 207, 260], "lt": [166, 260], "gte": [166, 260], "explod": 168, "turn": [168, 258, 264, 272, 288, 295, 488, 763, 764, 774, 793], "hello": [168, 479, 709, 731], "world": [168, 709, 731], "r": [168, 636, 640, 641, 646, 724, 728, 729, 734], "word": 168, "down": [169, 377, 774, 776, 777, 778], "latest": [170, 631], "2461716855791224000": 171, "16174362112783765148": 171, "13569566217648818014": 171, "11638928888656214026": 171, "6351727772611549480": 171, "fmt": [173, 282, 542, 600, 656, 693, 744], "cumsum": [173, 282], "regrid": 174, "grid": 174, "df_original_grid": 174, "grid_point": 174, "df_new_grid": 174, "include_bound": 175, "primit": [175, 179, 468], "exclud": [175, 487, 781, 790, 791], "finit": [177, 387, 781], "optional_memb": [179, 390], "infinit": [180, 391], "_isnan": 181, "b_isnan": 181, "negat": 182, "_is_not_nan": 183, "b_is_not_nan": 183, "_not_nul": 184, "a_not_nul": 184, "b_not_nul": 184, "_isnul": 185, "a_isnul": 185, "b_isnul": 185, "root": [187, 197, 210, 243, 246, 454, 632], "With": [187, 765], "fisher": [188, 239, 399, 451], "pearson": [188, 239, 399, 451, 760], "dataset": [188, 399, 763, 764, 774, 775, 802], "fourth": [188, 399], "central": [188, 239, 399, 451], "squar": [188, 243, 399, 454, 555], "definit": [188, 399], "subtract": [188, 399], "distribut": [188, 239, 399, 451], "elimin": [188, 399], "come": [188, 399, 797, 803, 804], "bias": [188, 239, 399, 451], "scipi": [188, 239, 399, 451], "stat": [188, 239, 399, 451, 802], "153061": 188, "logarithm": [193, 194, 402, 403], "584963": 193, "30103": 194, "60206": 194, "lowest": 195, "9223372036854775808": 195, "agg_list": 196, "elementwis": [196, 219, 220, 221, 222, 223, 224, 226, 227, 228, 426, 427, 428, 429, 430, 431, 433, 434, 435, 479, 480], "third": 196, "parti": 196, "librari": [196, 527, 534, 807], "book": 196, "to_numpi": 196, "argmax": 196, "_revers": [197, 218, 246], "b_revers": [197, 218, 246], "most": [202, 208, 258, 408, 415, 474, 543, 631, 653, 741], "occur": [202, 213, 264, 272, 295, 304, 408, 420, 488], "poison": [204, 205, 412, 413], "encount": [204, 205, 412, 413, 527, 642, 730, 781], "nanmax": [204, 205, 412, 413], "wherea": [204, 205, 281, 287, 412, 413], "subgroup": 207, "postgr": [207, 772], "max_by_group": 207, "percentag": [208, 415, 788, 790, 791], "recent": [208, 415], "least": [208, 258, 415, 474, 532, 790], "previou": [208, 415], "percent": [208, 415], "090909": 208, "expon": 209, "power": 209, "27": [209, 567, 597, 606], "64": [209, 415, 505, 508, 517], "reverse_": 210, "reverse_a": 210, "reverse_fruit": 210, "reverse_b": 210, "reverse_car": 210, "rankmethod": [213, 420], "ti": [213, 420], "appropri": [213, 420], "dens": [213, 420], "ordin": [213, 420, 596, 689], "avail": [213, 272, 420, 552, 789, 797, 800, 803, 804, 805], "competit": [213, 420], "highest": [213, 257, 420, 781], "immedi": [213, 420, 783], "correspond": [213, 420, 585, 674], "repeat": [214, 216, 766, 776], "sign": [215, 422, 506, 507, 508, 509, 595, 659, 688, 747], "bit": [215, 422, 504, 505, 506, 507, 508, 509, 515, 516, 517, 518, 635, 723], "unsign": [215, 422, 515, 516, 517, 518], "64bit": [215, 422], "safe": [215, 422, 468], "coerc": 216, "coercion": [216, 264, 272, 295, 304, 488], "op": [216, 791], "dim": [217, 424], "flat": [217, 424], "fruits_revers": [218, 246], "cars_revers": [218, 246], "window_s": [219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435], "rolling_min": [219, 426], "rolling_max": [219, 426], "rolling_mean": [219, 426], "rolling_sum": [219, 426], "multipli": [219, 220, 221, 222, 223, 224, 226, 227, 228, 426, 427, 428, 429, 430, 431, 433, 434, 435], "358899": 219, "041452": 219, "567764": 219, "travers": [220, 221, 223, 226, 227, 228, 427, 428, 430, 433, 434, 435], "vector": [220, 221, 223, 226, 227, 228, 427, 428, 430, 433, 434, 435], "fix": [220, 221, 222, 223, 224, 226, 227, 228, 605, 698, 765, 789, 790], "5h": [220, 221, 222, 223, 224, 226, 227, 228], "groupby_rol": [220, 221, 222, 223, 224, 226, 227, 228, 279], "cach": [220, 221, 222, 223, 224, 226, 227, 228, 264, 272, 295, 304, 478, 488, 766, 774, 776, 778, 793], "quantil": [224, 431], "33": [224, 229, 431, 487], "skew": [225, 432], "527525": [226, 433], "333333": [228, 415, 435], "digit": [229, 436, 659, 724, 747], "17": [229, 351], "maintain": [231, 255, 438, 472], "downstream": [232, 442], "code": [232, 442], "incorrect": [232, 442, 605, 663, 698], "care": [232, 442], "content": [235, 258, 447], "modul": 235, "175201": [238, 450], "sampl": [239, 451, 555, 763, 764], "about": [239, 451], "unimod": [239, 451], "continu": [239, 451], "skewtest": [239, 451], "enough": [239, 451, 612, 705], "speak": [239, 451], "coeffici": [239, 451], "g_1": [239, 451], "m_3": [239, 451], "m_2": [239, 451], "m_i": [239, 451], "sum_": [239, 451], "texttt": [239, 451], "k_3": [239, 451], "k_2": [239, 451], "sqrt": [239, 451], "343622": 239, "whole": [241, 242, 640, 728, 765], "larg": [241, 242, 565], "larger": [241, 781], "414214": [243, 454], "exprstringnamespac": 245, "to_uppercas": 245, "taken": [249, 624, 650, 717, 738], "56": [251, 780], "761594": [252, 462], "replic": [253, 470], "vals_phys": 253, "largest": [254, 471], "smallest": [254, 471], "appear": [256, 473], "value_count": 256, "might": [256, 630, 763, 764, 774], "id": [256, 258, 473, 555, 646, 647], "9223372036854775807": 257, "multithread": 258, "off": [258, 264, 272, 288, 295, 488, 763, 764, 774, 793], "ldf": [261, 263, 268, 269, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 298, 299, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 662, 663, 664, 665], "hit": 261, "node": [261, 282, 288, 295], "type_coercion": [264, 266, 272, 295, 304, 488], "predicate_pushdown": [264, 266, 272, 288, 295, 304, 488], "projection_pushdown": [264, 266, 272, 288, 295, 304, 488], "simplify_express": [264, 266, 272, 295, 304, 488], "string_cach": [264, 272, 488], "no_optim": [264, 272, 288, 295, 488], "slice_pushdown": [264, 266, 272, 288, 295, 304, 488], "common_subplan_elimin": [264, 266, 272, 295, 304, 488], "allow_stream": [264, 266, 272, 295, 304, 488], "huge": 264, "saver": 264, "pushdown": [264, 272, 288, 295, 304, 317, 440, 441, 488], "simplifi": [264, 272, 295, 304, 488], "pleas": [264, 272], "global": [264, 272, 478, 790, 793], "try": [264, 272, 295, 304, 488, 536, 537, 763, 764, 765, 766, 770, 774, 776, 778], "branch": [264, 272, 295, 304, 488], "subplan": [264, 272, 295, 304, 488], "part": [264, 272, 295, 304, 316, 488, 543, 652, 653, 669, 672, 678, 680, 683, 685, 686, 691, 699, 740, 741], "lf": [270, 275, 300, 321], "n_row": [272, 762, 763, 764, 766, 770, 774, 776, 777, 778], "500": [272, 427, 428, 430, 678, 680, 686, 691], "purpos": 272, "scan": [272, 281, 287, 545, 548, 763, 764, 770, 774, 775, 776, 777, 778], "help": [272, 800], "final": [272, 778], "influenc": [272, 288], "read_json": [277, 318], "lazygroupbi": [278, 279, 280], "NOT": [278, 661], "typeerror": 278, "subscript": 278, "load": [281, 287, 772, 802], "validate_output_schema": 288, "past": 288, "paramount": 288, "hard": 288, "bug": [288, 663], "caller": [288, 663], "invari": 288, "upheld": 288, "prune": 288, "show_plot": 295, "truncate_nod": 295, "figsiz": [295, 304], "gantt": 295, "chart": 295, "matplotlib": [295, 304], "plot": [295, 304], "from_json": 297, "write_json": 297, "output_path": 304, "raw_output": 304, "figur": 304, "dot": 304, "290994": 307, "extern": 316, "access": 316, "block": [317, 440, 441], "pars": [319, 656, 744, 763, 764, 765, 774, 776, 777], "under": [321, 800, 805], "arraylik": 322, "nan_to_nul": 322, "dtype_if_empti": 322, "position": 322, "pattern": [322, 440, 441, 635, 636, 640, 641, 646, 647, 723, 724, 728, 729, 734, 735, 763, 764, 774, 776, 778], "scenario": 322, "through": [322, 772], "s3": [322, 775], "inner_dtyp": 322, "time_unit": [322, 502, 503, 523, 605, 698], "u": [322, 463, 502, 503, 523, 578, 582, 601, 605, 656, 667, 671, 694, 698, 773], "sr": 324, "new_aliased_sr": 324, "append_chunk": 327, "super": 327, "skip_nul": 328, "special": [328, 763, 764, 774], "141593": 329, "292432": 330, "549306": 334, "listnamespac": 341, "catnamespac": 343, "12345": [344, 377, 436], "56789": [344, 377, 436], "901234": [344, 377, 436], "concat": [345, 409, 490, 491], "math": [351, 449, 461], "pi": [351, 449, 461], "1232e": 351, "quick": 358, "mix": 358, "series_num": 358, "581139": 358, "series_str": 358, "datetimenamespac": 363, "005": 365, "06293300616044681": 365, "65": 365, "8568409950394724": 365, "4000000": 366, "814697265625": 366, "lit": [374, 494, 495, 541, 784, 795], "bitmask": 378, "swiftli": 378, "89438004737668041": 379, "14107061265552512458": 379, "15437026767517145468": 379, "datelik": 384, "sublist": [390, 607, 608, 610, 611, 613, 614, 615, 616, 617, 624, 627, 700, 701, 703, 704, 706, 707, 708, 709, 710, 717, 720], "timedelta": [404, 407, 412, 413, 486, 523, 580, 582, 583, 590, 592, 595, 596, 597, 598, 601, 602, 603, 604, 606, 675, 677, 682, 688, 695], "166667": 415, "142857": 415, "125": 415, "128": 415, "512": 415, "peak": [416, 417], "i8": 425, "nanstd": 426, "858612": 426, "200": [427, 428, 430], "400": [427, 428, 430], "150": 428, "250": 428, "350": 428, "450": 428, "381802": 432, "dev": 433, "57": 436, "frequent": [440, 441], "to_fram": [440, 441, 656, 660, 661, 740, 741, 744], "mutat": 441, "with_row_count": 441, "exactli": [446, 652, 653, 740, 741, 786, 787, 790, 791], "actual": [446, 765, 790, 791], "2246e": [449, 461], "syntact": [454, 495, 539, 540, 550, 761, 779, 784], "sugar": [454, 495, 539, 540, 550, 761, 779, 784], "delta": [455, 475, 503, 760, 781], "divisor": [455, 475], "stringnamespac": 456, "6331e16": 461, "lib": 464, "int64arrai": 464, "a_1": [465, 652, 740], "a_2": 465, "a_3": 465, "123": [466, 636, 641, 647, 724, 729, 735], "456": 466, "xyz": [466, 636, 641, 724, 729], "convers": [467, 468, 656, 744, 802], "zero_copy_onli": 468, "writabl": 468, "complet": [468, 553], "view": 468, "know": [468, 476], "presenc": 468, "immut": 468, "made": 468, "ignore_nul": 476, "seriesview": 476, "unless": [476, 544], "manag": 478, "categori": [478, 496, 577, 666, 793, 802], "invalid": [478, 637, 642, 725, 730, 763, 764, 774], "outermost": 478, "exit": 478, "color": [478, 555], "red": [478, 555], "green": [478, 555], "blue": 478, "yellow": 478, "succe": [478, 763, 764, 774], "df_join": 478, "thing": [479, 540, 774], "columnwis": [479, 480], "AND": 479, "bitwis": [479, 480], "OR": 480, "Be": 482, "eagerli": [483, 773], "oppos": 483, "lazili": [483, 763, 764, 774, 776, 777, 778], "to_seri": [483, 628], "argsort": 484, "hamburg": 487, "lazy_fram": 488, "threadpool": 488, "concatmethod": 489, "relev": 489, "lag": 490, "mimic": 490, "a_lag_": 490, "a_rol": 490, "dog": [491, 635, 657, 658, 723], "plai": 491, "swim": 491, "walk": 491, "full_sent": 491, "covari": 493, "intoexpr": [494, 541], "include_init": 494, "accumul": [494, 541], "fn": [494, 541], "new_valu": [494, 541], "across": [495, 784], "cumfold": 495, "bin": 496, "break_point_label": 496, "break_point": 496, "category_label": 496, "breakpoint": 496, "string_repr": [497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520], "tu": [502, 503, 578, 582, 601, 605, 667, 668, 671, 694, 698], "tz": [502, 579, 668], "time_zon": 502, "timezon": 502, "zoneinfo": 502, "available_timezon": 502, "wrap": 512, "arbitrari": [512, 790], "composit": 513, "static": [519, 663], "utf": 520, "polars_u64_idx": 521, "compon": [522, 524, 525, 598, 656, 691], "31": [522, 524, 580, 581, 592, 603, 656, 668, 669, 670, 744, 780], "granular": 523, "finer": 523, "permut": 523, "drang": 523, "1985": 523, "07": [523, 580, 596, 604, 656, 669, 697, 744], "59": [524, 590, 598, 683, 691], "999999": 524, "add_week": 525, "add_dai": 525, "add_second": 525, "add_millisecond": 525, "add_hour": 525, "add_millisec": 525, "ond": 525, "001": [525, 587, 589, 594, 679, 681, 687], "002": [525, 587, 589, 594, 679, 681, 687], "eval": 526, "rank": [526, 612, 705, 781], "concat_list": [526, 612, 705], "mathemat": 526, "a_b_doubl": 526, "panic": 534, "mismatch": 536, "incompat": 537, "fstring": 542, "placehold": 542, "hello_": 542, "_world": 542, "foo_": 542, "_bar_": 542, "foo_a_bar_1": 542, "foo_b_bar_2": 542, "foo_c_bar_3": 542, "closest": 543, "infer_schema_length": [545, 548, 763, 764, 765, 774, 777], "nan_to_non": 547, "datetimeindex": 547, "pd_df": 547, "pd_seri": 547, "agg_group": 550, "ideal": [552, 565], "read_csv_batch": [552, 803], "tpch": [552, 764], "tables_scale_100": [552, 764], "lineitem": [552, 764, 772], "tbl": [552, 764], "parse_d": [552, 763, 764, 774], "idiomat": 553, "_sum": 553, "_tail_sum": 553, "bar_sum": 553, "bar_tail_sum": 553, "sub": [555, 639, 654, 727, 742], "triangl": 555, "group_df": 555, "nr": [558, 568, 664, 665], "833333": 561, "pivot_column": 565, "values_column": 565, "pivotop": 565, "categoricalord": [577, 666], "lexic": [577, 666], "lose": [578, 667], "2001": [578, 580, 582, 583, 590, 592, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 656, 667, 669, 671, 672, 675, 676, 677, 678, 680, 682, 683, 685, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 744], "tu_m": [578, 667], "tu_n": [578, 667], "zone": [579, 668], "with_time_zon": [579, 668], "timestamp": [579, 668], "extract": [580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 603, 604, 606, 641, 642, 669, 670, 672, 673, 674, 678, 679, 680, 681, 683, 684, 685, 686, 687, 689, 690, 691, 692, 696, 697, 699, 729, 730], "stop": [580, 582, 583, 590, 592, 596, 597, 598, 601, 602, 603, 604, 606, 667, 668, 669, 671, 672, 678, 680, 683, 685, 686, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 762, 763, 764, 766, 770, 774, 776, 777, 778], "weekdai": [580, 596], "day_of_month": [580, 596, 604], "ordinal_dai": [580, 604], "day_of_year": [580, 596, 604], "diff": [581, 584, 587, 589, 591, 594, 599, 670, 673, 679, 681, 684, 687, 692], "days_diff": 581, "epochtimeunit": [582, 671], "sinc": [582, 671], "unix": [582, 671], "epoch_n": [582, 671], "epoch_": [582, 671], "978307200000000": [582, 601, 671, 694], "978307200": [582, 671], "978393600000000": [582, 601, 671, 694], "978393600": [582, 671], "978480000000000": [582, 601, 671, 694], "978480000": [582, 671], "hours_diff": 584, "iso": [585, 603, 674, 696], "microseconds_diff": 587, "1001": [587, 589, 594], "003": [587, 589, 594], "997": [587, 589, 594], "998": [587, 589, 594], "999": [587, 589, 594], "milliseconds_diff": 589, "minutes_diff": 591, "1440": [591, 684], "nanoseconds_diff": 594, "1000000": [594, 659, 687], "leap": [595, 688], "minu": [595, 688], "dictat": [595, 688], "2000": [595, 688], "2005": [595, 688], "date_plus_1i": [595, 688], "1y2mo": [595, 688], "date_min": 595, "1998": [595, 688], "2002": [595, 597, 606, 688, 699], "1999": [595, 688], "2003": [595, 688], "2004": [595, 688], "2006": [595, 688], "366": [596, 689], "180": [597, 606], "milli": [598, 691], "micro": [598, 691], "456789": 598, "654321": 598, "111110": 598, "765431": 598, "sec": 598, "11111": 598, "seconds_diff": 599, "timestamp_n": [601, 694], "timestamp_m": 601, "978307200000": 601, "978393600000": 601, "978480000000": 601, "bucket": [602, 695], "49": [602, 695], "series_equ": [602, 695], "53": [603, 696], "mondai": [604, 697], "sundai": [604, 697], "tu_u": [605, 698], "32971": [605, 698], "32974": [605, 698], "32976": [605, 698], "compil": [607, 608, 700, 701], "membership": [610, 703], "against": [612, 705, 806], "blindli": [612, 705], "worth": [612, 705], "n_field_strategi": 628, "tostructstrategi": 628, "first_non_nul": 628, "max_width": 628, "field_0": 628, "field_1": 628, "field_n": 628, "col_name_": 628, "col_name_0": 628, "col_name_1": 628, "col_name_2": 628, "computeerror": [630, 802], "undo": 633, "keep_nam": 633, "substr": [635, 639, 646, 647, 651, 652, 653, 654, 723, 727, 734, 735, 739, 740, 741, 742], "treat": [635, 646, 647, 723, 734, 735], "starts_with": [635, 639, 727], "ends_with": [635, 654, 742], "crab": [635, 723], "rab": [635, 723], "success": [636, 641, 724, 729], "overlap": [636, 641, 724, 729], "captur": [636, 640, 641, 724, 728, 729], "bla": [636, 641, 724, 729], "asd": [636, 641, 724, 729], "678": [636, 641, 724, 729], "910t": [636, 641, 724, 729], "count_digit": 636, "transferencod": [637, 638, 725, 726], "hex": [637, 638, 725, 726], "base64": [637, 638, 725, 726], "thrown": [637, 725], "unabl": [637, 725], "unhandl": [637, 725], "666f6f": [637, 638, 725, 726], "626172": [637, 638, 725, 726], "mango": [639, 654, 727, 742], "go": [639, 727], "has_suffix": 639, "group_index": [640, 728], "target": [640, 656, 728, 744], "http": [640, 728, 807], "vote": [640, 728], "ballon_dor": [640, 728], "candid": [640, 728], "messi": [640, 728], "ref": [640, 728], "candidat": [640, 728], "jorginho": [640, 728], "ronaldo": [640, 728], "w": [640, 728], "extracted_nr": 641, "910": [641, 729], "json_path": [642, 730], "jsonpath": [642, 730], "regardless": [642, 730], "document": [642, 656, 730, 744, 765, 772], "here": [642, 730, 772, 789, 790, 791], "json_val": [642, 730], "bear": 643, "110": 643, "fillchar": [644, 648, 732, 736], "justifi": [644, 648, 732, 736], "pad": [644, 648, 659, 732, 736, 747], "cow": [644, 648, 732, 736], "monkei": [644, 648, 732, 736], "hippopotamu": [644, 648, 732, 736], "whitespac": [645, 649, 655, 733, 737, 743], "trail": [645, 649, 655, 737, 743], "replace_al": [646, 734], "text": [646, 647], "123abc": [646, 734], "abc456": [646, 734], "abc": [646, 734], "abcabc": [647, 735], "123a123": [647, 735], "bc": [647, 735], "trim": [649, 655, 733, 737, 743], "subslic": [650, 738], "pear": [650, 738], "papaya": [650, 738], "dragonfruit": [650, 738], "s_slice": 650, "ear": [650, 738], "aya": [650, 738], "uit": [650, 738], "ya": [650, 738], "onf": [650, 738], "inclus": [651, 652, 739, 740], "d_4": [652, 740], "_": [652, 740], "rename_field": [652, 653, 740, 741], "first_part": [652, 653, 740, 741], "second_part": [652, 653, 740, 741], "unnest": [652, 653, 740, 741], "remaind": [653, 741], "prefix": [654, 659, 742, 747], "app": [654, 742], "has_prefix": 654, "strftime": [656, 744], "anywher": [656, 744], "eg": 656, "3f": 656, "sun": [656, 744], "jul": [656, 744, 780], "34": [656, 744], "lowercas": [657, 745], "variant": [657, 658], "uppercas": [658, 746], "10000": 659, "100000": 659, "0010": 659, "0001": 659, "00000": 659, "00001": 659, "to_struct": [660, 661], "my_struct": [660, 661, 783], "anymor": 661, "panicexcept": [661, 802], "describ": [662, 790], "scan_csv": [662, 763, 764], "n_uniqu": 662, "unique_nam": 662, "known": [663, 790], "epoch": 668, "1583020800": 668, "1585699200": 668, "1588291200": 668, "europ": 668, "london": 668, "gmt": 668, "bst": 668, "america": 668, "new_york": 668, "nyc": 668, "29": 668, "est": 668, "edt": 668, "1583002800": 668, "1585681200": 668, "1588273200": 668, "500m": [678, 680, 686, 691], "500000": 678, "2m": 683, "500000000": 686, "date_minus_1y_2mon": 688, "timestamp_u": 694, "978307200000000000": 694, "978393600000000000": 694, "978480000000000000": 694, "export": 752, "allow_object": 753, "unknown": 753, "valueexcept": 753, "correl": [760, 781], "new_column": [763, 764, 765], "comment_char": [763, 764, 774], "quote_char": [763, 764, 774], "skip_row": [763, 764, 774], "ignore_error": [763, 764, 774], "n_thread": [763, 764], "8192": 763, "csvencod": [763, 764, 774], "low_memori": [763, 764, 770, 774, 777, 778], "storage_opt": [763, 766, 770, 776, 778], "skip_rows_after_head": [763, 764, 774], "row_count_nam": [763, 764, 766, 770, 774, 776, 777, 778], "row_count_offset": [763, 764, 766, 770, 774, 776, 777, 778], "sample_s": [763, 764], "eol_char": [763, 764, 774], "handler": [763, 764, 765], "builtin": [763, 764, 765], "open": [763, 764, 765, 766, 770, 776, 778], "stringio": [763, 764], "fsspec": [763, 764, 766, 770, 776, 778, 780], "remot": [763, 764, 766, 770], "autogener": [763, 764, 774], "column_x": [763, 764, 774], "enumer": [763, 764, 774], "shorter": [763, 764], "comment": [763, 764, 774], "escap": [763, 764, 774], "cpu": [763, 764], "system": [763, 764], "multi": [763, 764], "lossi": [763, 764, 774], "decod": [763, 764], "im": [763, 764], "parser": 763, "even": 763, "regard": [763, 781], "storag": [763, 766, 770, 776, 778], "connect": [763, 766, 770, 772, 775, 776, 778, 803], "host": [763, 766, 770, 776, 778], "port": [763, 766, 770, 772, 776, 778], "usernam": [763, 766, 770, 772, 776, 778], "password": [763, 766, 770, 772, 776, 778], "row_count": [763, 764, 766, 770, 774, 776, 777, 778], "glob": [763, 764, 774, 776, 778], "50000": 764, "batchedcsvread": [764, 802], "batch": [764, 777], "upon": 764, "creation": 764, "gather": 764, "next_batch": 764, "sheet_id": 765, "sheet_nam": 765, "xlsx2csv_option": 765, "read_csv_opt": 765, "excel": [765, 802], "xlsx": 765, "sheet": 765, "xlsx2csv": [765, 780], "read_csv": [765, 774], "skip_empty_lin": 765, "my": [765, 775], "datasheet": 765, "excel_fil": 765, "As": [765, 773], "look": 765, "twice": 765, "xl": 765, "xlsm": 765, "xlsb": 765, "odf": 765, "od": 765, "odt": 765, "from_panda": [765, 772], "memory_map": [766, 770, 776], "v2": [766, 776], "greatli": [766, 776], "read_ndjson": 768, "parallelstrategi": [770, 778], "directori": 770, "awar": 770, "stabl": 770, "row_group": [770, 778], "read_tabl": 770, "connection_uri": 772, "partition_on": 772, "partition_rang": 772, "partition_num": 772, "protocol": 772, "mysql": 772, "sqlite": 772, "redshift": 772, "clickhous": 772, "databas": 772, "altern": 772, "solut": 772, "raw": 772, "connectorx": [772, 780], "uri": 772, "postgresql": 772, "server": 772, "backend": 772, "transfer": 772, "partition_col": 772, "explicitli": [772, 789, 790], "mode": 773, "polarsdatatyp": 774, "with_column_nam": 774, "push": [774, 776, 777, 778], "therebi": [774, 776, 777, 778], "potenti": [774, 776, 777, 778], "overhead": [774, 776, 777, 778], "updat": 774, "my_long_fil": 774, "breezah": 774, "terribl": 774, "mydf": 774, "write_csv": 774, "cloud": 775, "dset": 775, "folder": 775, "1970": 775, "version": 780, "stdout": 780, "info": 780, "platform": 780, "linux": 780, "microsoft": 780, "wsl2": 780, "x86_64": 780, "glibc2": 780, "main": 780, "gcc": 780, "20210110": 780, "propagate_nan": 781, "spearman": 781, "sever": 783, "a_and_b": 783, "get_column": 784, "check_dtyp": [786, 787], "check_exact": [786, 787], "check_column_nam": 786, "rtol": [786, 787], "1e": [786, 787], "atol": [786, 787], "nans_compare_equ": [786, 787], "assertionerror": [786, 787], "inexact": [786, 787], "check_nam": 787, "searchstrategi": [788, 790, 791], "null_prob": [788, 790, 791], "chanc": [788, 790, 791], "hypothesi": [788, 789, 790, 791, 807], "sampled_from": 788, "unique_small_int": 788, "ccy": 788, "gbp": 788, "jpy": 788, "min_col": [789, 790], "max_col": [789, 790], "suitabl": 789, "standalon": [789, 790], "itself": 789, "explicit": 789, "mincol": 789, "control": 789, "especi": 789, "punctuat": 789, "test_special_char_colname_init": 789, "test_unique_xyz": 789, "assert_someth": 789, "min_siz": [790, 791], "max_siz": [790, 791], "include_col": 790, "allow_infin": [790, 791], "allowed_dtyp": [790, 791], "excluded_dtyp": [790, 791], "desir": 790, "n_chunk": [790, 791], "randomis": 790, "onto": 790, "exist": 790, "independ": [790, 791], "basi": 790, "pct": 790, "preced": 790, "disallow": [790, 791], "deploi": [790, 791], "decor": [790, 791], "characterist": [790, 791], "develop": [790, 791], "concret": [790, 791], "test_repr": [790, 791], "repr": [790, 791], "df_strategi": 790, "15836": 790, "1755e": 790, "38": 790, "575050513": 790, "constructor": [791, 802], "max_data_s": 791, "54666": 791, "35": 791, "6414": 791, "63290": 791, "pool": 792, "isn": 795, "thens": 795, "chain": 795, "favor": 797, "These": 800, "sometim": 800, "polar": [800, 802, 804, 806, 807], "overview": 802, "public": 802, "expos": 802, "descript": 802, "manipul": 802, "timeseri": 802, "unset": 802, "arrowerror": 802, "duplicateerror": 802, "invalidoperationerror": 802, "nodataerror": 802, "notfounderror": 802, "schemaerror": 802, "shapeerror": 802, "show_vers": 802, "sqlcontext": [802, 806], "readthedoc": 807}, "objects": {"polars.Config": [[1, 0, 1, "", "load"], [2, 0, 1, "", "restore_defaults"], [3, 0, 1, "", "save"], [4, 0, 1, "", "set_ascii_tables"], [5, 0, 1, "", "set_fmt_str_lengths"], [6, 0, 1, "", "set_tbl_cell_alignment"], [7, 0, 1, "", "set_tbl_change_column_data_type_position_format"], [8, 0, 1, "", "set_tbl_cols"], [9, 0, 1, "", "set_tbl_dataframe_shape_below"], [10, 0, 1, "", "set_tbl_formatting"], [11, 0, 1, "", "set_tbl_hide_column_data_types"], [12, 0, 1, "", "set_tbl_hide_column_names"], [13, 0, 1, "", "set_tbl_hide_column_separator"], [14, 0, 1, "", "set_tbl_hide_dataframe_shape"], [15, 0, 1, "", "set_tbl_rows"], [16, 0, 1, "", "set_tbl_width_chars"], [17, 0, 1, "", "set_utf8_tables"], [18, 0, 1, "", "set_verbose"], [19, 0, 1, "", "state"]], "polars": [[20, 1, 1, "", "DataFrame"], [115, 1, 1, "", "Expr"], [804, 1, 1, "", "LazyFrame"], [806, 1, 1, "", "SQLContext"], [322, 1, 1, "", "Series"], [478, 1, 1, "", "StringCache"], [479, 3, 1, "", "all"], [480, 3, 1, "", "any"], [481, 3, 1, "", "apply"], [482, 3, 1, "", "arange"], [483, 3, 1, "", "arg_where"], [484, 3, 1, "", "argsort_by"], [485, 3, 1, "", "avg"], [486, 3, 1, "", "coalesce"], [487, 3, 1, "", "col"], [488, 3, 1, "", "collect_all"], [489, 3, 1, "", "concat"], [490, 3, 1, "", "concat_list"], [491, 3, 1, "", "concat_str"], [492, 3, 1, "", "count"], [493, 3, 1, "", "cov"], [494, 3, 1, "", "cumfold"], [495, 3, 1, "", "cumsum"], [496, 3, 1, "", "cut"], [522, 3, 1, "", "date"], [523, 3, 1, "", "date_range"], [524, 3, 1, "", "datetime"], [525, 3, 1, "", "duration"], [526, 3, 1, "", "element"], [539, 3, 1, "", "exclude"], [540, 3, 1, "", "first"], [541, 3, 1, "", "fold"], [542, 3, 1, "", "format"], [543, 3, 1, "", "from_arrow"], [544, 3, 1, "", "from_dict"], [545, 3, 1, "", "from_dicts"], [546, 3, 1, "", "from_numpy"], [547, 3, 1, "", "from_pandas"], [548, 3, 1, "", "from_records"], [549, 3, 1, "", "get_dummies"], [550, 3, 1, "", "groups"], [551, 3, 1, "", "head"], [752, 3, 1, "", "list"], [753, 3, 1, "", "lit"], [754, 3, 1, "", "map"], [755, 3, 1, "", "max"], [756, 3, 1, "", "mean"], [757, 3, 1, "", "median"], [758, 3, 1, "", "min"], [759, 3, 1, "", "n_unique"], [760, 3, 1, "", "pearson_corr"], [761, 3, 1, "", "quantile"], [762, 3, 1, "", "read_avro"], [763, 3, 1, "", "read_csv"], [764, 3, 1, "", "read_csv_batched"], [765, 3, 1, "", "read_excel"], [766, 3, 1, "", "read_ipc"], [767, 3, 1, "", "read_ipc_schema"], [768, 3, 1, "", "read_json"], [769, 3, 1, "", "read_ndjson"], [770, 3, 1, "", "read_parquet"], [771, 3, 1, "", "read_parquet_schema"], [772, 3, 1, "", "read_sql"], [773, 3, 1, "", "repeat"], [774, 3, 1, "", "scan_csv"], [775, 3, 1, "", "scan_ds"], [776, 3, 1, "", "scan_ipc"], [777, 3, 1, "", "scan_ndjson"], [778, 3, 1, "", "scan_parquet"], [779, 3, 1, "", "select"], [780, 3, 1, "", "show_versions"], [781, 3, 1, "", "spearman_rank_corr"], [782, 3, 1, "", "std"], [783, 3, 1, "", "struct"], [784, 3, 1, "", "sum"], [785, 3, 1, "", "tail"], [792, 3, 1, "", "threadpool_size"], [793, 3, 1, "", "toggle_string_cache"], [794, 3, 1, "", "var"], [795, 3, 1, "", "when"]], "polars.DataFrame": [[20, 0, 1, "", "__init__"], [21, 0, 1, "", "apply"], [22, 0, 1, "", "cleared"], [23, 0, 1, "", "clone"], [24, 2, 1, "", "columns"], [25, 0, 1, "", "describe"], [26, 0, 1, "", "drop"], [27, 0, 1, "", "drop_in_place"], [28, 0, 1, "", "drop_nulls"], [29, 2, 1, "", "dtypes"], [30, 0, 1, "", "estimated_size"], [31, 0, 1, "", "explode"], [32, 0, 1, "", "extend"], [33, 0, 1, "", "fill_nan"], [34, 0, 1, "", "fill_null"], [35, 0, 1, "", "filter"], [36, 0, 1, "", "find_idx_by_name"], [37, 0, 1, "", "fold"], [38, 0, 1, "", "frame_equal"], [39, 0, 1, "", "get_column"], [40, 0, 1, "", "get_columns"], [41, 0, 1, "", "groupby"], [42, 0, 1, "", "groupby_dynamic"], [43, 0, 1, "", "groupby_rolling"], [44, 0, 1, "", "hash_rows"], [45, 0, 1, "", "head"], [46, 2, 1, "", "height"], [47, 0, 1, "", "hstack"], [48, 0, 1, "", "insert_at_idx"], [49, 0, 1, "", "interpolate"], [50, 0, 1, "", "is_duplicated"], [51, 0, 1, "", "is_empty"], [52, 0, 1, "", "is_unique"], [53, 0, 1, "", "join"], [54, 0, 1, "", "join_asof"], [55, 0, 1, "", "lazy"], [56, 0, 1, "", "limit"], [57, 0, 1, "", "max"], [58, 0, 1, "", "mean"], [59, 0, 1, "", "median"], [60, 0, 1, "", "melt"], [61, 0, 1, "", "min"], [62, 0, 1, "", "n_chunks"], [63, 0, 1, "", "n_unique"], [64, 0, 1, "", "null_count"], [65, 0, 1, "", "partition_by"], [66, 0, 1, "", "pipe"], [67, 0, 1, "", "pivot"], [68, 0, 1, "", "product"], [69, 0, 1, "", "quantile"], [70, 0, 1, "", "rechunk"], [71, 0, 1, "", "rename"], [72, 0, 1, "", "replace"], [73, 0, 1, "", "replace_at_idx"], [74, 0, 1, "", "reverse"], [75, 0, 1, "", "row"], [76, 0, 1, "", "rows"], [77, 0, 1, "", "sample"], [78, 2, 1, "", "schema"], [79, 0, 1, "", "select"], [80, 2, 1, "", "shape"], [81, 0, 1, "", "shift"], [82, 0, 1, "", "shift_and_fill"], [83, 0, 1, "", "shrink_to_fit"], [84, 0, 1, "", "slice"], [85, 0, 1, "", "sort"], [86, 0, 1, "", "std"], [87, 0, 1, "", "sum"], [88, 0, 1, "", "tail"], [89, 0, 1, "", "take_every"], [90, 0, 1, "", "to_arrow"], [91, 0, 1, "", "to_dict"], [92, 0, 1, "", "to_dicts"], [93, 0, 1, "", "to_dummies"], [94, 0, 1, "", "to_numpy"], [95, 0, 1, "", "to_pandas"], [96, 0, 1, "", "to_series"], [97, 0, 1, "", "to_struct"], [98, 0, 1, "", "transpose"], [99, 0, 1, "", "unique"], [100, 0, 1, "", "unnest"], [101, 0, 1, "", "unstack"], [102, 0, 1, "", "upsample"], [103, 0, 1, "", "var"], [104, 0, 1, "", "vstack"], [105, 2, 1, "", "width"], [106, 0, 1, "", "with_column"], [107, 0, 1, "", "with_columns"], [108, 0, 1, "", "with_row_count"], [109, 0, 1, "", "write_avro"], [110, 0, 1, "", "write_csv"], [111, 0, 1, "", "write_ipc"], [112, 0, 1, "", "write_json"], [113, 0, 1, "", "write_ndjson"], [114, 0, 1, "", "write_parquet"]], "polars.Expr": [[115, 0, 1, "", "__init__"], [116, 0, 1, "", "abs"], [117, 0, 1, "", "agg_groups"], [118, 0, 1, "", "alias"], [119, 0, 1, "", "all"], [120, 0, 1, "", "any"], [121, 0, 1, "", "append"], [122, 0, 1, "", "apply"], [123, 0, 1, "", "arccos"], [124, 0, 1, "", "arccosh"], [125, 0, 1, "", "arcsin"], [126, 0, 1, "", "arcsinh"], [127, 0, 1, "", "arctan"], [128, 0, 1, "", "arctanh"], [129, 0, 1, "", "arg_max"], [130, 0, 1, "", "arg_min"], [131, 0, 1, "", "arg_sort"], [132, 0, 1, "", "arg_unique"], [133, 0, 1, "", "argsort"], [134, 2, 1, "", "arr"], [135, 0, 1, "", "backward_fill"], [136, 0, 1, "", "cast"], [137, 2, 1, "", "cat"], [138, 0, 1, "", "ceil"], [139, 0, 1, "", "clip"], [140, 0, 1, "", "clip_max"], [141, 0, 1, "", "clip_min"], [142, 0, 1, "", "cos"], [143, 0, 1, "", "cosh"], [144, 0, 1, "", "count"], [145, 0, 1, "", "cumcount"], [146, 0, 1, "", "cummax"], [147, 0, 1, "", "cummin"], [148, 0, 1, "", "cumprod"], [149, 0, 1, "", "cumsum"], [150, 0, 1, "", "cumulative_eval"], [151, 0, 1, "", "diff"], [152, 0, 1, "", "dot"], [153, 0, 1, "", "drop_nans"], [154, 0, 1, "", "drop_nulls"], [155, 2, 1, "", "dt"], [156, 0, 1, "", "entropy"], [157, 0, 1, "", "ewm_mean"], [158, 0, 1, "", "ewm_std"], [159, 0, 1, "", "ewm_var"], [160, 0, 1, "", "exclude"], [161, 0, 1, "", "exp"], [162, 0, 1, "", "explode"], [163, 0, 1, "", "extend_constant"], [164, 0, 1, "", "fill_nan"], [165, 0, 1, "", "fill_null"], [166, 0, 1, "", "filter"], [167, 0, 1, "", "first"], [168, 0, 1, "", "flatten"], [169, 0, 1, "", "floor"], [170, 0, 1, "", "forward_fill"], [171, 0, 1, "", "hash"], [172, 0, 1, "", "head"], [173, 0, 1, "", "inspect"], [174, 0, 1, "", "interpolate"], [175, 0, 1, "", "is_between"], [176, 0, 1, "", "is_duplicated"], [177, 0, 1, "", "is_finite"], [178, 0, 1, "", "is_first"], [179, 0, 1, "", "is_in"], [180, 0, 1, "", "is_infinite"], [181, 0, 1, "", "is_nan"], [182, 0, 1, "", "is_not"], [183, 0, 1, "", "is_not_nan"], [184, 0, 1, "", "is_not_null"], [185, 0, 1, "", "is_null"], [186, 0, 1, "", "is_unique"], [187, 0, 1, "", "keep_name"], [188, 0, 1, "", "kurtosis"], [189, 0, 1, "", "last"], [190, 0, 1, "", "len"], [191, 0, 1, "", "limit"], [192, 0, 1, "", "list"], [193, 0, 1, "", "log"], [194, 0, 1, "", "log10"], [195, 0, 1, "", "lower_bound"], [196, 0, 1, "", "map"], [197, 0, 1, "", "map_alias"], [198, 0, 1, "", "max"], [199, 0, 1, "", "mean"], [200, 0, 1, "", "median"], [201, 0, 1, "", "min"], [202, 0, 1, "", "mode"], [203, 0, 1, "", "n_unique"], [204, 0, 1, "", "nan_max"], [205, 0, 1, "", "nan_min"], [206, 0, 1, "", "null_count"], [207, 0, 1, "", "over"], [208, 0, 1, "", "pct_change"], [209, 0, 1, "", "pow"], [210, 0, 1, "", "prefix"], [211, 0, 1, "", "product"], [212, 0, 1, "", "quantile"], [213, 0, 1, "", "rank"], [214, 0, 1, "", "rechunk"], [215, 0, 1, "", "reinterpret"], [216, 0, 1, "", "repeat_by"], [217, 0, 1, "", "reshape"], [218, 0, 1, "", "reverse"], [219, 0, 1, "", "rolling_apply"], [220, 0, 1, "", "rolling_max"], [221, 0, 1, "", "rolling_mean"], [222, 0, 1, "", "rolling_median"], [223, 0, 1, "", "rolling_min"], [224, 0, 1, "", "rolling_quantile"], [225, 0, 1, "", "rolling_skew"], [226, 0, 1, "", "rolling_std"], [227, 0, 1, "", "rolling_sum"], [228, 0, 1, "", "rolling_var"], [229, 0, 1, "", "round"], [230, 0, 1, "", "sample"], [231, 0, 1, "", "search_sorted"], [232, 0, 1, "", "set_sorted"], [233, 0, 1, "", "shift"], [234, 0, 1, "", "shift_and_fill"], [235, 0, 1, "", "shuffle"], [236, 0, 1, "", "sign"], [237, 0, 1, "", "sin"], [238, 0, 1, "", "sinh"], [239, 0, 1, "", "skew"], [240, 0, 1, "", "slice"], [241, 0, 1, "", "sort"], [242, 0, 1, "", "sort_by"], [243, 0, 1, "", "sqrt"], [244, 0, 1, "", "std"], [245, 2, 1, "", "str"], [246, 0, 1, "", "suffix"], [247, 0, 1, "", "sum"], [248, 0, 1, "", "tail"], [249, 0, 1, "", "take"], [250, 0, 1, "", "take_every"], [251, 0, 1, "", "tan"], [252, 0, 1, "", "tanh"], [253, 0, 1, "", "to_physical"], [254, 0, 1, "", "top_k"], [255, 0, 1, "", "unique"], [256, 0, 1, "", "unique_counts"], [257, 0, 1, "", "upper_bound"], [258, 0, 1, "", "value_counts"], [259, 0, 1, "", "var"], [260, 0, 1, "", "where"]], "polars.LazyFrame": [[261, 0, 1, "", "cache"], [262, 0, 1, "", "cleared"], [263, 0, 1, "", "clone"], [264, 0, 1, "", "collect"], [265, 2, 1, "", "columns"], [266, 0, 1, "", "describe_optimized_plan"], [267, 0, 1, "", "describe_plan"], [268, 0, 1, "", "drop"], [269, 0, 1, "", "drop_nulls"], [270, 2, 1, "", "dtypes"], [271, 0, 1, "", "explode"], [272, 0, 1, "", "fetch"], [273, 0, 1, "", "fill_nan"], [274, 0, 1, "", "fill_null"], [275, 0, 1, "", "filter"], [276, 0, 1, "", "first"], [277, 0, 1, "", "from_json"], [278, 0, 1, "", "groupby"], [279, 0, 1, "", "groupby_dynamic"], [280, 0, 1, "", "groupby_rolling"], [281, 0, 1, "", "head"], [282, 0, 1, "", "inspect"], [283, 0, 1, "", "interpolate"], [284, 0, 1, "", "join"], [285, 0, 1, "", "join_asof"], [286, 0, 1, "", "last"], [287, 0, 1, "", "limit"], [288, 0, 1, "", "map"], [289, 0, 1, "", "max"], [290, 0, 1, "", "mean"], [291, 0, 1, "", "median"], [292, 0, 1, "", "melt"], [293, 0, 1, "", "min"], [294, 0, 1, "", "pipe"], [295, 0, 1, "", "profile"], [296, 0, 1, "", "quantile"], [297, 0, 1, "", "read_json"], [298, 0, 1, "", "rename"], [299, 0, 1, "", "reverse"], [300, 2, 1, "", "schema"], [301, 0, 1, "", "select"], [302, 0, 1, "", "shift"], [303, 0, 1, "", "shift_and_fill"], [304, 0, 1, "", "show_graph"], [305, 0, 1, "", "slice"], [306, 0, 1, "", "sort"], [307, 0, 1, "", "std"], [308, 0, 1, "", "sum"], [309, 0, 1, "", "tail"], [310, 0, 1, "", "take_every"], [311, 0, 1, "", "unique"], [312, 0, 1, "", "unnest"], [313, 0, 1, "", "var"], [314, 0, 1, "", "with_column"], [315, 0, 1, "", "with_columns"], [316, 0, 1, "", "with_context"], [317, 0, 1, "", "with_row_count"], [318, 0, 1, "", "write_json"]], "polars.SQLContext": [[319, 0, 1, "", "execute"], [320, 0, 1, "", "query"], [321, 0, 1, "", "register"]], "polars.Series": [[322, 0, 1, "", "__init__"], [323, 0, 1, "", "abs"], [324, 0, 1, "", "alias"], [325, 0, 1, "", "all"], [326, 0, 1, "", "any"], [327, 0, 1, "", "append"], [328, 0, 1, "", "apply"], [329, 0, 1, "", "arccos"], [330, 0, 1, "", "arccosh"], [331, 0, 1, "", "arcsin"], [332, 0, 1, "", "arcsinh"], [333, 0, 1, "", "arctan"], [334, 0, 1, "", "arctanh"], [335, 0, 1, "", "arg_max"], [336, 0, 1, "", "arg_min"], [337, 0, 1, "", "arg_sort"], [338, 0, 1, "", "arg_true"], [339, 0, 1, "", "arg_unique"], [340, 0, 1, "", "argsort"], [341, 2, 1, "", "arr"], [342, 0, 1, "", "cast"], [343, 2, 1, "", "cat"], [344, 0, 1, "", "ceil"], [345, 0, 1, "", "chunk_lengths"], [346, 0, 1, "", "cleared"], [347, 0, 1, "", "clip"], [348, 0, 1, "", "clip_max"], [349, 0, 1, "", "clip_min"], [350, 0, 1, "", "clone"], [351, 0, 1, "", "cos"], [352, 0, 1, "", "cosh"], [353, 0, 1, "", "cummax"], [354, 0, 1, "", "cummin"], [355, 0, 1, "", "cumprod"], [356, 0, 1, "", "cumsum"], [357, 0, 1, "", "cumulative_eval"], [358, 0, 1, "", "describe"], [359, 0, 1, "", "diff"], [360, 0, 1, "", "dot"], [361, 0, 1, "", "drop_nans"], [362, 0, 1, "", "drop_nulls"], [363, 2, 1, "", "dt"], [364, 2, 1, "", "dtype"], [365, 0, 1, "", "entropy"], [366, 0, 1, "", "estimated_size"], [367, 0, 1, "", "ewm_mean"], [368, 0, 1, "", "ewm_std"], [369, 0, 1, "", "ewm_var"], [370, 0, 1, "", "exp"], [371, 0, 1, "", "explode"], [372, 0, 1, "", "extend_constant"], [373, 0, 1, "", "fill_nan"], [374, 0, 1, "", "fill_null"], [375, 0, 1, "", "filter"], [376, 2, 1, "", "flags"], [377, 0, 1, "", "floor"], [378, 0, 1, "", "has_validity"], [379, 0, 1, "", "hash"], [380, 0, 1, "", "head"], [381, 2, 1, "", "inner_dtype"], [382, 0, 1, "", "interpolate"], [383, 0, 1, "", "is_boolean"], [384, 0, 1, "", "is_datelike"], [385, 0, 1, "", "is_duplicated"], [386, 0, 1, "", "is_empty"], [387, 0, 1, "", "is_finite"], [388, 0, 1, "", "is_first"], [389, 0, 1, "", "is_float"], [390, 0, 1, "", "is_in"], [391, 0, 1, "", "is_infinite"], [392, 0, 1, "", "is_nan"], [393, 0, 1, "", "is_not_nan"], [394, 0, 1, "", "is_not_null"], [395, 0, 1, "", "is_null"], [396, 0, 1, "", "is_numeric"], [397, 0, 1, "", "is_unique"], [398, 0, 1, "", "is_utf8"], [399, 0, 1, "", "kurtosis"], [400, 0, 1, "", "len"], [401, 0, 1, "", "limit"], [402, 0, 1, "", "log"], [403, 0, 1, "", "log10"], [404, 0, 1, "", "max"], [405, 0, 1, "", "mean"], [406, 0, 1, "", "median"], [407, 0, 1, "", "min"], [408, 0, 1, "", "mode"], [409, 0, 1, "", "n_chunks"], [410, 0, 1, "", "n_unique"], [411, 2, 1, "", "name"], [412, 0, 1, "", "nan_max"], [413, 0, 1, "", "nan_min"], [414, 0, 1, "", "null_count"], [415, 0, 1, "", "pct_change"], [416, 0, 1, "", "peak_max"], [417, 0, 1, "", "peak_min"], [418, 0, 1, "", "product"], [419, 0, 1, "", "quantile"], [420, 0, 1, "", "rank"], [421, 0, 1, "", "rechunk"], [422, 0, 1, "", "reinterpret"], [423, 0, 1, "", "rename"], [424, 0, 1, "", "reshape"], [425, 0, 1, "", "reverse"], [426, 0, 1, "", "rolling_apply"], [427, 0, 1, "", "rolling_max"], [428, 0, 1, "", "rolling_mean"], [429, 0, 1, "", "rolling_median"], [430, 0, 1, "", "rolling_min"], [431, 0, 1, "", "rolling_quantile"], [432, 0, 1, "", "rolling_skew"], [433, 0, 1, "", "rolling_std"], [434, 0, 1, "", "rolling_sum"], [435, 0, 1, "", "rolling_var"], [436, 0, 1, "", "round"], [437, 0, 1, "", "sample"], [438, 0, 1, "", "search_sorted"], [439, 0, 1, "", "series_equal"], [440, 0, 1, "", "set"], [441, 0, 1, "", "set_at_idx"], [442, 0, 1, "", "set_sorted"], [443, 2, 1, "", "shape"], [444, 0, 1, "", "shift"], [445, 0, 1, "", "shift_and_fill"], [446, 0, 1, "", "shrink_to_fit"], [447, 0, 1, "", "shuffle"], [448, 0, 1, "", "sign"], [449, 0, 1, "", "sin"], [450, 0, 1, "", "sinh"], [451, 0, 1, "", "skew"], [452, 0, 1, "", "slice"], [453, 0, 1, "", "sort"], [454, 0, 1, "", "sqrt"], [455, 0, 1, "", "std"], [456, 2, 1, "", "str"], [457, 0, 1, "", "sum"], [458, 0, 1, "", "tail"], [459, 0, 1, "", "take"], [460, 0, 1, "", "take_every"], [461, 0, 1, "", "tan"], [462, 0, 1, "", "tanh"], [463, 2, 1, "", "time_unit"], [464, 0, 1, "", "to_arrow"], [465, 0, 1, "", "to_dummies"], [466, 0, 1, "", "to_frame"], [467, 0, 1, "", "to_list"], [468, 0, 1, "", "to_numpy"], [469, 0, 1, "", "to_pandas"], [470, 0, 1, "", "to_physical"], [471, 0, 1, "", "top_k"], [472, 0, 1, "", "unique"], [473, 0, 1, "", "unique_counts"], [474, 0, 1, "", "value_counts"], [475, 0, 1, "", "var"], [476, 0, 1, "", "view"], [477, 0, 1, "", "zip_with"]], "polars.StringCache": [[478, 0, 1, "", "__init__"]], "polars.datatypes": [[497, 1, 1, "", "Binary"], [498, 1, 1, "", "Boolean"], [499, 1, 1, "", "Categorical"], [500, 1, 1, "", "DataType"], [501, 1, 1, "", "Date"], [502, 1, 1, "", "Datetime"], [503, 1, 1, "", "Duration"], [504, 1, 1, "", "Float32"], [505, 1, 1, "", "Float64"], [506, 1, 1, "", "Int16"], [507, 1, 1, "", "Int32"], [508, 1, 1, "", "Int64"], [509, 1, 1, "", "Int8"], [510, 1, 1, "", "List"], [511, 1, 1, "", "Null"], [512, 1, 1, "", "Object"], [513, 1, 1, "", "Struct"], [514, 1, 1, "", "Time"], [515, 1, 1, "", "UInt16"], [516, 1, 1, "", "UInt32"], [517, 1, 1, "", "UInt64"], [518, 1, 1, "", "UInt8"], [519, 1, 1, "", "Unknown"], [520, 1, 1, "", "Utf8"], [521, 3, 1, "", "get_idx_type"]], "polars.datatypes.Binary": [[497, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[498, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[499, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[500, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[501, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[502, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[503, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[504, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[505, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[506, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[507, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[508, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[509, 0, 1, "", "__init__"]], "polars.datatypes.List": [[510, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[511, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[512, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[513, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[514, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[515, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[516, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[517, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[518, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[519, 0, 1, "", "__init__"]], "polars.datatypes.Utf8": [[520, 0, 1, "", "__init__"]], "polars.exceptions": [[527, 4, 1, "", "ArrowError"], [528, 4, 1, "", "ComputeError"], [529, 4, 1, "", "DuplicateError"], [530, 4, 1, "", "InvalidOperationError"], [531, 4, 1, "", "NoDataError"], [532, 4, 1, "", "NoRowsReturned"], [533, 4, 1, "", "NotFoundError"], [534, 4, 1, "", "PanicException"], [535, 4, 1, "", "RowsException"], [536, 4, 1, "", "SchemaError"], [537, 4, 1, "", "ShapeError"], [538, 4, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[552, 0, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[553, 0, 1, "", "agg"], [554, 0, 1, "", "agg_list"], [555, 0, 1, "", "apply"], [556, 0, 1, "", "count"], [557, 0, 1, "", "first"], [558, 0, 1, "", "head"], [559, 0, 1, "", "last"], [560, 0, 1, "", "max"], [561, 0, 1, "", "mean"], [562, 0, 1, "", "median"], [563, 0, 1, "", "min"], [564, 0, 1, "", "n_unique"], [565, 0, 1, "", "pivot"], [566, 0, 1, "", "quantile"], [567, 0, 1, "", "sum"], [568, 0, 1, "", "tail"]], "polars.internals.dataframe.pivot.PivotOps": [[569, 0, 1, "", "count"], [570, 0, 1, "", "first"], [571, 0, 1, "", "last"], [572, 0, 1, "", "max"], [573, 0, 1, "", "mean"], [574, 0, 1, "", "median"], [575, 0, 1, "", "min"], [576, 0, 1, "", "sum"]], "polars.internals.expr.categorical.ExprCatNameSpace": [[577, 0, 1, "", "set_ordering"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace": [[578, 0, 1, "", "cast_time_unit"], [579, 0, 1, "", "cast_time_zone"], [580, 0, 1, "", "day"], [581, 0, 1, "", "days"], [582, 0, 1, "", "epoch"], [583, 0, 1, "", "hour"], [584, 0, 1, "", "hours"], [585, 0, 1, "", "iso_year"], [586, 0, 1, "", "microsecond"], [587, 0, 1, "", "microseconds"], [588, 0, 1, "", "millisecond"], [589, 0, 1, "", "milliseconds"], [590, 0, 1, "", "minute"], [591, 0, 1, "", "minutes"], [592, 0, 1, "", "month"], [593, 0, 1, "", "nanosecond"], [594, 0, 1, "", "nanoseconds"], [595, 0, 1, "", "offset_by"], [596, 0, 1, "", "ordinal_day"], [597, 0, 1, "", "quarter"], [598, 0, 1, "", "second"], [599, 0, 1, "", "seconds"], [600, 0, 1, "", "strftime"], [601, 0, 1, "", "timestamp"], [602, 0, 1, "", "truncate"], [603, 0, 1, "", "week"], [604, 0, 1, "", "weekday"], [605, 0, 1, "", "with_time_unit"], [606, 0, 1, "", "year"]], "polars.internals.expr.list.ExprListNameSpace": [[607, 0, 1, "", "arg_max"], [608, 0, 1, "", "arg_min"], [609, 0, 1, "", "concat"], [610, 0, 1, "", "contains"], [611, 0, 1, "", "diff"], [612, 0, 1, "", "eval"], [613, 0, 1, "", "first"], [614, 0, 1, "", "get"], [615, 0, 1, "", "head"], [616, 0, 1, "", "join"], [617, 0, 1, "", "last"], [618, 0, 1, "", "lengths"], [619, 0, 1, "", "max"], [620, 0, 1, "", "mean"], [621, 0, 1, "", "min"], [622, 0, 1, "", "reverse"], [623, 0, 1, "", "shift"], [624, 0, 1, "", "slice"], [625, 0, 1, "", "sort"], [626, 0, 1, "", "sum"], [627, 0, 1, "", "tail"], [628, 0, 1, "", "to_struct"], [629, 0, 1, "", "unique"]], "polars.internals.expr.meta.ExprMetaNameSpace": [[630, 0, 1, "", "output_name"], [631, 0, 1, "", "pop"], [632, 0, 1, "", "root_names"], [633, 0, 1, "", "undo_aliases"]], "polars.internals.expr.string.ExprStringNameSpace": [[634, 0, 1, "", "concat"], [635, 0, 1, "", "contains"], [636, 0, 1, "", "count_match"], [637, 0, 1, "", "decode"], [638, 0, 1, "", "encode"], [639, 0, 1, "", "ends_with"], [640, 0, 1, "", "extract"], [641, 0, 1, "", "extract_all"], [642, 0, 1, "", "json_path_match"], [643, 0, 1, "", "lengths"], [644, 0, 1, "", "ljust"], [645, 0, 1, "", "lstrip"], [646, 0, 1, "", "replace"], [647, 0, 1, "", "replace_all"], [648, 0, 1, "", "rjust"], [649, 0, 1, "", "rstrip"], [650, 0, 1, "", "slice"], [651, 0, 1, "", "split"], [652, 0, 1, "", "split_exact"], [653, 0, 1, "", "splitn"], [654, 0, 1, "", "starts_with"], [655, 0, 1, "", "strip"], [656, 0, 1, "", "strptime"], [657, 0, 1, "", "to_lowercase"], [658, 0, 1, "", "to_uppercase"], [659, 0, 1, "", "zfill"]], "polars.internals.expr.struct.ExprStructNameSpace": [[660, 0, 1, "", "field"], [661, 0, 1, "", "rename_fields"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[662, 0, 1, "", "agg"], [663, 0, 1, "", "apply"], [664, 0, 1, "", "head"], [665, 0, 1, "", "tail"]], "polars.internals.series.categorical.CatNameSpace": [[666, 0, 1, "", "set_ordering"]], "polars.internals.series.datetime.DateTimeNameSpace": [[667, 0, 1, "", "cast_time_unit"], [668, 0, 1, "", "cast_time_zone"], [669, 0, 1, "", "day"], [670, 0, 1, "", "days"], [671, 0, 1, "", "epoch"], [672, 0, 1, "", "hour"], [673, 0, 1, "", "hours"], [674, 0, 1, "", "iso_year"], [675, 0, 1, "", "max"], [676, 0, 1, "", "mean"], [677, 0, 1, "", "median"], [678, 0, 1, "", "microsecond"], [679, 0, 1, "", "microseconds"], [680, 0, 1, "", "millisecond"], [681, 0, 1, "", "milliseconds"], [682, 0, 1, "", "min"], [683, 0, 1, "", "minute"], [684, 0, 1, "", "minutes"], [685, 0, 1, "", "month"], [686, 0, 1, "", "nanosecond"], [687, 0, 1, "", "nanoseconds"], [688, 0, 1, "", "offset_by"], [689, 0, 1, "", "ordinal_day"], [690, 0, 1, "", "quarter"], [691, 0, 1, "", "second"], [692, 0, 1, "", "seconds"], [693, 0, 1, "", "strftime"], [694, 0, 1, "", "timestamp"], [695, 0, 1, "", "truncate"], [696, 0, 1, "", "week"], [697, 0, 1, "", "weekday"], [698, 0, 1, "", "with_time_unit"], [699, 0, 1, "", "year"]], "polars.internals.series.list.ListNameSpace": [[700, 0, 1, "", "arg_max"], [701, 0, 1, "", "arg_min"], [702, 0, 1, "", "concat"], [703, 0, 1, "", "contains"], [704, 0, 1, "", "diff"], [705, 0, 1, "", "eval"], [706, 0, 1, "", "first"], [707, 0, 1, "", "get"], [708, 0, 1, "", "head"], [709, 0, 1, "", "join"], [710, 0, 1, "", "last"], [711, 0, 1, "", "lengths"], [712, 0, 1, "", "max"], [713, 0, 1, "", "mean"], [714, 0, 1, "", "min"], [715, 0, 1, "", "reverse"], [716, 0, 1, "", "shift"], [717, 0, 1, "", "slice"], [718, 0, 1, "", "sort"], [719, 0, 1, "", "sum"], [720, 0, 1, "", "tail"], [721, 0, 1, "", "unique"]], "polars.internals.series.string.StringNameSpace": [[722, 0, 1, "", "concat"], [723, 0, 1, "", "contains"], [724, 0, 1, "", "count_match"], [725, 0, 1, "", "decode"], [726, 0, 1, "", "encode"], [727, 0, 1, "", "ends_with"], [728, 0, 1, "", "extract"], [729, 0, 1, "", "extract_all"], [730, 0, 1, "", "json_path_match"], [731, 0, 1, "", "lengths"], [732, 0, 1, "", "ljust"], [733, 0, 1, "", "lstrip"], [734, 0, 1, "", "replace"], [735, 0, 1, "", "replace_all"], [736, 0, 1, "", "rjust"], [737, 0, 1, "", "rstrip"], [738, 0, 1, "", "slice"], [739, 0, 1, "", "split"], [740, 0, 1, "", "split_exact"], [741, 0, 1, "", "splitn"], [742, 0, 1, "", "starts_with"], [743, 0, 1, "", "strip"], [744, 0, 1, "", "strptime"], [745, 0, 1, "", "to_lowercase"], [746, 0, 1, "", "to_uppercase"], [747, 0, 1, "", "zfill"]], "polars.internals.series.struct.StructNameSpace": [[748, 0, 1, "", "field"], [749, 2, 1, "", "fields"], [750, 0, 1, "", "rename_fields"], [751, 0, 1, "", "to_frame"]], "polars.testing": [[786, 3, 1, "", "assert_frame_equal"], [787, 3, 1, "", "assert_series_equal"], [788, 1, 1, "", "column"], [789, 3, 1, "", "columns"], [790, 3, 1, "", "dataframes"], [791, 3, 1, "", "series"]], "polars.testing.column": [[788, 0, 1, "", "__init__"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:property", "3": "py:function", "4": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"]}, "titleterms": {"polar": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795], "config": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 796, 801], "load": [1, 796], "restore_default": 2, "save": [3, 796], "set_ascii_t": 4, "set_fmt_str_length": 5, "set_tbl_cell_align": 6, "set_tbl_change_column_data_type_position_format": 7, "set_tbl_col": 8, "set_tbl_dataframe_shape_below": 9, "set_tbl_format": 10, "set_tbl_hide_column_data_typ": 11, "set_tbl_hide_column_nam": 12, "set_tbl_hide_column_separ": 13, "set_tbl_hide_dataframe_shap": 14, "set_tbl_row": 15, "set_tbl_width_char": 16, "set_utf8_t": 17, "set_verbos": 18, "state": [19, 796], "datafram": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 790, 797], "appli": [21, 122, 328, 481, 555, 663, 797, 800, 804], "clear": [22, 262, 346], "clone": [23, 263, 350], "column": [24, 265, 788, 789, 800], "describ": [25, 358], "drop": [26, 268], "drop_in_plac": 27, "drop_nul": [28, 154, 269, 362], "dtype": [29, 270, 364], "estimated_s": [30, 366], "explod": [31, 162, 271, 371], "extend": 32, "fill_nan": [33, 164, 273, 373], "fill_nul": [34, 165, 274, 374], "filter": [35, 166, 275, 375], "find_idx_by_nam": 36, "fold": [37, 541], "frame_equ": 38, "get_column": [39, 40], "groupbi": [41, 278, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 662, 663, 664, 665, 797, 804], "groupby_dynam": [42, 279], "groupby_rol": [43, 280], "hash_row": 44, "head": [45, 172, 281, 380, 551, 558, 615, 664, 708], "height": 46, "hstack": 47, "insert_at_idx": 48, "interpol": [49, 174, 283, 382], "is_dupl": [50, 176, 385], "is_empti": [51, 386], "is_uniqu": [52, 186, 397], "join": [53, 284, 616, 709], "join_asof": [54, 285], "lazi": [55, 801], "limit": [56, 191, 287, 401], "max": [57, 198, 289, 404, 560, 572, 619, 675, 712, 755], "mean": [58, 199, 290, 405, 561, 573, 620, 676, 713, 756], "median": [59, 200, 291, 406, 562, 574, 677, 757], "melt": [60, 292], "min": [61, 201, 293, 407, 563, 575, 621, 682, 714, 758], "n_chunk": [62, 409], "n_uniqu": [63, 203, 410, 564, 759], "null_count": [64, 206, 414], "partition_bi": 65, "pipe": [66, 294], "pivot": [67, 565, 569, 570, 571, 572, 573, 574, 575, 576, 797], "product": [68, 211, 418], "quantil": [69, 212, 296, 419, 566, 761], "rechunk": [70, 214, 421], "renam": [71, 298, 423], "replac": [72, 646, 734], "replace_at_idx": 73, "revers": [74, 218, 299, 425, 622, 715], "row": [75, 76], "sampl": [77, 230, 437], "schema": [78, 300], "select": [79, 301, 779, 797, 800, 804, 805], "shape": [80, 443], "shift": [81, 233, 302, 444, 623, 716], "shift_and_fil": [82, 234, 303, 445], "shrink_to_fit": [83, 446], "slice": [84, 240, 305, 452, 624, 650, 717, 738], "sort": [85, 241, 306, 453, 625, 718], "std": [86, 244, 307, 455, 782], "sum": [87, 247, 308, 457, 567, 576, 626, 719, 784], "tail": [88, 248, 309, 458, 568, 627, 665, 720, 785], "take_everi": [89, 250, 310, 460], "to_arrow": [90, 464], "to_dict": [91, 92], "to_dummi": [93, 465], "to_numpi": [94, 468], "to_panda": [95, 469], "to_seri": 96, "to_struct": [97, 628], "transpos": 98, "uniqu": [99, 255, 311, 472, 629, 721], "unnest": [100, 312], "unstack": 101, "upsampl": 102, "var": [103, 259, 313, 475, 794], "vstack": 104, "width": 105, "with_column": [106, 107, 314, 315], "with_row_count": [108, 317], "write_avro": 109, "write_csv": 110, "write_ipc": 111, "write_json": [112, 318], "write_ndjson": 113, "write_parquet": 114, "expr": [115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661], "ab": [116, 323], "agg_group": 117, "alia": [118, 324], "all": [119, 325, 479], "ani": [120, 326, 480], "append": [121, 327], "arcco": [123, 329], "arccosh": [124, 330], "arcsin": [125, 331], "arcsinh": [126, 332], "arctan": [127, 333], "arctanh": [128, 334], "arg_max": [129, 335, 607, 700], "arg_min": [130, 336, 608, 701], "arg_sort": [131, 337], "arg_uniqu": [132, 339], "argsort": [133, 340], "arr": [134, 341], "backward_fil": 135, "cast": [136, 342], "cat": [137, 343], "ceil": [138, 344], "clip": [139, 347], "clip_max": [140, 348], "clip_min": [141, 349], "co": [142, 351], "cosh": [143, 352], "count": [144, 492, 556, 569], "cumcount": 145, "cummax": [146, 353], "cummin": [147, 354], "cumprod": [148, 355], "cumsum": [149, 356, 495], "cumulative_ev": [150, 357], "diff": [151, 359, 611, 704], "dot": [152, 360], "drop_nan": [153, 361], "dt": [155, 363], "entropi": [156, 365], "ewm_mean": [157, 367], "ewm_std": [158, 368], "ewm_var": [159, 369], "exclud": [160, 539], "exp": [161, 370], "extend_const": [163, 372], "first": [167, 276, 540, 557, 570, 613, 706], "flatten": 168, "floor": [169, 377], "forward_fil": 170, "hash": [171, 379], "inspect": [173, 282], "is_between": 175, "is_finit": [177, 387], "is_first": [178, 388], "is_in": [179, 390], "is_infinit": [180, 391], "is_nan": [181, 392], "is_not": 182, "is_not_nan": [183, 393], "is_not_nul": [184, 394], "is_nul": [185, 395], "keep_nam": 187, "kurtosi": [188, 399], "last": [189, 286, 559, 571, 617, 710], "len": [190, 400], "list": [192, 510, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 752, 800, 805], "log": [193, 402], "log10": [194, 403], "lower_bound": 195, "map": [196, 288, 754], "map_alia": 197, "mode": [202, 408], "nan_max": [204, 412], "nan_min": [205, 413], "over": 207, "pct_chang": [208, 415], "pow": 209, "prefix": 210, "rank": [213, 420], "reinterpret": [215, 422], "repeat_bi": 216, "reshap": [217, 424], "rolling_appli": [219, 426], "rolling_max": [220, 427], "rolling_mean": [221, 428], "rolling_median": [222, 429], "rolling_min": [223, 430], "rolling_quantil": [224, 431], "rolling_skew": [225, 432], "rolling_std": [226, 433], "rolling_sum": [227, 434], "rolling_var": [228, 435], "round": [229, 436], "search_sort": [231, 438], "set_sort": [232, 442], "shuffl": [235, 447], "sign": [236, 448], "sin": [237, 449], "sinh": [238, 450], "skew": [239, 451], "sort_bi": 242, "sqrt": [243, 454], "str": [245, 456], "suffix": 246, "take": [249, 459], "tan": [251, 461], "tanh": [252, 462], "to_phys": [253, 470], "top_k": [254, 471], "unique_count": [256, 473], "upper_bound": 257, "value_count": [258, 474], "where": 260, "lazyfram": [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 662, 663, 664, 665, 804], "cach": 261, "collect": 264, "describe_optimized_plan": 266, "describe_plan": 267, "fetch": 272, "from_json": 277, "profil": 295, "read_json": [297, 768], "show_graph": 304, "with_context": 316, "sqlcontext": [319, 320, 321], "execut": 319, "queri": 320, "regist": 321, "seri": [322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 791, 805], "arg_tru": 338, "chunk_length": 345, "flag": 376, "has_valid": 378, "inner_dtyp": 381, "is_boolean": 383, "is_datelik": 384, "is_float": 389, "is_numer": 396, "is_utf8": 398, "name": [411, 800], "peak_max": 416, "peak_min": 417, "series_equ": 439, "set": [440, 796], "set_at_idx": 441, "time_unit": 463, "to_fram": [466, 751], "to_list": 467, "view": 476, "zip_with": 477, "stringcach": 478, "arang": 482, "arg_wher": 483, "argsort_bi": 484, "avg": 485, "coalesc": 486, "col": 487, "collect_al": 488, "concat": [489, 609, 634, 702, 722], "concat_list": 490, "concat_str": 491, "cov": 493, "cumfold": 494, "cut": 496, "datatyp": [497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521], "binari": 497, "boolean": [498, 800, 805], "categor": [499, 577, 666], "date": [501, 522, 798], "datetim": [502, 524, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699], "durat": [503, 525], "float32": 504, "float64": 505, "int16": 506, "int32": 507, "int64": 508, "int8": 509, "null": 511, "object": 512, "struct": [513, 660, 661, 748, 749, 750, 751, 783, 800, 805], "time": [514, 798], "uint16": 515, "uint32": 516, "uint64": 517, "uint8": 518, "unknown": 519, "utf8": 520, "get_idx_typ": 521, "date_rang": 523, "element": 526, "except": [527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 799], "arrowerror": 527, "computeerror": 528, "duplicateerror": 529, "invalidoperationerror": 530, "nodataerror": 531, "norowsreturn": 532, "notfounderror": 533, "panicexcept": 534, "rowsexcept": 535, "schemaerror": 536, "shapeerror": 537, "toomanyrowsreturn": 538, "format": 542, "from_arrow": 543, "from_dict": [544, 545], "from_numpi": 546, "from_panda": 547, "from_record": 548, "get_dummi": 549, "group": 550, "intern": [552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751], "batch": 552, "batchedcsvread": [552, 803], "next_batch": 552, "agg": [553, 662], "agg_list": 554, "pivotop": [569, 570, 571, 572, 573, 574, 575, 576], "exprcatnamespac": 577, "set_ord": [577, 666], "exprdatetimenamespac": [578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606], "cast_time_unit": [578, 667], "cast_time_zon": [579, 668], "dai": [580, 581, 669, 670], "epoch": [582, 671], "hour": [583, 584, 672, 673], "iso_year": [585, 674], "microsecond": [586, 587, 678, 679], "millisecond": [588, 589, 680, 681], "minut": [590, 591, 683, 684], "month": [592, 685], "nanosecond": [593, 594, 686, 687], "offset_bi": [595, 688], "ordinal_dai": [596, 689], "quarter": [597, 690], "second": [598, 599, 691, 692], "strftime": [600, 693], "timestamp": [601, 694], "truncat": [602, 695], "week": [603, 696], "weekdai": [604, 697], "with_time_unit": [605, 698], "year": [606, 699], "exprlistnamespac": [607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629], "contain": [610, 635, 703, 723], "eval": [612, 705], "get": [614, 707], "length": [618, 643, 711, 731], "meta": [630, 631, 632, 633, 800], "exprmetanamespac": [630, 631, 632, 633], "output_nam": 630, "pop": 631, "root_nam": 632, "undo_alias": 633, "string": [634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 800, 805], "exprstringnamespac": [634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659], "count_match": [636, 724], "decod": [637, 725], "encod": [638, 726], "ends_with": [639, 727], "extract": [640, 728], "extract_al": [641, 729], "json_path_match": [642, 730], "ljust": [644, 732], "lstrip": [645, 733], "replace_al": [647, 735], "rjust": [648, 736], "rstrip": [649, 737], "split": [651, 739], "split_exact": [652, 740], "splitn": [653, 741], "starts_with": [654, 742], "strip": [655, 743], "strptime": [656, 744], "to_lowercas": [657, 745], "to_uppercas": [658, 746], "zfill": [659, 747], "exprstructnamespac": [660, 661], "field": [660, 748, 749], "rename_field": [661, 750], "lazygroupbi": [662, 663, 664, 665], "catnamespac": 666, "datetimenamespac": [667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699], "listnamespac": [700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721], "stringnamespac": [722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747], "structnamespac": [748, 749, 750, 751], "lit": 753, "pearson_corr": 760, "read_avro": 762, "read_csv": 763, "read_csv_batch": 764, "read_excel": 765, "read_ipc": 766, "read_ipc_schema": 767, "read_ndjson": 769, "read_parquet": 770, "read_parquet_schema": 771, "read_sql": 772, "repeat": 773, "scan_csv": 774, "scan_d": 775, "scan_ipc": 776, "scan_ndjson": 777, "scan_parquet": 778, "show_vers": 780, "spearman_rank_corr": 781, "test": [786, 787, 788, 789, 790, 791, 807], "assert_frame_equ": 786, "assert_series_equ": 787, "threadpool_s": 792, "toggle_string_cach": 793, "when": 795, "option": 796, "unset": 796, "current": 796, "constructor": [797, 800, 805], "attribut": [797, 800, 804, 805], "convers": [797, 801, 804, 805], "aggreg": [797, 800, 804, 805], "descript": [797, 804, 805], "stat": [797, 804, 805], "comput": [797, 800, 805], "manipul": [797, 800, 804, 805], "variou": [797, 800, 804, 805], "data": 798, "type": 798, "numer": 798, "nest": 798, "other": 798, "function": [798, 800, 801], "express": 800, "window": 800, "timeseri": [800, 805], "categori": [800, 805], "eager": 801, "parallel": 801, "api": 802, "refer": 802, "input": 803, "output": 803, "csv": 803, "feather": 803, "ipc": 803, "parquet": 803, "sql": [803, 806], "json": 803, "avro": 803, "excel": 803, "dataset": 803, "method": 806, "assert": 807, "properti": 807, "base": 807, "strategi": 807, "helper": 807, "util": 808}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.Config.load": [[1, "polars-config-load"]], "polars.Config.restore_defaults": [[2, "polars-config-restore-defaults"]], "polars.Config.save": [[3, "polars-config-save"]], "polars.Config.set_ascii_tables": [[4, "polars-config-set-ascii-tables"]], "polars.Config.set_fmt_str_lengths": [[5, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_tbl_cell_alignment": [[6, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_change_column_data_type_position_format": [[7, "polars-config-set-tbl-change-column-data-type-position-format"]], "polars.Config.set_tbl_cols": [[8, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_dataframe_shape_below": [[9, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_tbl_formatting": [[10, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_hide_column_data_types": [[11, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_hide_column_names": [[12, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_hide_column_separator": [[13, "polars-config-set-tbl-hide-column-separator"]], "polars.Config.set_tbl_hide_dataframe_shape": [[14, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_rows": [[15, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_width_chars": [[16, "polars-config-set-tbl-width-chars"]], "polars.Config.set_utf8_tables": [[17, "polars-config-set-utf8-tables"]], "polars.Config.set_verbose": [[18, "polars-config-set-verbose"]], "polars.Config.state": [[19, "polars-config-state"]], "polars.DataFrame": [[20, "polars-dataframe"]], "polars.DataFrame.apply": [[21, "polars-dataframe-apply"]], "polars.DataFrame.cleared": [[22, "polars-dataframe-cleared"]], "polars.DataFrame.clone": [[23, "polars-dataframe-clone"]], "polars.DataFrame.columns": [[24, "polars-dataframe-columns"]], "polars.DataFrame.describe": [[25, "polars-dataframe-describe"]], "polars.DataFrame.drop": [[26, "polars-dataframe-drop"]], "polars.DataFrame.drop_in_place": [[27, "polars-dataframe-drop-in-place"]], "polars.DataFrame.drop_nulls": [[28, "polars-dataframe-drop-nulls"]], "polars.DataFrame.dtypes": [[29, "polars-dataframe-dtypes"]], "polars.DataFrame.estimated_size": [[30, "polars-dataframe-estimated-size"]], "polars.DataFrame.explode": [[31, "polars-dataframe-explode"]], "polars.DataFrame.extend": [[32, "polars-dataframe-extend"]], "polars.DataFrame.fill_nan": [[33, "polars-dataframe-fill-nan"]], "polars.DataFrame.fill_null": [[34, "polars-dataframe-fill-null"]], "polars.DataFrame.filter": [[35, "polars-dataframe-filter"]], "polars.DataFrame.find_idx_by_name": [[36, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.fold": [[37, "polars-dataframe-fold"]], "polars.DataFrame.frame_equal": [[38, "polars-dataframe-frame-equal"]], "polars.DataFrame.get_column": [[39, "polars-dataframe-get-column"]], "polars.DataFrame.get_columns": [[40, "polars-dataframe-get-columns"]], "polars.DataFrame.groupby": [[41, "polars-dataframe-groupby"]], "polars.DataFrame.groupby_dynamic": [[42, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.groupby_rolling": [[43, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.hash_rows": [[44, "polars-dataframe-hash-rows"]], "polars.DataFrame.head": [[45, "polars-dataframe-head"]], "polars.DataFrame.height": [[46, "polars-dataframe-height"]], "polars.DataFrame.hstack": [[47, "polars-dataframe-hstack"]], "polars.DataFrame.insert_at_idx": [[48, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.interpolate": [[49, "polars-dataframe-interpolate"]], "polars.DataFrame.is_duplicated": [[50, "polars-dataframe-is-duplicated"]], "polars.DataFrame.is_empty": [[51, "polars-dataframe-is-empty"]], "polars.DataFrame.is_unique": [[52, "polars-dataframe-is-unique"]], "polars.DataFrame.join": [[53, "polars-dataframe-join"]], "polars.DataFrame.join_asof": [[54, "polars-dataframe-join-asof"]], "polars.DataFrame.lazy": [[55, "polars-dataframe-lazy"]], "polars.DataFrame.limit": [[56, "polars-dataframe-limit"]], "polars.DataFrame.max": [[57, "polars-dataframe-max"]], "polars.DataFrame.mean": [[58, "polars-dataframe-mean"]], "polars.DataFrame.median": [[59, "polars-dataframe-median"]], "polars.DataFrame.melt": [[60, "polars-dataframe-melt"]], "polars.DataFrame.min": [[61, "polars-dataframe-min"]], "polars.DataFrame.n_chunks": [[62, "polars-dataframe-n-chunks"]], "polars.DataFrame.n_unique": [[63, "polars-dataframe-n-unique"]], "polars.DataFrame.null_count": [[64, "polars-dataframe-null-count"]], "polars.DataFrame.partition_by": [[65, "polars-dataframe-partition-by"]], "polars.DataFrame.pipe": [[66, "polars-dataframe-pipe"]], "polars.DataFrame.pivot": [[67, "polars-dataframe-pivot"]], "polars.DataFrame.product": [[68, "polars-dataframe-product"]], "polars.DataFrame.quantile": [[69, "polars-dataframe-quantile"]], "polars.DataFrame.rechunk": [[70, "polars-dataframe-rechunk"]], "polars.DataFrame.rename": [[71, "polars-dataframe-rename"]], "polars.DataFrame.replace": [[72, "polars-dataframe-replace"]], "polars.DataFrame.replace_at_idx": [[73, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.reverse": [[74, "polars-dataframe-reverse"]], "polars.DataFrame.row": [[75, "polars-dataframe-row"]], "polars.DataFrame.rows": [[76, "polars-dataframe-rows"]], "polars.DataFrame.sample": [[77, "polars-dataframe-sample"]], "polars.DataFrame.schema": [[78, "polars-dataframe-schema"]], "polars.DataFrame.select": [[79, "polars-dataframe-select"]], "polars.DataFrame.shape": [[80, "polars-dataframe-shape"]], "polars.DataFrame.shift": [[81, "polars-dataframe-shift"]], "polars.DataFrame.shift_and_fill": [[82, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.shrink_to_fit": [[83, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.slice": [[84, "polars-dataframe-slice"]], "polars.DataFrame.sort": [[85, "polars-dataframe-sort"]], "polars.DataFrame.std": [[86, "polars-dataframe-std"]], "polars.DataFrame.sum": [[87, "polars-dataframe-sum"]], "polars.DataFrame.tail": [[88, "polars-dataframe-tail"]], "polars.DataFrame.take_every": [[89, "polars-dataframe-take-every"]], "polars.DataFrame.to_arrow": [[90, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_dict": [[91, "polars-dataframe-to-dict"]], "polars.DataFrame.to_dicts": [[92, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_dummies": [[93, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_numpy": [[94, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_pandas": [[95, "polars-dataframe-to-pandas"]], "polars.DataFrame.to_series": [[96, "polars-dataframe-to-series"]], "polars.DataFrame.to_struct": [[97, "polars-dataframe-to-struct"]], "polars.DataFrame.transpose": [[98, "polars-dataframe-transpose"]], "polars.DataFrame.unique": [[99, "polars-dataframe-unique"]], "polars.DataFrame.unnest": [[100, "polars-dataframe-unnest"]], "polars.DataFrame.unstack": [[101, "polars-dataframe-unstack"]], "polars.DataFrame.upsample": [[102, "polars-dataframe-upsample"]], "polars.DataFrame.var": [[103, "polars-dataframe-var"]], "polars.DataFrame.vstack": [[104, "polars-dataframe-vstack"]], "polars.DataFrame.width": [[105, "polars-dataframe-width"]], "polars.DataFrame.with_column": [[106, "polars-dataframe-with-column"]], "polars.DataFrame.with_columns": [[107, "polars-dataframe-with-columns"]], "polars.DataFrame.with_row_count": [[108, "polars-dataframe-with-row-count"]], "polars.DataFrame.write_avro": [[109, "polars-dataframe-write-avro"]], "polars.DataFrame.write_csv": [[110, "polars-dataframe-write-csv"]], "polars.DataFrame.write_ipc": [[111, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_json": [[112, "polars-dataframe-write-json"]], "polars.DataFrame.write_ndjson": [[113, "polars-dataframe-write-ndjson"]], "polars.DataFrame.write_parquet": [[114, "polars-dataframe-write-parquet"]], "polars.Expr": [[115, "polars-expr"]], "polars.Expr.abs": [[116, "polars-expr-abs"]], "polars.Expr.agg_groups": [[117, "polars-expr-agg-groups"]], "polars.Expr.alias": [[118, "polars-expr-alias"]], "polars.Expr.all": [[119, "polars-expr-all"]], "polars.Expr.any": [[120, "polars-expr-any"]], "polars.Expr.append": [[121, "polars-expr-append"]], "polars.Expr.apply": [[122, "polars-expr-apply"]], "polars.Expr.arccos": [[123, "polars-expr-arccos"]], "polars.Expr.arccosh": [[124, "polars-expr-arccosh"]], "polars.Expr.arcsin": [[125, "polars-expr-arcsin"]], "polars.Expr.arcsinh": [[126, "polars-expr-arcsinh"]], "polars.Expr.arctan": [[127, "polars-expr-arctan"]], "polars.Expr.arctanh": [[128, "polars-expr-arctanh"]], "polars.Expr.arg_max": [[129, "polars-expr-arg-max"]], "polars.Expr.arg_min": [[130, "polars-expr-arg-min"]], "polars.Expr.arg_sort": [[131, "polars-expr-arg-sort"]], "polars.Expr.arg_unique": [[132, "polars-expr-arg-unique"]], "polars.Expr.argsort": [[133, "polars-expr-argsort"]], "polars.Expr.arr": [[134, "polars-expr-arr"]], "polars.Expr.backward_fill": [[135, "polars-expr-backward-fill"]], "polars.Expr.cast": [[136, "polars-expr-cast"]], "polars.Expr.cat": [[137, "polars-expr-cat"]], "polars.Expr.ceil": [[138, "polars-expr-ceil"]], "polars.Expr.clip": [[139, "polars-expr-clip"]], "polars.Expr.clip_max": [[140, "polars-expr-clip-max"]], "polars.Expr.clip_min": [[141, "polars-expr-clip-min"]], "polars.Expr.cos": [[142, "polars-expr-cos"]], "polars.Expr.cosh": [[143, "polars-expr-cosh"]], "polars.Expr.count": [[144, "polars-expr-count"]], "polars.Expr.cumcount": [[145, "polars-expr-cumcount"]], "polars.Expr.cummax": [[146, "polars-expr-cummax"]], "polars.Expr.cummin": [[147, "polars-expr-cummin"]], "polars.Expr.cumprod": [[148, "polars-expr-cumprod"]], "polars.Expr.cumsum": [[149, "polars-expr-cumsum"]], "polars.Expr.cumulative_eval": [[150, "polars-expr-cumulative-eval"]], "polars.Expr.diff": [[151, "polars-expr-diff"]], "polars.Expr.dot": [[152, "polars-expr-dot"]], "polars.Expr.drop_nans": [[153, "polars-expr-drop-nans"]], "polars.Expr.drop_nulls": [[154, "polars-expr-drop-nulls"]], "polars.Expr.dt": [[155, "polars-expr-dt"]], "polars.Expr.entropy": [[156, "polars-expr-entropy"]], "polars.Expr.ewm_mean": [[157, "polars-expr-ewm-mean"]], "polars.Expr.ewm_std": [[158, "polars-expr-ewm-std"]], "polars.Expr.ewm_var": [[159, "polars-expr-ewm-var"]], "polars.Expr.exclude": [[160, "polars-expr-exclude"]], "polars.Expr.exp": [[161, "polars-expr-exp"]], "polars.Expr.explode": [[162, "polars-expr-explode"]], "polars.Expr.extend_constant": [[163, "polars-expr-extend-constant"]], "polars.Expr.fill_nan": [[164, "polars-expr-fill-nan"]], "polars.Expr.fill_null": [[165, "polars-expr-fill-null"]], "polars.Expr.filter": [[166, "polars-expr-filter"]], "polars.Expr.first": [[167, "polars-expr-first"]], "polars.Expr.flatten": [[168, "polars-expr-flatten"]], "polars.Expr.floor": [[169, "polars-expr-floor"]], "polars.Expr.forward_fill": [[170, "polars-expr-forward-fill"]], "polars.Expr.hash": [[171, "polars-expr-hash"]], "polars.Expr.head": [[172, "polars-expr-head"]], "polars.Expr.inspect": [[173, "polars-expr-inspect"]], "polars.Expr.interpolate": [[174, "polars-expr-interpolate"]], "polars.Expr.is_between": [[175, "polars-expr-is-between"]], "polars.Expr.is_duplicated": [[176, "polars-expr-is-duplicated"]], "polars.Expr.is_finite": [[177, "polars-expr-is-finite"]], "polars.Expr.is_first": [[178, "polars-expr-is-first"]], "polars.Expr.is_in": [[179, "polars-expr-is-in"]], "polars.Expr.is_infinite": [[180, "polars-expr-is-infinite"]], "polars.Expr.is_nan": [[181, "polars-expr-is-nan"]], "polars.Expr.is_not": [[182, "polars-expr-is-not"]], "polars.Expr.is_not_nan": [[183, "polars-expr-is-not-nan"]], "polars.Expr.is_not_null": [[184, "polars-expr-is-not-null"]], "polars.Expr.is_null": [[185, "polars-expr-is-null"]], "polars.Expr.is_unique": [[186, "polars-expr-is-unique"]], "polars.Expr.keep_name": [[187, "polars-expr-keep-name"]], "polars.Expr.kurtosis": [[188, "polars-expr-kurtosis"]], "polars.Expr.last": [[189, "polars-expr-last"]], "polars.Expr.len": [[190, "polars-expr-len"]], "polars.Expr.limit": [[191, "polars-expr-limit"]], "polars.Expr.list": [[192, "polars-expr-list"]], "polars.Expr.log": [[193, "polars-expr-log"]], "polars.Expr.log10": [[194, "polars-expr-log10"]], "polars.Expr.lower_bound": [[195, "polars-expr-lower-bound"]], "polars.Expr.map": [[196, "polars-expr-map"]], "polars.Expr.map_alias": [[197, "polars-expr-map-alias"]], "polars.Expr.max": [[198, "polars-expr-max"]], "polars.Expr.mean": [[199, "polars-expr-mean"]], "polars.Expr.median": [[200, "polars-expr-median"]], "polars.Expr.min": [[201, "polars-expr-min"]], "polars.Expr.mode": [[202, "polars-expr-mode"]], "polars.Expr.n_unique": [[203, "polars-expr-n-unique"]], "polars.Expr.nan_max": [[204, "polars-expr-nan-max"]], "polars.Expr.nan_min": [[205, "polars-expr-nan-min"]], "polars.Expr.null_count": [[206, "polars-expr-null-count"]], "polars.Expr.over": [[207, "polars-expr-over"]], "polars.Expr.pct_change": [[208, "polars-expr-pct-change"]], "polars.Expr.pow": [[209, "polars-expr-pow"]], "polars.Expr.prefix": [[210, "polars-expr-prefix"]], "polars.Expr.product": [[211, "polars-expr-product"]], "polars.Expr.quantile": [[212, "polars-expr-quantile"]], "polars.Expr.rank": [[213, "polars-expr-rank"]], "polars.Expr.rechunk": [[214, "polars-expr-rechunk"]], "polars.Expr.reinterpret": [[215, "polars-expr-reinterpret"]], "polars.Expr.repeat_by": [[216, "polars-expr-repeat-by"]], "polars.Expr.reshape": [[217, "polars-expr-reshape"]], "polars.Expr.reverse": [[218, "polars-expr-reverse"]], "polars.Expr.rolling_apply": [[219, "polars-expr-rolling-apply"]], "polars.Expr.rolling_max": [[220, "polars-expr-rolling-max"]], "polars.Expr.rolling_mean": [[221, "polars-expr-rolling-mean"]], "polars.Expr.rolling_median": [[222, "polars-expr-rolling-median"]], "polars.Expr.rolling_min": [[223, "polars-expr-rolling-min"]], "polars.Expr.rolling_quantile": [[224, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_skew": [[225, "polars-expr-rolling-skew"]], "polars.Expr.rolling_std": [[226, "polars-expr-rolling-std"]], "polars.Expr.rolling_sum": [[227, "polars-expr-rolling-sum"]], "polars.Expr.rolling_var": [[228, "polars-expr-rolling-var"]], "polars.Expr.round": [[229, "polars-expr-round"]], "polars.Expr.sample": [[230, "polars-expr-sample"]], "polars.Expr.search_sorted": [[231, "polars-expr-search-sorted"]], "polars.Expr.set_sorted": [[232, "polars-expr-set-sorted"]], "polars.Expr.shift": [[233, "polars-expr-shift"]], "polars.Expr.shift_and_fill": [[234, "polars-expr-shift-and-fill"]], "polars.Expr.shuffle": [[235, "polars-expr-shuffle"]], "polars.Expr.sign": [[236, "polars-expr-sign"]], "polars.Expr.sin": [[237, "polars-expr-sin"]], "polars.Expr.sinh": [[238, "polars-expr-sinh"]], "polars.Expr.skew": [[239, "polars-expr-skew"]], "polars.Expr.slice": [[240, "polars-expr-slice"]], "polars.Expr.sort": [[241, "polars-expr-sort"]], "polars.Expr.sort_by": [[242, "polars-expr-sort-by"]], "polars.Expr.sqrt": [[243, "polars-expr-sqrt"]], "polars.Expr.std": [[244, "polars-expr-std"]], "polars.Expr.str": [[245, "polars-expr-str"]], "polars.Expr.suffix": [[246, "polars-expr-suffix"]], "polars.Expr.sum": [[247, "polars-expr-sum"]], "polars.Expr.tail": [[248, "polars-expr-tail"]], "polars.Expr.take": [[249, "polars-expr-take"]], "polars.Expr.take_every": [[250, "polars-expr-take-every"]], "polars.Expr.tan": [[251, "polars-expr-tan"]], "polars.Expr.tanh": [[252, "polars-expr-tanh"]], "polars.Expr.to_physical": [[253, "polars-expr-to-physical"]], "polars.Expr.top_k": [[254, "polars-expr-top-k"]], "polars.Expr.unique": [[255, "polars-expr-unique"]], "polars.Expr.unique_counts": [[256, "polars-expr-unique-counts"]], "polars.Expr.upper_bound": [[257, "polars-expr-upper-bound"]], "polars.Expr.value_counts": [[258, "polars-expr-value-counts"]], "polars.Expr.var": [[259, "polars-expr-var"]], "polars.Expr.where": [[260, "polars-expr-where"]], "polars.LazyFrame.cache": [[261, "polars-lazyframe-cache"]], "polars.LazyFrame.cleared": [[262, "polars-lazyframe-cleared"]], "polars.LazyFrame.clone": [[263, "polars-lazyframe-clone"]], "polars.LazyFrame.collect": [[264, "polars-lazyframe-collect"]], "polars.LazyFrame.columns": [[265, "polars-lazyframe-columns"]], "polars.LazyFrame.describe_optimized_plan": [[266, "polars-lazyframe-describe-optimized-plan"]], "polars.LazyFrame.describe_plan": [[267, "polars-lazyframe-describe-plan"]], "polars.LazyFrame.drop": [[268, "polars-lazyframe-drop"]], "polars.LazyFrame.drop_nulls": [[269, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.dtypes": [[270, "polars-lazyframe-dtypes"]], "polars.LazyFrame.explode": [[271, "polars-lazyframe-explode"]], "polars.LazyFrame.fetch": [[272, "polars-lazyframe-fetch"]], "polars.LazyFrame.fill_nan": [[273, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.fill_null": [[274, "polars-lazyframe-fill-null"]], "polars.LazyFrame.filter": [[275, "polars-lazyframe-filter"]], "polars.LazyFrame.first": [[276, "polars-lazyframe-first"]], "polars.LazyFrame.from_json": [[277, "polars-lazyframe-from-json"]], "polars.LazyFrame.groupby": [[278, "polars-lazyframe-groupby"]], "polars.LazyFrame.groupby_dynamic": [[279, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.groupby_rolling": [[280, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.head": [[281, "polars-lazyframe-head"]], "polars.LazyFrame.inspect": [[282, "polars-lazyframe-inspect"]], "polars.LazyFrame.interpolate": [[283, "polars-lazyframe-interpolate"]], "polars.LazyFrame.join": [[284, "polars-lazyframe-join"]], "polars.LazyFrame.join_asof": [[285, "polars-lazyframe-join-asof"]], "polars.LazyFrame.last": [[286, "polars-lazyframe-last"]], "polars.LazyFrame.limit": [[287, "polars-lazyframe-limit"]], "polars.LazyFrame.map": [[288, "polars-lazyframe-map"]], "polars.LazyFrame.max": [[289, "polars-lazyframe-max"]], "polars.LazyFrame.mean": [[290, "polars-lazyframe-mean"]], "polars.LazyFrame.median": [[291, "polars-lazyframe-median"]], "polars.LazyFrame.melt": [[292, "polars-lazyframe-melt"]], "polars.LazyFrame.min": [[293, "polars-lazyframe-min"]], "polars.LazyFrame.pipe": [[294, "polars-lazyframe-pipe"]], "polars.LazyFrame.profile": [[295, "polars-lazyframe-profile"]], "polars.LazyFrame.quantile": [[296, "polars-lazyframe-quantile"]], "polars.LazyFrame.read_json": [[297, "polars-lazyframe-read-json"]], "polars.LazyFrame.rename": [[298, "polars-lazyframe-rename"]], "polars.LazyFrame.reverse": [[299, "polars-lazyframe-reverse"]], "polars.LazyFrame.schema": [[300, "polars-lazyframe-schema"]], "polars.LazyFrame.select": [[301, "polars-lazyframe-select"]], "polars.LazyFrame.shift": [[302, "polars-lazyframe-shift"]], "polars.LazyFrame.shift_and_fill": [[303, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.show_graph": [[304, "polars-lazyframe-show-graph"]], "polars.LazyFrame.slice": [[305, "polars-lazyframe-slice"]], "polars.LazyFrame.sort": [[306, "polars-lazyframe-sort"]], "polars.LazyFrame.std": [[307, "polars-lazyframe-std"]], "polars.LazyFrame.sum": [[308, "polars-lazyframe-sum"]], "polars.LazyFrame.tail": [[309, "polars-lazyframe-tail"]], "polars.LazyFrame.take_every": [[310, "polars-lazyframe-take-every"]], "polars.LazyFrame.unique": [[311, "polars-lazyframe-unique"]], "polars.LazyFrame.unnest": [[312, "polars-lazyframe-unnest"]], "polars.LazyFrame.var": [[313, "polars-lazyframe-var"]], "polars.LazyFrame.with_column": [[314, "polars-lazyframe-with-column"]], "polars.LazyFrame.with_columns": [[315, "polars-lazyframe-with-columns"]], "polars.LazyFrame.with_context": [[316, "polars-lazyframe-with-context"]], "polars.LazyFrame.with_row_count": [[317, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.write_json": [[318, "polars-lazyframe-write-json"]], "polars.SQLContext.execute": [[319, "polars-sqlcontext-execute"]], "polars.SQLContext.query": [[320, "polars-sqlcontext-query"]], "polars.SQLContext.register": [[321, "polars-sqlcontext-register"]], "polars.Series": [[322, "polars-series"]], "polars.Series.abs": [[323, "polars-series-abs"]], "polars.Series.alias": [[324, "polars-series-alias"]], "polars.Series.all": [[325, "polars-series-all"]], "polars.Series.any": [[326, "polars-series-any"]], "polars.Series.append": [[327, "polars-series-append"]], "polars.Series.apply": [[328, "polars-series-apply"]], "polars.Series.arccos": [[329, "polars-series-arccos"]], "polars.Series.arccosh": [[330, "polars-series-arccosh"]], "polars.Series.arcsin": [[331, "polars-series-arcsin"]], "polars.Series.arcsinh": [[332, "polars-series-arcsinh"]], "polars.Series.arctan": [[333, "polars-series-arctan"]], "polars.Series.arctanh": [[334, "polars-series-arctanh"]], "polars.Series.arg_max": [[335, "polars-series-arg-max"]], "polars.Series.arg_min": [[336, "polars-series-arg-min"]], "polars.Series.arg_sort": [[337, "polars-series-arg-sort"]], "polars.Series.arg_true": [[338, "polars-series-arg-true"]], "polars.Series.arg_unique": [[339, "polars-series-arg-unique"]], "polars.Series.argsort": [[340, "polars-series-argsort"]], "polars.Series.arr": [[341, "polars-series-arr"]], "polars.Series.cast": [[342, "polars-series-cast"]], "polars.Series.cat": [[343, "polars-series-cat"]], "polars.Series.ceil": [[344, "polars-series-ceil"]], "polars.Series.chunk_lengths": [[345, "polars-series-chunk-lengths"]], "polars.Series.cleared": [[346, "polars-series-cleared"]], "polars.Series.clip": [[347, "polars-series-clip"]], "polars.Series.clip_max": [[348, "polars-series-clip-max"]], "polars.Series.clip_min": [[349, "polars-series-clip-min"]], "polars.Series.clone": [[350, "polars-series-clone"]], "polars.Series.cos": [[351, "polars-series-cos"]], "polars.Series.cosh": [[352, "polars-series-cosh"]], "polars.Series.cummax": [[353, "polars-series-cummax"]], "polars.Series.cummin": [[354, "polars-series-cummin"]], "polars.Series.cumprod": [[355, "polars-series-cumprod"]], "polars.Series.cumsum": [[356, "polars-series-cumsum"]], "polars.Series.cumulative_eval": [[357, "polars-series-cumulative-eval"]], "polars.Series.describe": [[358, "polars-series-describe"]], "polars.Series.diff": [[359, "polars-series-diff"]], "polars.Series.dot": [[360, "polars-series-dot"]], "polars.Series.drop_nans": [[361, "polars-series-drop-nans"]], "polars.Series.drop_nulls": [[362, "polars-series-drop-nulls"]], "polars.Series.dt": [[363, "polars-series-dt"]], "polars.Series.dtype": [[364, "polars-series-dtype"]], "polars.Series.entropy": [[365, "polars-series-entropy"]], "polars.Series.estimated_size": [[366, "polars-series-estimated-size"]], "polars.Series.ewm_mean": [[367, "polars-series-ewm-mean"]], "polars.Series.ewm_std": [[368, "polars-series-ewm-std"]], "polars.Series.ewm_var": [[369, "polars-series-ewm-var"]], "polars.Series.exp": [[370, "polars-series-exp"]], "polars.Series.explode": [[371, "polars-series-explode"]], "polars.Series.extend_constant": [[372, "polars-series-extend-constant"]], "polars.Series.fill_nan": [[373, "polars-series-fill-nan"]], "polars.Series.fill_null": [[374, "polars-series-fill-null"]], "polars.Series.filter": [[375, "polars-series-filter"]], "polars.Series.flags": [[376, "polars-series-flags"]], "polars.Series.floor": [[377, "polars-series-floor"]], "polars.Series.has_validity": [[378, "polars-series-has-validity"]], "polars.Series.hash": [[379, "polars-series-hash"]], "polars.Series.head": [[380, "polars-series-head"]], "polars.Series.inner_dtype": [[381, "polars-series-inner-dtype"]], "polars.Series.interpolate": [[382, "polars-series-interpolate"]], "polars.Series.is_boolean": [[383, "polars-series-is-boolean"]], "polars.Series.is_datelike": [[384, "polars-series-is-datelike"]], "polars.Series.is_duplicated": [[385, "polars-series-is-duplicated"]], "polars.Series.is_empty": [[386, "polars-series-is-empty"]], "polars.Series.is_finite": [[387, "polars-series-is-finite"]], "polars.Series.is_first": [[388, "polars-series-is-first"]], "polars.Series.is_float": [[389, "polars-series-is-float"]], "polars.Series.is_in": [[390, "polars-series-is-in"]], "polars.Series.is_infinite": [[391, "polars-series-is-infinite"]], "polars.Series.is_nan": [[392, "polars-series-is-nan"]], "polars.Series.is_not_nan": [[393, "polars-series-is-not-nan"]], "polars.Series.is_not_null": [[394, "polars-series-is-not-null"]], "polars.Series.is_null": [[395, "polars-series-is-null"]], "polars.Series.is_numeric": [[396, "polars-series-is-numeric"]], "polars.Series.is_unique": [[397, "polars-series-is-unique"]], "polars.Series.is_utf8": [[398, "polars-series-is-utf8"]], "polars.Series.kurtosis": [[399, "polars-series-kurtosis"]], "polars.Series.len": [[400, "polars-series-len"]], "polars.Series.limit": [[401, "polars-series-limit"]], "polars.Series.log": [[402, "polars-series-log"]], "polars.Series.log10": [[403, "polars-series-log10"]], "polars.Series.max": [[404, "polars-series-max"]], "polars.Series.mean": [[405, "polars-series-mean"]], "polars.Series.median": [[406, "polars-series-median"]], "polars.Series.min": [[407, "polars-series-min"]], "polars.Series.mode": [[408, "polars-series-mode"]], "polars.Series.n_chunks": [[409, "polars-series-n-chunks"]], "polars.Series.n_unique": [[410, "polars-series-n-unique"]], "polars.Series.name": [[411, "polars-series-name"]], "polars.Series.nan_max": [[412, "polars-series-nan-max"]], "polars.Series.nan_min": [[413, "polars-series-nan-min"]], "polars.Series.null_count": [[414, "polars-series-null-count"]], "polars.Series.pct_change": [[415, "polars-series-pct-change"]], "polars.Series.peak_max": [[416, "polars-series-peak-max"]], "polars.Series.peak_min": [[417, "polars-series-peak-min"]], "polars.Series.product": [[418, "polars-series-product"]], "polars.Series.quantile": [[419, "polars-series-quantile"]], "polars.Series.rank": [[420, "polars-series-rank"]], "polars.Series.rechunk": [[421, "polars-series-rechunk"]], "polars.Series.reinterpret": [[422, "polars-series-reinterpret"]], "polars.Series.rename": [[423, "polars-series-rename"]], "polars.Series.reshape": [[424, "polars-series-reshape"]], "polars.Series.reverse": [[425, "polars-series-reverse"]], "polars.Series.rolling_apply": [[426, "polars-series-rolling-apply"]], "polars.Series.rolling_max": [[427, "polars-series-rolling-max"]], "polars.Series.rolling_mean": [[428, "polars-series-rolling-mean"]], "polars.Series.rolling_median": [[429, "polars-series-rolling-median"]], "polars.Series.rolling_min": [[430, "polars-series-rolling-min"]], "polars.Series.rolling_quantile": [[431, "polars-series-rolling-quantile"]], "polars.Series.rolling_skew": [[432, "polars-series-rolling-skew"]], "polars.Series.rolling_std": [[433, "polars-series-rolling-std"]], "polars.Series.rolling_sum": [[434, "polars-series-rolling-sum"]], "polars.Series.rolling_var": [[435, "polars-series-rolling-var"]], "polars.Series.round": [[436, "polars-series-round"]], "polars.Series.sample": [[437, "polars-series-sample"]], "polars.Series.search_sorted": [[438, "polars-series-search-sorted"]], "polars.Series.series_equal": [[439, "polars-series-series-equal"]], "polars.Series.set": [[440, "polars-series-set"]], "polars.Series.set_at_idx": [[441, "polars-series-set-at-idx"]], "polars.Series.set_sorted": [[442, "polars-series-set-sorted"]], "polars.Series.shape": [[443, "polars-series-shape"]], "polars.Series.shift": [[444, "polars-series-shift"]], "polars.Series.shift_and_fill": [[445, "polars-series-shift-and-fill"]], "polars.Series.shrink_to_fit": [[446, "polars-series-shrink-to-fit"]], "polars.Series.shuffle": [[447, "polars-series-shuffle"]], "polars.Series.sign": [[448, "polars-series-sign"]], "polars.Series.sin": [[449, "polars-series-sin"]], "polars.Series.sinh": [[450, "polars-series-sinh"]], "polars.Series.skew": [[451, "polars-series-skew"]], "polars.Series.slice": [[452, "polars-series-slice"]], "polars.Series.sort": [[453, "polars-series-sort"]], "polars.Series.sqrt": [[454, "polars-series-sqrt"]], "polars.Series.std": [[455, "polars-series-std"]], "polars.Series.str": [[456, "polars-series-str"]], "polars.Series.sum": [[457, "polars-series-sum"]], "polars.Series.tail": [[458, "polars-series-tail"]], "polars.Series.take": [[459, "polars-series-take"]], "polars.Series.take_every": [[460, "polars-series-take-every"]], "polars.Series.tan": [[461, "polars-series-tan"]], "polars.Series.tanh": [[462, "polars-series-tanh"]], "polars.Series.time_unit": [[463, "polars-series-time-unit"]], "polars.Series.to_arrow": [[464, "polars-series-to-arrow"]], "polars.Series.to_dummies": [[465, "polars-series-to-dummies"]], "polars.Series.to_frame": [[466, "polars-series-to-frame"]], "polars.Series.to_list": [[467, "polars-series-to-list"]], "polars.Series.to_numpy": [[468, "polars-series-to-numpy"]], "polars.Series.to_pandas": [[469, "polars-series-to-pandas"]], "polars.Series.to_physical": [[470, "polars-series-to-physical"]], "polars.Series.top_k": [[471, "polars-series-top-k"]], "polars.Series.unique": [[472, "polars-series-unique"]], "polars.Series.unique_counts": [[473, "polars-series-unique-counts"]], "polars.Series.value_counts": [[474, "polars-series-value-counts"]], "polars.Series.var": [[475, "polars-series-var"]], "polars.Series.view": [[476, "polars-series-view"]], "polars.Series.zip_with": [[477, "polars-series-zip-with"]], "polars.StringCache": [[478, "polars-stringcache"]], "polars.all": [[479, "polars-all"]], "polars.any": [[480, "polars-any"]], "polars.apply": [[481, "polars-apply"]], "polars.arange": [[482, "polars-arange"]], "polars.arg_where": [[483, "polars-arg-where"]], "polars.argsort_by": [[484, "polars-argsort-by"]], "polars.avg": [[485, "polars-avg"]], "polars.coalesce": [[486, "polars-coalesce"]], "polars.col": [[487, "polars-col"]], "polars.collect_all": [[488, "polars-collect-all"]], "polars.concat": [[489, "polars-concat"]], "polars.concat_list": [[490, "polars-concat-list"]], "polars.concat_str": [[491, "polars-concat-str"]], "polars.count": [[492, "polars-count"]], "polars.cov": [[493, "polars-cov"]], "polars.cumfold": [[494, "polars-cumfold"]], "polars.cumsum": [[495, "polars-cumsum"]], "polars.cut": [[496, "polars-cut"]], "polars.datatypes.Binary": [[497, "polars-datatypes-binary"]], "polars.datatypes.Boolean": [[498, "polars-datatypes-boolean"]], "polars.datatypes.Categorical": [[499, "polars-datatypes-categorical"]], "polars.datatypes.DataType": [[500, "polars-datatypes-datatype"]], "polars.datatypes.Date": [[501, "polars-datatypes-date"]], "polars.datatypes.Datetime": [[502, "polars-datatypes-datetime"]], "polars.datatypes.Duration": [[503, "polars-datatypes-duration"]], "polars.datatypes.Float32": [[504, "polars-datatypes-float32"]], "polars.datatypes.Float64": [[505, "polars-datatypes-float64"]], "polars.datatypes.Int16": [[506, "polars-datatypes-int16"]], "polars.datatypes.Int32": [[507, "polars-datatypes-int32"]], "polars.datatypes.Int64": [[508, "polars-datatypes-int64"]], "polars.datatypes.Int8": [[509, "polars-datatypes-int8"]], "polars.datatypes.List": [[510, "polars-datatypes-list"]], "polars.datatypes.Null": [[511, "polars-datatypes-null"]], "polars.datatypes.Object": [[512, "polars-datatypes-object"]], "polars.datatypes.Struct": [[513, "polars-datatypes-struct"]], "polars.datatypes.Time": [[514, "polars-datatypes-time"]], "polars.datatypes.UInt16": [[515, "polars-datatypes-uint16"]], "polars.datatypes.UInt32": [[516, "polars-datatypes-uint32"]], "polars.datatypes.UInt64": [[517, "polars-datatypes-uint64"]], "polars.datatypes.UInt8": [[518, "polars-datatypes-uint8"]], "polars.datatypes.Unknown": [[519, "polars-datatypes-unknown"]], "polars.datatypes.Utf8": [[520, "polars-datatypes-utf8"]], "polars.datatypes.get_idx_type": [[521, "polars-datatypes-get-idx-type"]], "polars.date": [[522, "polars-date"]], "polars.date_range": [[523, "polars-date-range"]], "polars.datetime": [[524, "polars-datetime"]], "polars.duration": [[525, "polars-duration"]], "polars.element": [[526, "polars-element"]], "polars.exceptions.ArrowError": [[527, "polars-exceptions-arrowerror"]], "polars.exceptions.ComputeError": [[528, "polars-exceptions-computeerror"]], "polars.exceptions.DuplicateError": [[529, "polars-exceptions-duplicateerror"]], "polars.exceptions.InvalidOperationError": [[530, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.NoDataError": [[531, "polars-exceptions-nodataerror"]], "polars.exceptions.NoRowsReturned": [[532, "polars-exceptions-norowsreturned"]], "polars.exceptions.NotFoundError": [[533, "polars-exceptions-notfounderror"]], "polars.exceptions.PanicException": [[534, "polars-exceptions-panicexception"]], "polars.exceptions.RowsException": [[535, "polars-exceptions-rowsexception"]], "polars.exceptions.SchemaError": [[536, "polars-exceptions-schemaerror"]], "polars.exceptions.ShapeError": [[537, "polars-exceptions-shapeerror"]], "polars.exceptions.TooManyRowsReturned": [[538, "polars-exceptions-toomanyrowsreturned"]], "polars.exclude": [[539, "polars-exclude"]], "polars.first": [[540, "polars-first"]], "polars.fold": [[541, "polars-fold"]], "polars.format": [[542, "polars-format"]], "polars.from_arrow": [[543, "polars-from-arrow"]], "polars.from_dict": [[544, "polars-from-dict"]], "polars.from_dicts": [[545, "polars-from-dicts"]], "polars.from_numpy": [[546, "polars-from-numpy"]], "polars.from_pandas": [[547, "polars-from-pandas"]], "polars.from_records": [[548, "polars-from-records"]], "polars.get_dummies": [[549, "polars-get-dummies"]], "polars.groups": [[550, "polars-groups"]], "polars.head": [[551, "polars-head"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[552, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[553, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.internals.dataframe.groupby.GroupBy.agg_list": [[554, "polars-internals-dataframe-groupby-groupby-agg-list"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[555, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.internals.dataframe.groupby.GroupBy.count": [[556, "polars-internals-dataframe-groupby-groupby-count"]], "polars.internals.dataframe.groupby.GroupBy.first": [[557, "polars-internals-dataframe-groupby-groupby-first"]], "polars.internals.dataframe.groupby.GroupBy.head": [[558, "polars-internals-dataframe-groupby-groupby-head"]], "polars.internals.dataframe.groupby.GroupBy.last": [[559, "polars-internals-dataframe-groupby-groupby-last"]], "polars.internals.dataframe.groupby.GroupBy.max": [[560, "polars-internals-dataframe-groupby-groupby-max"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[561, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.internals.dataframe.groupby.GroupBy.median": [[562, "polars-internals-dataframe-groupby-groupby-median"]], "polars.internals.dataframe.groupby.GroupBy.min": [[563, "polars-internals-dataframe-groupby-groupby-min"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[564, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.internals.dataframe.groupby.GroupBy.pivot": [[565, "polars-internals-dataframe-groupby-groupby-pivot"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[566, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[567, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[568, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.internals.dataframe.pivot.PivotOps.count": [[569, "polars-internals-dataframe-pivot-pivotops-count"]], "polars.internals.dataframe.pivot.PivotOps.first": [[570, "polars-internals-dataframe-pivot-pivotops-first"]], "polars.internals.dataframe.pivot.PivotOps.last": [[571, "polars-internals-dataframe-pivot-pivotops-last"]], "polars.internals.dataframe.pivot.PivotOps.max": [[572, "polars-internals-dataframe-pivot-pivotops-max"]], "polars.internals.dataframe.pivot.PivotOps.mean": [[573, "polars-internals-dataframe-pivot-pivotops-mean"]], "polars.internals.dataframe.pivot.PivotOps.median": [[574, "polars-internals-dataframe-pivot-pivotops-median"]], "polars.internals.dataframe.pivot.PivotOps.min": [[575, "polars-internals-dataframe-pivot-pivotops-min"]], "polars.internals.dataframe.pivot.PivotOps.sum": [[576, "polars-internals-dataframe-pivot-pivotops-sum"]], "polars.internals.expr.categorical.ExprCatNameSpace.set_ordering": [[577, "polars-internals-expr-categorical-exprcatnamespace-set-ordering"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit": [[578, "polars-internals-expr-datetime-exprdatetimenamespace-cast-time-unit"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_zone": [[579, "polars-internals-expr-datetime-exprdatetimenamespace-cast-time-zone"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.day": [[580, "polars-internals-expr-datetime-exprdatetimenamespace-day"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.days": [[581, "polars-internals-expr-datetime-exprdatetimenamespace-days"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch": [[582, "polars-internals-expr-datetime-exprdatetimenamespace-epoch"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.hour": [[583, "polars-internals-expr-datetime-exprdatetimenamespace-hour"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.hours": [[584, "polars-internals-expr-datetime-exprdatetimenamespace-hours"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year": [[585, "polars-internals-expr-datetime-exprdatetimenamespace-iso-year"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond": [[586, "polars-internals-expr-datetime-exprdatetimenamespace-microsecond"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds": [[587, "polars-internals-expr-datetime-exprdatetimenamespace-microseconds"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond": [[588, "polars-internals-expr-datetime-exprdatetimenamespace-millisecond"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds": [[589, "polars-internals-expr-datetime-exprdatetimenamespace-milliseconds"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.minute": [[590, "polars-internals-expr-datetime-exprdatetimenamespace-minute"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes": [[591, "polars-internals-expr-datetime-exprdatetimenamespace-minutes"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.month": [[592, "polars-internals-expr-datetime-exprdatetimenamespace-month"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond": [[593, "polars-internals-expr-datetime-exprdatetimenamespace-nanosecond"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds": [[594, "polars-internals-expr-datetime-exprdatetimenamespace-nanoseconds"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by": [[595, "polars-internals-expr-datetime-exprdatetimenamespace-offset-by"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day": [[596, "polars-internals-expr-datetime-exprdatetimenamespace-ordinal-day"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter": [[597, "polars-internals-expr-datetime-exprdatetimenamespace-quarter"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.second": [[598, "polars-internals-expr-datetime-exprdatetimenamespace-second"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds": [[599, "polars-internals-expr-datetime-exprdatetimenamespace-seconds"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime": [[600, "polars-internals-expr-datetime-exprdatetimenamespace-strftime"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp": [[601, "polars-internals-expr-datetime-exprdatetimenamespace-timestamp"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate": [[602, "polars-internals-expr-datetime-exprdatetimenamespace-truncate"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.week": [[603, "polars-internals-expr-datetime-exprdatetimenamespace-week"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday": [[604, "polars-internals-expr-datetime-exprdatetimenamespace-weekday"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit": [[605, "polars-internals-expr-datetime-exprdatetimenamespace-with-time-unit"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.year": [[606, "polars-internals-expr-datetime-exprdatetimenamespace-year"]], "polars.internals.expr.list.ExprListNameSpace.arg_max": [[607, "polars-internals-expr-list-exprlistnamespace-arg-max"]], "polars.internals.expr.list.ExprListNameSpace.arg_min": [[608, "polars-internals-expr-list-exprlistnamespace-arg-min"]], "polars.internals.expr.list.ExprListNameSpace.concat": [[609, "polars-internals-expr-list-exprlistnamespace-concat"]], "polars.internals.expr.list.ExprListNameSpace.contains": [[610, "polars-internals-expr-list-exprlistnamespace-contains"]], "polars.internals.expr.list.ExprListNameSpace.diff": [[611, "polars-internals-expr-list-exprlistnamespace-diff"]], "polars.internals.expr.list.ExprListNameSpace.eval": [[612, "polars-internals-expr-list-exprlistnamespace-eval"]], "polars.internals.expr.list.ExprListNameSpace.first": [[613, "polars-internals-expr-list-exprlistnamespace-first"]], "polars.internals.expr.list.ExprListNameSpace.get": [[614, "polars-internals-expr-list-exprlistnamespace-get"]], "polars.internals.expr.list.ExprListNameSpace.head": [[615, "polars-internals-expr-list-exprlistnamespace-head"]], "polars.internals.expr.list.ExprListNameSpace.join": [[616, "polars-internals-expr-list-exprlistnamespace-join"]], "polars.internals.expr.list.ExprListNameSpace.last": [[617, "polars-internals-expr-list-exprlistnamespace-last"]], "polars.internals.expr.list.ExprListNameSpace.lengths": [[618, "polars-internals-expr-list-exprlistnamespace-lengths"]], "polars.internals.expr.list.ExprListNameSpace.max": [[619, "polars-internals-expr-list-exprlistnamespace-max"]], "polars.internals.expr.list.ExprListNameSpace.mean": [[620, "polars-internals-expr-list-exprlistnamespace-mean"]], "polars.internals.expr.list.ExprListNameSpace.min": [[621, "polars-internals-expr-list-exprlistnamespace-min"]], "polars.internals.expr.list.ExprListNameSpace.reverse": [[622, "polars-internals-expr-list-exprlistnamespace-reverse"]], "polars.internals.expr.list.ExprListNameSpace.shift": [[623, "polars-internals-expr-list-exprlistnamespace-shift"]], "polars.internals.expr.list.ExprListNameSpace.slice": [[624, "polars-internals-expr-list-exprlistnamespace-slice"]], "polars.internals.expr.list.ExprListNameSpace.sort": [[625, "polars-internals-expr-list-exprlistnamespace-sort"]], "polars.internals.expr.list.ExprListNameSpace.sum": [[626, "polars-internals-expr-list-exprlistnamespace-sum"]], "polars.internals.expr.list.ExprListNameSpace.tail": [[627, "polars-internals-expr-list-exprlistnamespace-tail"]], "polars.internals.expr.list.ExprListNameSpace.to_struct": [[628, "polars-internals-expr-list-exprlistnamespace-to-struct"]], "polars.internals.expr.list.ExprListNameSpace.unique": [[629, "polars-internals-expr-list-exprlistnamespace-unique"]], "polars.internals.expr.meta.ExprMetaNameSpace.output_name": [[630, "polars-internals-expr-meta-exprmetanamespace-output-name"]], "polars.internals.expr.meta.ExprMetaNameSpace.pop": [[631, "polars-internals-expr-meta-exprmetanamespace-pop"]], "polars.internals.expr.meta.ExprMetaNameSpace.root_names": [[632, "polars-internals-expr-meta-exprmetanamespace-root-names"]], "polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases": [[633, "polars-internals-expr-meta-exprmetanamespace-undo-aliases"]], "polars.internals.expr.string.ExprStringNameSpace.concat": [[634, "polars-internals-expr-string-exprstringnamespace-concat"]], "polars.internals.expr.string.ExprStringNameSpace.contains": [[635, "polars-internals-expr-string-exprstringnamespace-contains"]], "polars.internals.expr.string.ExprStringNameSpace.count_match": [[636, "polars-internals-expr-string-exprstringnamespace-count-match"]], "polars.internals.expr.string.ExprStringNameSpace.decode": [[637, "polars-internals-expr-string-exprstringnamespace-decode"]], "polars.internals.expr.string.ExprStringNameSpace.encode": [[638, "polars-internals-expr-string-exprstringnamespace-encode"]], "polars.internals.expr.string.ExprStringNameSpace.ends_with": [[639, "polars-internals-expr-string-exprstringnamespace-ends-with"]], "polars.internals.expr.string.ExprStringNameSpace.extract": [[640, "polars-internals-expr-string-exprstringnamespace-extract"]], "polars.internals.expr.string.ExprStringNameSpace.extract_all": [[641, "polars-internals-expr-string-exprstringnamespace-extract-all"]], "polars.internals.expr.string.ExprStringNameSpace.json_path_match": [[642, "polars-internals-expr-string-exprstringnamespace-json-path-match"]], "polars.internals.expr.string.ExprStringNameSpace.lengths": [[643, "polars-internals-expr-string-exprstringnamespace-lengths"]], "polars.internals.expr.string.ExprStringNameSpace.ljust": [[644, "polars-internals-expr-string-exprstringnamespace-ljust"]], "polars.internals.expr.string.ExprStringNameSpace.lstrip": [[645, "polars-internals-expr-string-exprstringnamespace-lstrip"]], "polars.internals.expr.string.ExprStringNameSpace.replace": [[646, "polars-internals-expr-string-exprstringnamespace-replace"]], "polars.internals.expr.string.ExprStringNameSpace.replace_all": [[647, "polars-internals-expr-string-exprstringnamespace-replace-all"]], "polars.internals.expr.string.ExprStringNameSpace.rjust": [[648, "polars-internals-expr-string-exprstringnamespace-rjust"]], "polars.internals.expr.string.ExprStringNameSpace.rstrip": [[649, "polars-internals-expr-string-exprstringnamespace-rstrip"]], "polars.internals.expr.string.ExprStringNameSpace.slice": [[650, "polars-internals-expr-string-exprstringnamespace-slice"]], "polars.internals.expr.string.ExprStringNameSpace.split": [[651, "polars-internals-expr-string-exprstringnamespace-split"]], "polars.internals.expr.string.ExprStringNameSpace.split_exact": [[652, "polars-internals-expr-string-exprstringnamespace-split-exact"]], "polars.internals.expr.string.ExprStringNameSpace.splitn": [[653, "polars-internals-expr-string-exprstringnamespace-splitn"]], "polars.internals.expr.string.ExprStringNameSpace.starts_with": [[654, "polars-internals-expr-string-exprstringnamespace-starts-with"]], "polars.internals.expr.string.ExprStringNameSpace.strip": [[655, "polars-internals-expr-string-exprstringnamespace-strip"]], "polars.internals.expr.string.ExprStringNameSpace.strptime": [[656, "polars-internals-expr-string-exprstringnamespace-strptime"]], "polars.internals.expr.string.ExprStringNameSpace.to_lowercase": [[657, "polars-internals-expr-string-exprstringnamespace-to-lowercase"]], "polars.internals.expr.string.ExprStringNameSpace.to_uppercase": [[658, "polars-internals-expr-string-exprstringnamespace-to-uppercase"]], "polars.internals.expr.string.ExprStringNameSpace.zfill": [[659, "polars-internals-expr-string-exprstringnamespace-zfill"]], "polars.internals.expr.struct.ExprStructNameSpace.field": [[660, "polars-internals-expr-struct-exprstructnamespace-field"]], "polars.internals.expr.struct.ExprStructNameSpace.rename_fields": [[661, "polars-internals-expr-struct-exprstructnamespace-rename-fields"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[662, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[663, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[664, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[665, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.internals.series.categorical.CatNameSpace.set_ordering": [[666, "polars-internals-series-categorical-catnamespace-set-ordering"]], "polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit": [[667, "polars-internals-series-datetime-datetimenamespace-cast-time-unit"]], "polars.internals.series.datetime.DateTimeNameSpace.cast_time_zone": [[668, "polars-internals-series-datetime-datetimenamespace-cast-time-zone"]], "polars.internals.series.datetime.DateTimeNameSpace.day": [[669, "polars-internals-series-datetime-datetimenamespace-day"]], "polars.internals.series.datetime.DateTimeNameSpace.days": [[670, "polars-internals-series-datetime-datetimenamespace-days"]], "polars.internals.series.datetime.DateTimeNameSpace.epoch": [[671, "polars-internals-series-datetime-datetimenamespace-epoch"]], "polars.internals.series.datetime.DateTimeNameSpace.hour": [[672, "polars-internals-series-datetime-datetimenamespace-hour"]], "polars.internals.series.datetime.DateTimeNameSpace.hours": [[673, "polars-internals-series-datetime-datetimenamespace-hours"]], "polars.internals.series.datetime.DateTimeNameSpace.iso_year": [[674, "polars-internals-series-datetime-datetimenamespace-iso-year"]], "polars.internals.series.datetime.DateTimeNameSpace.max": [[675, "polars-internals-series-datetime-datetimenamespace-max"]], "polars.internals.series.datetime.DateTimeNameSpace.mean": [[676, "polars-internals-series-datetime-datetimenamespace-mean"]], "polars.internals.series.datetime.DateTimeNameSpace.median": [[677, "polars-internals-series-datetime-datetimenamespace-median"]], "polars.internals.series.datetime.DateTimeNameSpace.microsecond": [[678, "polars-internals-series-datetime-datetimenamespace-microsecond"]], "polars.internals.series.datetime.DateTimeNameSpace.microseconds": [[679, "polars-internals-series-datetime-datetimenamespace-microseconds"]], "polars.internals.series.datetime.DateTimeNameSpace.millisecond": [[680, "polars-internals-series-datetime-datetimenamespace-millisecond"]], "polars.internals.series.datetime.DateTimeNameSpace.milliseconds": [[681, "polars-internals-series-datetime-datetimenamespace-milliseconds"]], "polars.internals.series.datetime.DateTimeNameSpace.min": [[682, "polars-internals-series-datetime-datetimenamespace-min"]], "polars.internals.series.datetime.DateTimeNameSpace.minute": [[683, "polars-internals-series-datetime-datetimenamespace-minute"]], "polars.internals.series.datetime.DateTimeNameSpace.minutes": [[684, "polars-internals-series-datetime-datetimenamespace-minutes"]], "polars.internals.series.datetime.DateTimeNameSpace.month": [[685, "polars-internals-series-datetime-datetimenamespace-month"]], "polars.internals.series.datetime.DateTimeNameSpace.nanosecond": [[686, "polars-internals-series-datetime-datetimenamespace-nanosecond"]], "polars.internals.series.datetime.DateTimeNameSpace.nanoseconds": [[687, "polars-internals-series-datetime-datetimenamespace-nanoseconds"]], "polars.internals.series.datetime.DateTimeNameSpace.offset_by": [[688, "polars-internals-series-datetime-datetimenamespace-offset-by"]], "polars.internals.series.datetime.DateTimeNameSpace.ordinal_day": [[689, "polars-internals-series-datetime-datetimenamespace-ordinal-day"]], "polars.internals.series.datetime.DateTimeNameSpace.quarter": [[690, "polars-internals-series-datetime-datetimenamespace-quarter"]], "polars.internals.series.datetime.DateTimeNameSpace.second": [[691, "polars-internals-series-datetime-datetimenamespace-second"]], "polars.internals.series.datetime.DateTimeNameSpace.seconds": [[692, "polars-internals-series-datetime-datetimenamespace-seconds"]], "polars.internals.series.datetime.DateTimeNameSpace.strftime": [[693, "polars-internals-series-datetime-datetimenamespace-strftime"]], "polars.internals.series.datetime.DateTimeNameSpace.timestamp": [[694, "polars-internals-series-datetime-datetimenamespace-timestamp"]], "polars.internals.series.datetime.DateTimeNameSpace.truncate": [[695, "polars-internals-series-datetime-datetimenamespace-truncate"]], "polars.internals.series.datetime.DateTimeNameSpace.week": [[696, "polars-internals-series-datetime-datetimenamespace-week"]], "polars.internals.series.datetime.DateTimeNameSpace.weekday": [[697, "polars-internals-series-datetime-datetimenamespace-weekday"]], "polars.internals.series.datetime.DateTimeNameSpace.with_time_unit": [[698, "polars-internals-series-datetime-datetimenamespace-with-time-unit"]], "polars.internals.series.datetime.DateTimeNameSpace.year": [[699, "polars-internals-series-datetime-datetimenamespace-year"]], "polars.internals.series.list.ListNameSpace.arg_max": [[700, "polars-internals-series-list-listnamespace-arg-max"]], "polars.internals.series.list.ListNameSpace.arg_min": [[701, "polars-internals-series-list-listnamespace-arg-min"]], "polars.internals.series.list.ListNameSpace.concat": [[702, "polars-internals-series-list-listnamespace-concat"]], "polars.internals.series.list.ListNameSpace.contains": [[703, "polars-internals-series-list-listnamespace-contains"]], "polars.internals.series.list.ListNameSpace.diff": [[704, "polars-internals-series-list-listnamespace-diff"]], "polars.internals.series.list.ListNameSpace.eval": [[705, "polars-internals-series-list-listnamespace-eval"]], "polars.internals.series.list.ListNameSpace.first": [[706, "polars-internals-series-list-listnamespace-first"]], "polars.internals.series.list.ListNameSpace.get": [[707, "polars-internals-series-list-listnamespace-get"]], "polars.internals.series.list.ListNameSpace.head": [[708, "polars-internals-series-list-listnamespace-head"]], "polars.internals.series.list.ListNameSpace.join": [[709, "polars-internals-series-list-listnamespace-join"]], "polars.internals.series.list.ListNameSpace.last": [[710, "polars-internals-series-list-listnamespace-last"]], "polars.internals.series.list.ListNameSpace.lengths": [[711, "polars-internals-series-list-listnamespace-lengths"]], "polars.internals.series.list.ListNameSpace.max": [[712, "polars-internals-series-list-listnamespace-max"]], "polars.internals.series.list.ListNameSpace.mean": [[713, "polars-internals-series-list-listnamespace-mean"]], "polars.internals.series.list.ListNameSpace.min": [[714, "polars-internals-series-list-listnamespace-min"]], "polars.internals.series.list.ListNameSpace.reverse": [[715, "polars-internals-series-list-listnamespace-reverse"]], "polars.internals.series.list.ListNameSpace.shift": [[716, "polars-internals-series-list-listnamespace-shift"]], "polars.internals.series.list.ListNameSpace.slice": [[717, "polars-internals-series-list-listnamespace-slice"]], "polars.internals.series.list.ListNameSpace.sort": [[718, "polars-internals-series-list-listnamespace-sort"]], "polars.internals.series.list.ListNameSpace.sum": [[719, "polars-internals-series-list-listnamespace-sum"]], "polars.internals.series.list.ListNameSpace.tail": [[720, "polars-internals-series-list-listnamespace-tail"]], "polars.internals.series.list.ListNameSpace.unique": [[721, "polars-internals-series-list-listnamespace-unique"]], "polars.internals.series.string.StringNameSpace.concat": [[722, "polars-internals-series-string-stringnamespace-concat"]], "polars.internals.series.string.StringNameSpace.contains": [[723, "polars-internals-series-string-stringnamespace-contains"]], "polars.internals.series.string.StringNameSpace.count_match": [[724, "polars-internals-series-string-stringnamespace-count-match"]], "polars.internals.series.string.StringNameSpace.decode": [[725, "polars-internals-series-string-stringnamespace-decode"]], "polars.internals.series.string.StringNameSpace.encode": [[726, "polars-internals-series-string-stringnamespace-encode"]], "polars.internals.series.string.StringNameSpace.ends_with": [[727, "polars-internals-series-string-stringnamespace-ends-with"]], "polars.internals.series.string.StringNameSpace.extract": [[728, "polars-internals-series-string-stringnamespace-extract"]], "polars.internals.series.string.StringNameSpace.extract_all": [[729, "polars-internals-series-string-stringnamespace-extract-all"]], "polars.internals.series.string.StringNameSpace.json_path_match": [[730, "polars-internals-series-string-stringnamespace-json-path-match"]], "polars.internals.series.string.StringNameSpace.lengths": [[731, "polars-internals-series-string-stringnamespace-lengths"]], "polars.internals.series.string.StringNameSpace.ljust": [[732, "polars-internals-series-string-stringnamespace-ljust"]], "polars.internals.series.string.StringNameSpace.lstrip": [[733, "polars-internals-series-string-stringnamespace-lstrip"]], "polars.internals.series.string.StringNameSpace.replace": [[734, "polars-internals-series-string-stringnamespace-replace"]], "polars.internals.series.string.StringNameSpace.replace_all": [[735, "polars-internals-series-string-stringnamespace-replace-all"]], "polars.internals.series.string.StringNameSpace.rjust": [[736, "polars-internals-series-string-stringnamespace-rjust"]], "polars.internals.series.string.StringNameSpace.rstrip": [[737, "polars-internals-series-string-stringnamespace-rstrip"]], "polars.internals.series.string.StringNameSpace.slice": [[738, "polars-internals-series-string-stringnamespace-slice"]], "polars.internals.series.string.StringNameSpace.split": [[739, "polars-internals-series-string-stringnamespace-split"]], "polars.internals.series.string.StringNameSpace.split_exact": [[740, "polars-internals-series-string-stringnamespace-split-exact"]], "polars.internals.series.string.StringNameSpace.splitn": [[741, "polars-internals-series-string-stringnamespace-splitn"]], "polars.internals.series.string.StringNameSpace.starts_with": [[742, "polars-internals-series-string-stringnamespace-starts-with"]], "polars.internals.series.string.StringNameSpace.strip": [[743, "polars-internals-series-string-stringnamespace-strip"]], "polars.internals.series.string.StringNameSpace.strptime": [[744, "polars-internals-series-string-stringnamespace-strptime"]], "polars.internals.series.string.StringNameSpace.to_lowercase": [[745, "polars-internals-series-string-stringnamespace-to-lowercase"]], "polars.internals.series.string.StringNameSpace.to_uppercase": [[746, "polars-internals-series-string-stringnamespace-to-uppercase"]], "polars.internals.series.string.StringNameSpace.zfill": [[747, "polars-internals-series-string-stringnamespace-zfill"]], "polars.internals.series.struct.StructNameSpace.field": [[748, "polars-internals-series-struct-structnamespace-field"]], "polars.internals.series.struct.StructNameSpace.fields": [[749, "polars-internals-series-struct-structnamespace-fields"]], "polars.internals.series.struct.StructNameSpace.rename_fields": [[750, "polars-internals-series-struct-structnamespace-rename-fields"]], "polars.internals.series.struct.StructNameSpace.to_frame": [[751, "polars-internals-series-struct-structnamespace-to-frame"]], "polars.list": [[752, "polars-list"]], "polars.lit": [[753, "polars-lit"]], "polars.map": [[754, "polars-map"]], "polars.max": [[755, "polars-max"]], "polars.mean": [[756, "polars-mean"]], "polars.median": [[757, "polars-median"]], "polars.min": [[758, "polars-min"]], "polars.n_unique": [[759, "polars-n-unique"]], "polars.pearson_corr": [[760, "polars-pearson-corr"]], "polars.quantile": [[761, "polars-quantile"]], "polars.read_avro": [[762, "polars-read-avro"]], "polars.read_csv": [[763, "polars-read-csv"]], "polars.read_csv_batched": [[764, "polars-read-csv-batched"]], "polars.read_excel": [[765, "polars-read-excel"]], "polars.read_ipc": [[766, "polars-read-ipc"]], "polars.read_ipc_schema": [[767, "polars-read-ipc-schema"]], "polars.read_json": [[768, "polars-read-json"]], "polars.read_ndjson": [[769, "polars-read-ndjson"]], "polars.read_parquet": [[770, "polars-read-parquet"]], "polars.read_parquet_schema": [[771, "polars-read-parquet-schema"]], "polars.read_sql": [[772, "polars-read-sql"]], "polars.repeat": [[773, "polars-repeat"]], "polars.scan_csv": [[774, "polars-scan-csv"]], "polars.scan_ds": [[775, "polars-scan-ds"]], "polars.scan_ipc": [[776, "polars-scan-ipc"]], "polars.scan_ndjson": [[777, "polars-scan-ndjson"]], "polars.scan_parquet": [[778, "polars-scan-parquet"]], "polars.select": [[779, "polars-select"]], "polars.show_versions": [[780, "polars-show-versions"]], "polars.spearman_rank_corr": [[781, "polars-spearman-rank-corr"]], "polars.std": [[782, "polars-std"]], "polars.struct": [[783, "polars-struct"]], "polars.sum": [[784, "polars-sum"]], "polars.tail": [[785, "polars-tail"]], "polars.testing.assert_frame_equal": [[786, "polars-testing-assert-frame-equal"]], "polars.testing.assert_series_equal": [[787, "polars-testing-assert-series-equal"]], "polars.testing.column": [[788, "polars-testing-column"]], "polars.testing.columns": [[789, "polars-testing-columns"]], "polars.testing.dataframes": [[790, "polars-testing-dataframes"]], "polars.testing.series": [[791, "polars-testing-series"]], "polars.threadpool_size": [[792, "polars-threadpool-size"]], "polars.toggle_string_cache": [[793, "polars-toggle-string-cache"]], "polars.var": [[794, "polars-var"]], "polars.when": [[795, "polars-when"]], "Config": [[796, "config"], [801, "config"]], "Config options (set/unset)": [[796, "config-options-set-unset"]], "Config load, save, and current state": [[796, "config-load-save-and-current-state"]], "DataFrame": [[797, "dataframe"]], "Constructor": [[797, "constructor"], [800, "constructor"], [805, "constructor"]], "Attributes": [[797, "attributes"], [800, "attributes"], [804, "attributes"], [805, "attributes"]], "Conversion": [[797, "conversion"], [801, "conversion"], [804, "conversion"], [805, "conversion"]], "Aggregation": [[797, "aggregation"], [800, "aggregation"], [804, "aggregation"], [805, "aggregation"]], "Descriptive stats": [[797, "descriptive-stats"], [804, "descriptive-stats"], [805, "descriptive-stats"]], "Computations": [[797, "computations"], [800, "computations"], [805, "computations"]], "Manipulation/ selection": [[797, "manipulation-selection"], [800, "manipulation-selection"], [804, "manipulation-selection"], [805, "manipulation-selection"]], "Apply": [[797, "apply"], [800, "apply"], [804, "apply"]], "Various": [[797, "various"], [800, "various"], [804, "various"], [805, "various"]], "GroupBy": [[797, "groupby"], [804, "groupby"]], "Pivot": [[797, "pivot"]], "Data Types": [[798, "data-types"]], "Numeric": [[798, "numeric"]], "Date / Time": [[798, "date-time"]], "Nested": [[798, "nested"]], "Other": [[798, "other"]], "Functions": [[798, "functions"], [800, "functions"], [801, "functions"]], "Exceptions": [[799, "exceptions"]], "Expressions": [[800, "expressions"]], "Boolean": [[800, "boolean"], [805, "boolean"]], "Column names": [[800, "column-names"]], "Window": [[800, "window"]], "TimeSeries": [[800, "timeseries"], [805, "timeseries"]], "Strings": [[800, "strings"], [805, "strings"]], "Lists": [[800, "lists"], [805, "lists"]], "Categories": [[800, "categories"], [805, "categories"]], "Struct": [[800, "struct"], [805, "struct"]], "Meta": [[800, "meta"]], "Eager/Lazy functions": [[801, "eager-lazy-functions"]], "Parallelization": [[801, "parallelization"]], "API reference": [[802, "api-reference"]], "Input/output": [[803, "input-output"]], "CSV": [[803, "csv"]], "Feather/ IPC": [[803, "feather-ipc"]], "Parquet": [[803, "parquet"]], "SQL": [[803, "sql"], [806, "sql"]], "JSON": [[803, "json"]], "AVRO": [[803, "avro"]], "Excel": [[803, "excel"]], "Datasets": [[803, "datasets"]], "BatchedCsvReader": [[803, "batchedcsvreader"]], "LazyFrame": [[804, "lazyframe"]], "Series": [[805, "series"]], "Methods": [[806, "methods"]], "Testing": [[807, "testing"]], "Asserts": [[807, "asserts"]], "Property-based testing": [[807, "property-based-testing"]], "Strategies": [[807, "strategies"]], "Strategy helpers": [[807, "strategy-helpers"]], "Utils": [[808, "utils"]]}, "indexentries": {"load() (polars.config class method)": [[1, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[2, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[3, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[4, "polars.Config.set_ascii_tables"]], "set_fmt_str_lengths() (polars.config class method)": [[5, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[6, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_change_column_data_type_position_format() (polars.config class method)": [[7, "polars.Config.set_tbl_change_column_data_type_position_format"]], "set_tbl_cols() (polars.config class method)": [[8, "polars.Config.set_tbl_cols"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[9, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[10, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[11, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[12, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_column_separator() (polars.config class method)": [[13, "polars.Config.set_tbl_hide_column_separator"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[14, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_rows() (polars.config class method)": [[15, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[16, "polars.Config.set_tbl_width_chars"]], "set_utf8_tables() (polars.config class method)": [[17, "polars.Config.set_utf8_tables"]], "set_verbose() (polars.config class method)": [[18, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[19, "polars.Config.state"]], "dataframe (class in polars)": [[20, "polars.DataFrame"]], "__init__() (polars.dataframe method)": [[20, "polars.DataFrame.__init__"]], "apply() (polars.dataframe method)": [[21, "polars.DataFrame.apply"]], "cleared() (polars.dataframe method)": [[22, "polars.DataFrame.cleared"]], "clone() (polars.dataframe method)": [[23, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[24, "polars.DataFrame.columns"]], "describe() (polars.dataframe method)": [[25, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[26, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[27, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[28, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[29, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[30, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[31, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[32, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[33, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[34, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[35, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[36, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[37, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[38, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[39, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[40, "polars.DataFrame.get_columns"]], "groupby() (polars.dataframe method)": [[41, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[42, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[43, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[44, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[45, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[46, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[47, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[48, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[49, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[50, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[51, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[52, "polars.DataFrame.is_unique"]], "join() (polars.dataframe method)": [[53, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[54, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[55, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[56, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[57, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[58, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[59, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[60, "polars.DataFrame.melt"]], "min() (polars.dataframe method)": [[61, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[62, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[63, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[64, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[65, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[66, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[67, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[68, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[69, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[70, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[71, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[72, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[73, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[74, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[75, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[76, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[77, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[78, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[79, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[80, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[81, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[82, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[83, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[84, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[85, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[86, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[87, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[88, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[89, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[90, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[91, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[92, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[93, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[94, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[95, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[96, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[97, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[98, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[99, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[100, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[101, "polars.DataFrame.unstack"]], "upsample() (polars.dataframe method)": [[102, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[103, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[104, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[105, "polars.DataFrame.width"]], "with_column() (polars.dataframe method)": [[106, "polars.DataFrame.with_column"]], "with_columns() (polars.dataframe method)": [[107, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[108, "polars.DataFrame.with_row_count"]], "write_avro() (polars.dataframe method)": [[109, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[110, "polars.DataFrame.write_csv"]], "write_ipc() (polars.dataframe method)": [[111, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[112, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[113, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[114, "polars.DataFrame.write_parquet"]], "expr (class in polars)": [[115, "polars.Expr"]], "__init__() (polars.expr method)": [[115, "polars.Expr.__init__"]], "abs() (polars.expr method)": [[116, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[117, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[118, "polars.Expr.alias"]], "all() (polars.expr method)": [[119, "polars.Expr.all"]], "any() (polars.expr method)": [[120, "polars.Expr.any"]], "append() (polars.expr method)": [[121, "polars.Expr.append"]], "apply() (polars.expr method)": [[122, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[123, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[124, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[125, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[126, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[127, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[128, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[129, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[130, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[131, "polars.Expr.arg_sort"]], "arg_unique() (polars.expr method)": [[132, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[133, "polars.Expr.argsort"]], "arr (polars.expr property)": [[134, "polars.Expr.arr"]], "backward_fill() (polars.expr method)": [[135, "polars.Expr.backward_fill"]], "cast() (polars.expr method)": [[136, "polars.Expr.cast"]], "cat (polars.expr property)": [[137, "polars.Expr.cat"]], "ceil() (polars.expr method)": [[138, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[139, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[140, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[141, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[142, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[143, "polars.Expr.cosh"]], "count() (polars.expr method)": [[144, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[145, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[146, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[147, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[148, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[149, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[150, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[151, "polars.Expr.diff"]], "dot() (polars.expr method)": [[152, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[153, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[154, "polars.Expr.drop_nulls"]], "dt (polars.expr property)": [[155, "polars.Expr.dt"]], "entropy() (polars.expr method)": [[156, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[157, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[158, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[159, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[160, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[161, "polars.Expr.exp"]], "explode() (polars.expr method)": [[162, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[163, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[164, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[165, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[166, "polars.Expr.filter"]], "first() (polars.expr method)": [[167, "polars.Expr.first"]], "flatten() (polars.expr method)": [[168, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[169, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[170, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[171, "polars.Expr.hash"]], "head() (polars.expr method)": [[172, "polars.Expr.head"]], "inspect() (polars.expr method)": [[173, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[174, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[175, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[176, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[177, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[178, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[179, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[180, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[181, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[182, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[183, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[184, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[185, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[186, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[187, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[188, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[189, "polars.Expr.last"]], "len() (polars.expr method)": [[190, "polars.Expr.len"]], "limit() (polars.expr method)": [[191, "polars.Expr.limit"]], "list() (polars.expr method)": [[192, "polars.Expr.list"]], "log() (polars.expr method)": [[193, "polars.Expr.log"]], "log10() (polars.expr method)": [[194, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[195, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[196, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[197, "polars.Expr.map_alias"]], "max() (polars.expr method)": [[198, "polars.Expr.max"]], "mean() (polars.expr method)": [[199, "polars.Expr.mean"]], "median() (polars.expr method)": [[200, "polars.Expr.median"]], "min() (polars.expr method)": [[201, "polars.Expr.min"]], "mode() (polars.expr method)": [[202, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[203, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[204, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[205, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[206, "polars.Expr.null_count"]], "over() (polars.expr method)": [[207, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[208, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[209, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[210, "polars.Expr.prefix"]], "product() (polars.expr method)": [[211, "polars.Expr.product"]], "quantile() (polars.expr method)": [[212, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[213, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[214, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[215, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[216, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[217, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[218, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[219, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[220, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[221, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[222, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[223, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[224, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[225, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[226, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[227, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[228, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[229, "polars.Expr.round"]], "sample() (polars.expr method)": [[230, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[231, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[232, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[233, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[234, "polars.Expr.shift_and_fill"]], "shuffle() (polars.expr method)": [[235, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[236, "polars.Expr.sign"]], "sin() (polars.expr method)": [[237, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[238, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[239, "polars.Expr.skew"]], "slice() (polars.expr method)": [[240, "polars.Expr.slice"]], "sort() (polars.expr method)": [[241, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[242, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[243, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[244, "polars.Expr.std"]], "str (polars.expr property)": [[245, "polars.Expr.str"]], "suffix() (polars.expr method)": [[246, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[247, "polars.Expr.sum"]], "tail() (polars.expr method)": [[248, "polars.Expr.tail"]], "take() (polars.expr method)": [[249, "polars.Expr.take"]], "take_every() (polars.expr method)": [[250, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[251, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[252, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[253, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[254, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[255, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[256, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[257, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[258, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[259, "polars.Expr.var"]], "where() (polars.expr method)": [[260, "polars.Expr.where"]], "cache() (polars.lazyframe method)": [[261, "polars.LazyFrame.cache"]], "cleared() (polars.lazyframe method)": [[262, "polars.LazyFrame.cleared"]], "clone() (polars.lazyframe method)": [[263, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[264, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[265, "polars.LazyFrame.columns"]], "describe_optimized_plan() (polars.lazyframe method)": [[266, "polars.LazyFrame.describe_optimized_plan"]], "describe_plan() (polars.lazyframe method)": [[267, "polars.LazyFrame.describe_plan"]], "drop() (polars.lazyframe method)": [[268, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[269, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[270, "polars.LazyFrame.dtypes"]], "explode() (polars.lazyframe method)": [[271, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[272, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[273, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[274, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[275, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[276, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[277, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[278, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[279, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[280, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[281, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[282, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[283, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[284, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[285, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[286, "polars.LazyFrame.last"]], "limit() (polars.lazyframe method)": [[287, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[288, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[289, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[290, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[291, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[292, "polars.LazyFrame.melt"]], "min() (polars.lazyframe method)": [[293, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[294, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[295, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[296, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[297, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[298, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[299, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[300, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[301, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[302, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[303, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[304, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[305, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[306, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[307, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[308, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[309, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[310, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[311, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[312, "polars.LazyFrame.unnest"]], "var() (polars.lazyframe method)": [[313, "polars.LazyFrame.var"]], "with_column() (polars.lazyframe method)": [[314, "polars.LazyFrame.with_column"]], "with_columns() (polars.lazyframe method)": [[315, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[316, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[317, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[318, "polars.LazyFrame.write_json"]], "execute() (polars.sqlcontext method)": [[319, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[320, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[321, "polars.SQLContext.register"]], "series (class in polars)": [[322, "polars.Series"]], "__init__() (polars.series method)": [[322, "polars.Series.__init__"]], "abs() (polars.series method)": [[323, "polars.Series.abs"]], "alias() (polars.series method)": [[324, "polars.Series.alias"]], "all() (polars.series method)": [[325, "polars.Series.all"]], "any() (polars.series method)": [[326, "polars.Series.any"]], "append() (polars.series method)": [[327, "polars.Series.append"]], "apply() (polars.series method)": [[328, "polars.Series.apply"]], "arccos() (polars.series method)": [[329, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[330, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[331, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[332, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[333, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[334, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[335, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[336, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[337, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[338, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[339, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[340, "polars.Series.argsort"]], "arr (polars.series property)": [[341, "polars.Series.arr"]], "cast() (polars.series method)": [[342, "polars.Series.cast"]], "cat (polars.series property)": [[343, "polars.Series.cat"]], "ceil() (polars.series method)": [[344, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[345, "polars.Series.chunk_lengths"]], "cleared() (polars.series method)": [[346, "polars.Series.cleared"]], "clip() (polars.series method)": [[347, "polars.Series.clip"]], "clip_max() (polars.series method)": [[348, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[349, "polars.Series.clip_min"]], "clone() (polars.series method)": [[350, "polars.Series.clone"]], "cos() (polars.series method)": [[351, "polars.Series.cos"]], "cosh() (polars.series method)": [[352, "polars.Series.cosh"]], "cummax() (polars.series method)": [[353, "polars.Series.cummax"]], "cummin() (polars.series method)": [[354, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[355, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[356, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[357, "polars.Series.cumulative_eval"]], "describe() (polars.series method)": [[358, "polars.Series.describe"]], "diff() (polars.series method)": [[359, "polars.Series.diff"]], "dot() (polars.series method)": [[360, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[361, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[362, "polars.Series.drop_nulls"]], "dt (polars.series property)": [[363, "polars.Series.dt"]], "dtype (polars.series property)": [[364, "polars.Series.dtype"]], "entropy() (polars.series method)": [[365, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[366, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[367, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[368, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[369, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[370, "polars.Series.exp"]], "explode() (polars.series method)": [[371, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[372, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[373, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[374, "polars.Series.fill_null"]], "filter() (polars.series method)": [[375, "polars.Series.filter"]], "flags (polars.series property)": [[376, "polars.Series.flags"]], "floor() (polars.series method)": [[377, "polars.Series.floor"]], "has_validity() (polars.series method)": [[378, "polars.Series.has_validity"]], "hash() (polars.series method)": [[379, "polars.Series.hash"]], "head() (polars.series method)": [[380, "polars.Series.head"]], "inner_dtype (polars.series property)": [[381, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[382, "polars.Series.interpolate"]], "is_boolean() (polars.series method)": [[383, "polars.Series.is_boolean"]], "is_datelike() (polars.series method)": [[384, "polars.Series.is_datelike"]], "is_duplicated() (polars.series method)": [[385, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[386, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[387, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[388, "polars.Series.is_first"]], "is_float() (polars.series method)": [[389, "polars.Series.is_float"]], "is_in() (polars.series method)": [[390, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[391, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[392, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[393, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[394, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[395, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[396, "polars.Series.is_numeric"]], "is_unique() (polars.series method)": [[397, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[398, "polars.Series.is_utf8"]], "kurtosis() (polars.series method)": [[399, "polars.Series.kurtosis"]], "len() (polars.series method)": [[400, "polars.Series.len"]], "limit() (polars.series method)": [[401, "polars.Series.limit"]], "log() (polars.series method)": [[402, "polars.Series.log"]], "log10() (polars.series method)": [[403, "polars.Series.log10"]], "max() (polars.series method)": [[404, "polars.Series.max"]], "mean() (polars.series method)": [[405, "polars.Series.mean"]], "median() (polars.series method)": [[406, "polars.Series.median"]], "min() (polars.series method)": [[407, "polars.Series.min"]], "mode() (polars.series method)": [[408, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[409, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[410, "polars.Series.n_unique"]], "name (polars.series property)": [[411, "polars.Series.name"]], "nan_max() (polars.series method)": [[412, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[413, "polars.Series.nan_min"]], "null_count() (polars.series method)": [[414, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[415, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[416, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[417, "polars.Series.peak_min"]], "product() (polars.series method)": [[418, "polars.Series.product"]], "quantile() (polars.series method)": [[419, "polars.Series.quantile"]], "rank() (polars.series method)": [[420, "polars.Series.rank"]], "rechunk() (polars.series method)": [[421, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[422, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[423, "polars.Series.rename"]], "reshape() (polars.series method)": [[424, "polars.Series.reshape"]], "reverse() (polars.series method)": [[425, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[426, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[427, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[428, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[429, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[430, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[431, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[432, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[433, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[434, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[435, "polars.Series.rolling_var"]], "round() (polars.series method)": [[436, "polars.Series.round"]], "sample() (polars.series method)": [[437, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[438, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[439, "polars.Series.series_equal"]], "set() (polars.series method)": [[440, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[441, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[442, "polars.Series.set_sorted"]], "shape (polars.series property)": [[443, "polars.Series.shape"]], "shift() (polars.series method)": [[444, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[445, "polars.Series.shift_and_fill"]], "shrink_to_fit() (polars.series method)": [[446, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[447, "polars.Series.shuffle"]], "sign() (polars.series method)": [[448, "polars.Series.sign"]], "sin() (polars.series method)": [[449, "polars.Series.sin"]], "sinh() (polars.series method)": [[450, "polars.Series.sinh"]], "skew() (polars.series method)": [[451, "polars.Series.skew"]], "slice() (polars.series method)": [[452, "polars.Series.slice"]], "sort() (polars.series method)": [[453, "polars.Series.sort"]], "sqrt() (polars.series method)": [[454, "polars.Series.sqrt"]], "std() (polars.series method)": [[455, "polars.Series.std"]], "str (polars.series property)": [[456, "polars.Series.str"]], "sum() (polars.series method)": [[457, "polars.Series.sum"]], "tail() (polars.series method)": [[458, "polars.Series.tail"]], "take() (polars.series method)": [[459, "polars.Series.take"]], "take_every() (polars.series method)": [[460, "polars.Series.take_every"]], "tan() (polars.series method)": [[461, "polars.Series.tan"]], "tanh() (polars.series method)": [[462, "polars.Series.tanh"]], "time_unit (polars.series property)": [[463, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[464, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[465, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[466, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[467, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[468, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[469, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[470, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[471, "polars.Series.top_k"]], "unique() (polars.series method)": [[472, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[473, "polars.Series.unique_counts"]], "value_counts() (polars.series method)": [[474, "polars.Series.value_counts"]], "var() (polars.series method)": [[475, "polars.Series.var"]], "view() (polars.series method)": [[476, "polars.Series.view"]], "zip_with() (polars.series method)": [[477, "polars.Series.zip_with"]], "stringcache (class in polars)": [[478, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[478, "polars.StringCache.__init__"]], "all() (in module polars)": [[479, "polars.all"]], "any() (in module polars)": [[480, "polars.any"]], "apply() (in module polars)": [[481, "polars.apply"]], "arange() (in module polars)": [[482, "polars.arange"]], "arg_where() (in module polars)": [[483, "polars.arg_where"]], "argsort_by() (in module polars)": [[484, "polars.argsort_by"]], "avg() (in module polars)": [[485, "polars.avg"]], "coalesce() (in module polars)": [[486, "polars.coalesce"]], "col() (in module polars)": [[487, "polars.col"]], "collect_all() (in module polars)": [[488, "polars.collect_all"]], "concat() (in module polars)": [[489, "polars.concat"]], "concat_list() (in module polars)": [[490, "polars.concat_list"]], "concat_str() (in module polars)": [[491, "polars.concat_str"]], "count() (in module polars)": [[492, "polars.count"]], "cov() (in module polars)": [[493, "polars.cov"]], "cumfold() (in module polars)": [[494, "polars.cumfold"]], "cumsum() (in module polars)": [[495, "polars.cumsum"]], "cut() (in module polars)": [[496, "polars.cut"]], "binary (class in polars.datatypes)": [[497, "polars.datatypes.Binary"]], "__init__() (polars.datatypes.binary method)": [[497, "polars.datatypes.Binary.__init__"]], "boolean (class in polars.datatypes)": [[498, "polars.datatypes.Boolean"]], "__init__() (polars.datatypes.boolean method)": [[498, "polars.datatypes.Boolean.__init__"]], "categorical (class in polars.datatypes)": [[499, "polars.datatypes.Categorical"]], "__init__() (polars.datatypes.categorical method)": [[499, "polars.datatypes.Categorical.__init__"]], "datatype (class in polars.datatypes)": [[500, "polars.datatypes.DataType"]], "__init__() (polars.datatypes.datatype method)": [[500, "polars.datatypes.DataType.__init__"]], "date (class in polars.datatypes)": [[501, "polars.datatypes.Date"]], "__init__() (polars.datatypes.date method)": [[501, "polars.datatypes.Date.__init__"]], "datetime (class in polars.datatypes)": [[502, "polars.datatypes.Datetime"]], "__init__() (polars.datatypes.datetime method)": [[502, "polars.datatypes.Datetime.__init__"]], "duration (class in polars.datatypes)": [[503, "polars.datatypes.Duration"]], "__init__() (polars.datatypes.duration method)": [[503, "polars.datatypes.Duration.__init__"]], "float32 (class in polars.datatypes)": [[504, "polars.datatypes.Float32"]], "__init__() (polars.datatypes.float32 method)": [[504, "polars.datatypes.Float32.__init__"]], "float64 (class in polars.datatypes)": [[505, "polars.datatypes.Float64"]], "__init__() (polars.datatypes.float64 method)": [[505, "polars.datatypes.Float64.__init__"]], "int16 (class in polars.datatypes)": [[506, "polars.datatypes.Int16"]], "__init__() (polars.datatypes.int16 method)": [[506, "polars.datatypes.Int16.__init__"]], "int32 (class in polars.datatypes)": [[507, "polars.datatypes.Int32"]], "__init__() (polars.datatypes.int32 method)": [[507, "polars.datatypes.Int32.__init__"]], "int64 (class in polars.datatypes)": [[508, "polars.datatypes.Int64"]], "__init__() (polars.datatypes.int64 method)": [[508, "polars.datatypes.Int64.__init__"]], "int8 (class in polars.datatypes)": [[509, "polars.datatypes.Int8"]], "__init__() (polars.datatypes.int8 method)": [[509, "polars.datatypes.Int8.__init__"]], "list (class in polars.datatypes)": [[510, "polars.datatypes.List"]], "__init__() (polars.datatypes.list method)": [[510, "polars.datatypes.List.__init__"]], "null (class in polars.datatypes)": [[511, "polars.datatypes.Null"]], "__init__() (polars.datatypes.null method)": [[511, "polars.datatypes.Null.__init__"]], "object (class in polars.datatypes)": [[512, "polars.datatypes.Object"]], "__init__() (polars.datatypes.object method)": [[512, "polars.datatypes.Object.__init__"]], "struct (class in polars.datatypes)": [[513, "polars.datatypes.Struct"]], "__init__() (polars.datatypes.struct method)": [[513, "polars.datatypes.Struct.__init__"]], "time (class in polars.datatypes)": [[514, "polars.datatypes.Time"]], "__init__() (polars.datatypes.time method)": [[514, "polars.datatypes.Time.__init__"]], "uint16 (class in polars.datatypes)": [[515, "polars.datatypes.UInt16"]], "__init__() (polars.datatypes.uint16 method)": [[515, "polars.datatypes.UInt16.__init__"]], "uint32 (class in polars.datatypes)": [[516, "polars.datatypes.UInt32"]], "__init__() (polars.datatypes.uint32 method)": [[516, "polars.datatypes.UInt32.__init__"]], "uint64 (class in polars.datatypes)": [[517, "polars.datatypes.UInt64"]], "__init__() (polars.datatypes.uint64 method)": [[517, "polars.datatypes.UInt64.__init__"]], "uint8 (class in polars.datatypes)": [[518, "polars.datatypes.UInt8"]], "__init__() (polars.datatypes.uint8 method)": [[518, "polars.datatypes.UInt8.__init__"]], "unknown (class in polars.datatypes)": [[519, "polars.datatypes.Unknown"]], "__init__() (polars.datatypes.unknown method)": [[519, "polars.datatypes.Unknown.__init__"]], "utf8 (class in polars.datatypes)": [[520, "polars.datatypes.Utf8"]], "__init__() (polars.datatypes.utf8 method)": [[520, "polars.datatypes.Utf8.__init__"]], "get_idx_type() (in module polars.datatypes)": [[521, "polars.datatypes.get_idx_type"]], "date() (in module polars)": [[522, "polars.date"]], "date_range() (in module polars)": [[523, "polars.date_range"]], "datetime() (in module polars)": [[524, "polars.datetime"]], "duration() (in module polars)": [[525, "polars.duration"]], "element() (in module polars)": [[526, "polars.element"]], "arrowerror": [[527, "polars.exceptions.ArrowError"]], "computeerror": [[528, "polars.exceptions.ComputeError"]], "duplicateerror": [[529, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[530, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[531, "polars.exceptions.NoDataError"]], "norowsreturned": [[532, "polars.exceptions.NoRowsReturned"]], "notfounderror": [[533, "polars.exceptions.NotFoundError"]], "panicexception": [[534, "polars.exceptions.PanicException"]], "rowsexception": [[535, "polars.exceptions.RowsException"]], "schemaerror": [[536, "polars.exceptions.SchemaError"]], "shapeerror": [[537, "polars.exceptions.ShapeError"]], "toomanyrowsreturned": [[538, "polars.exceptions.TooManyRowsReturned"]], "exclude() (in module polars)": [[539, "polars.exclude"]], "first() (in module polars)": [[540, "polars.first"]], "fold() (in module polars)": [[541, "polars.fold"]], "format() (in module polars)": [[542, "polars.format"]], "from_arrow() (in module polars)": [[543, "polars.from_arrow"]], "from_dict() (in module polars)": [[544, "polars.from_dict"]], "from_dicts() (in module polars)": [[545, "polars.from_dicts"]], "from_numpy() (in module polars)": [[546, "polars.from_numpy"]], "from_pandas() (in module polars)": [[547, "polars.from_pandas"]], "from_records() (in module polars)": [[548, "polars.from_records"]], "get_dummies() (in module polars)": [[549, "polars.get_dummies"]], "groups() (in module polars)": [[550, "polars.groups"]], "head() (in module polars)": [[551, "polars.head"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[552, "polars.internals.batched.BatchedCsvReader.next_batches"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[553, "polars.internals.dataframe.groupby.GroupBy.agg"]], "agg_list() (polars.internals.dataframe.groupby.groupby method)": [[554, "polars.internals.dataframe.groupby.GroupBy.agg_list"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[555, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[556, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[557, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[558, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[559, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[560, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[561, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[562, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[563, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[564, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "pivot() (polars.internals.dataframe.groupby.groupby method)": [[565, "polars.internals.dataframe.groupby.GroupBy.pivot"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[566, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[567, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[568, "polars.internals.dataframe.groupby.GroupBy.tail"]], "count() (polars.internals.dataframe.pivot.pivotops method)": [[569, "polars.internals.dataframe.pivot.PivotOps.count"]], "first() (polars.internals.dataframe.pivot.pivotops method)": [[570, "polars.internals.dataframe.pivot.PivotOps.first"]], "last() (polars.internals.dataframe.pivot.pivotops method)": [[571, "polars.internals.dataframe.pivot.PivotOps.last"]], "max() (polars.internals.dataframe.pivot.pivotops method)": [[572, "polars.internals.dataframe.pivot.PivotOps.max"]], "mean() (polars.internals.dataframe.pivot.pivotops method)": [[573, "polars.internals.dataframe.pivot.PivotOps.mean"]], "median() (polars.internals.dataframe.pivot.pivotops method)": [[574, "polars.internals.dataframe.pivot.PivotOps.median"]], "min() (polars.internals.dataframe.pivot.pivotops method)": [[575, "polars.internals.dataframe.pivot.PivotOps.min"]], "sum() (polars.internals.dataframe.pivot.pivotops method)": [[576, "polars.internals.dataframe.pivot.PivotOps.sum"]], "set_ordering() (polars.internals.expr.categorical.exprcatnamespace method)": [[577, "polars.internals.expr.categorical.ExprCatNameSpace.set_ordering"]], "cast_time_unit() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[578, "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit"]], "cast_time_zone() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[579, "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_zone"]], "day() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[580, "polars.internals.expr.datetime.ExprDateTimeNameSpace.day"]], "days() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[581, "polars.internals.expr.datetime.ExprDateTimeNameSpace.days"]], "epoch() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[582, "polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch"]], "hour() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[583, "polars.internals.expr.datetime.ExprDateTimeNameSpace.hour"]], "hours() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[584, "polars.internals.expr.datetime.ExprDateTimeNameSpace.hours"]], "iso_year() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[585, "polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year"]], "microsecond() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[586, "polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond"]], "microseconds() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[587, "polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds"]], "millisecond() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[588, "polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond"]], "milliseconds() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[589, "polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds"]], "minute() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[590, "polars.internals.expr.datetime.ExprDateTimeNameSpace.minute"]], "minutes() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[591, "polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes"]], "month() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[592, "polars.internals.expr.datetime.ExprDateTimeNameSpace.month"]], "nanosecond() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[593, "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond"]], "nanoseconds() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[594, "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds"]], "offset_by() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[595, "polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by"]], "ordinal_day() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[596, "polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day"]], "quarter() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[597, "polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter"]], "second() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[598, "polars.internals.expr.datetime.ExprDateTimeNameSpace.second"]], "seconds() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[599, "polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds"]], "strftime() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[600, "polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime"]], "timestamp() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[601, "polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp"]], "truncate() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[602, "polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate"]], "week() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[603, "polars.internals.expr.datetime.ExprDateTimeNameSpace.week"]], "weekday() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[604, "polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday"]], "with_time_unit() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[605, "polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit"]], "year() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[606, "polars.internals.expr.datetime.ExprDateTimeNameSpace.year"]], "arg_max() (polars.internals.expr.list.exprlistnamespace method)": [[607, "polars.internals.expr.list.ExprListNameSpace.arg_max"]], "arg_min() (polars.internals.expr.list.exprlistnamespace method)": [[608, "polars.internals.expr.list.ExprListNameSpace.arg_min"]], "concat() (polars.internals.expr.list.exprlistnamespace method)": [[609, "polars.internals.expr.list.ExprListNameSpace.concat"]], "contains() (polars.internals.expr.list.exprlistnamespace method)": [[610, "polars.internals.expr.list.ExprListNameSpace.contains"]], "diff() (polars.internals.expr.list.exprlistnamespace method)": [[611, "polars.internals.expr.list.ExprListNameSpace.diff"]], "eval() (polars.internals.expr.list.exprlistnamespace method)": [[612, "polars.internals.expr.list.ExprListNameSpace.eval"]], "first() (polars.internals.expr.list.exprlistnamespace method)": [[613, "polars.internals.expr.list.ExprListNameSpace.first"]], "get() (polars.internals.expr.list.exprlistnamespace method)": [[614, "polars.internals.expr.list.ExprListNameSpace.get"]], "head() (polars.internals.expr.list.exprlistnamespace method)": [[615, "polars.internals.expr.list.ExprListNameSpace.head"]], "join() (polars.internals.expr.list.exprlistnamespace method)": [[616, "polars.internals.expr.list.ExprListNameSpace.join"]], "last() (polars.internals.expr.list.exprlistnamespace method)": [[617, "polars.internals.expr.list.ExprListNameSpace.last"]], "lengths() (polars.internals.expr.list.exprlistnamespace method)": [[618, "polars.internals.expr.list.ExprListNameSpace.lengths"]], "max() (polars.internals.expr.list.exprlistnamespace method)": [[619, "polars.internals.expr.list.ExprListNameSpace.max"]], "mean() (polars.internals.expr.list.exprlistnamespace method)": [[620, "polars.internals.expr.list.ExprListNameSpace.mean"]], "min() (polars.internals.expr.list.exprlistnamespace method)": [[621, "polars.internals.expr.list.ExprListNameSpace.min"]], "reverse() (polars.internals.expr.list.exprlistnamespace method)": [[622, "polars.internals.expr.list.ExprListNameSpace.reverse"]], "shift() (polars.internals.expr.list.exprlistnamespace method)": [[623, "polars.internals.expr.list.ExprListNameSpace.shift"]], "slice() (polars.internals.expr.list.exprlistnamespace method)": [[624, "polars.internals.expr.list.ExprListNameSpace.slice"]], "sort() (polars.internals.expr.list.exprlistnamespace method)": [[625, "polars.internals.expr.list.ExprListNameSpace.sort"]], "sum() (polars.internals.expr.list.exprlistnamespace method)": [[626, "polars.internals.expr.list.ExprListNameSpace.sum"]], "tail() (polars.internals.expr.list.exprlistnamespace method)": [[627, "polars.internals.expr.list.ExprListNameSpace.tail"]], "to_struct() (polars.internals.expr.list.exprlistnamespace method)": [[628, "polars.internals.expr.list.ExprListNameSpace.to_struct"]], "unique() (polars.internals.expr.list.exprlistnamespace method)": [[629, "polars.internals.expr.list.ExprListNameSpace.unique"]], "output_name() (polars.internals.expr.meta.exprmetanamespace method)": [[630, "polars.internals.expr.meta.ExprMetaNameSpace.output_name"]], "pop() (polars.internals.expr.meta.exprmetanamespace method)": [[631, "polars.internals.expr.meta.ExprMetaNameSpace.pop"]], "root_names() (polars.internals.expr.meta.exprmetanamespace method)": [[632, "polars.internals.expr.meta.ExprMetaNameSpace.root_names"]], "undo_aliases() (polars.internals.expr.meta.exprmetanamespace method)": [[633, "polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases"]], "concat() (polars.internals.expr.string.exprstringnamespace method)": [[634, "polars.internals.expr.string.ExprStringNameSpace.concat"]], "contains() (polars.internals.expr.string.exprstringnamespace method)": [[635, "polars.internals.expr.string.ExprStringNameSpace.contains"]], "count_match() (polars.internals.expr.string.exprstringnamespace method)": [[636, "polars.internals.expr.string.ExprStringNameSpace.count_match"]], "decode() (polars.internals.expr.string.exprstringnamespace method)": [[637, "polars.internals.expr.string.ExprStringNameSpace.decode"]], "encode() (polars.internals.expr.string.exprstringnamespace method)": [[638, "polars.internals.expr.string.ExprStringNameSpace.encode"]], "ends_with() (polars.internals.expr.string.exprstringnamespace method)": [[639, "polars.internals.expr.string.ExprStringNameSpace.ends_with"]], "extract() (polars.internals.expr.string.exprstringnamespace method)": [[640, "polars.internals.expr.string.ExprStringNameSpace.extract"]], "extract_all() (polars.internals.expr.string.exprstringnamespace method)": [[641, "polars.internals.expr.string.ExprStringNameSpace.extract_all"]], "json_path_match() (polars.internals.expr.string.exprstringnamespace method)": [[642, "polars.internals.expr.string.ExprStringNameSpace.json_path_match"]], "lengths() (polars.internals.expr.string.exprstringnamespace method)": [[643, "polars.internals.expr.string.ExprStringNameSpace.lengths"]], "ljust() (polars.internals.expr.string.exprstringnamespace method)": [[644, "polars.internals.expr.string.ExprStringNameSpace.ljust"]], "lstrip() (polars.internals.expr.string.exprstringnamespace method)": [[645, "polars.internals.expr.string.ExprStringNameSpace.lstrip"]], "replace() (polars.internals.expr.string.exprstringnamespace method)": [[646, "polars.internals.expr.string.ExprStringNameSpace.replace"]], "replace_all() (polars.internals.expr.string.exprstringnamespace method)": [[647, "polars.internals.expr.string.ExprStringNameSpace.replace_all"]], "rjust() (polars.internals.expr.string.exprstringnamespace method)": [[648, "polars.internals.expr.string.ExprStringNameSpace.rjust"]], "rstrip() (polars.internals.expr.string.exprstringnamespace method)": [[649, "polars.internals.expr.string.ExprStringNameSpace.rstrip"]], "slice() (polars.internals.expr.string.exprstringnamespace method)": [[650, "polars.internals.expr.string.ExprStringNameSpace.slice"]], "split() (polars.internals.expr.string.exprstringnamespace method)": [[651, "polars.internals.expr.string.ExprStringNameSpace.split"]], "split_exact() (polars.internals.expr.string.exprstringnamespace method)": [[652, "polars.internals.expr.string.ExprStringNameSpace.split_exact"]], "splitn() (polars.internals.expr.string.exprstringnamespace method)": [[653, "polars.internals.expr.string.ExprStringNameSpace.splitn"]], "starts_with() (polars.internals.expr.string.exprstringnamespace method)": [[654, "polars.internals.expr.string.ExprStringNameSpace.starts_with"]], "strip() (polars.internals.expr.string.exprstringnamespace method)": [[655, "polars.internals.expr.string.ExprStringNameSpace.strip"]], "strptime() (polars.internals.expr.string.exprstringnamespace method)": [[656, "polars.internals.expr.string.ExprStringNameSpace.strptime"]], "to_lowercase() (polars.internals.expr.string.exprstringnamespace method)": [[657, "polars.internals.expr.string.ExprStringNameSpace.to_lowercase"]], "to_uppercase() (polars.internals.expr.string.exprstringnamespace method)": [[658, "polars.internals.expr.string.ExprStringNameSpace.to_uppercase"]], "zfill() (polars.internals.expr.string.exprstringnamespace method)": [[659, "polars.internals.expr.string.ExprStringNameSpace.zfill"]], "field() (polars.internals.expr.struct.exprstructnamespace method)": [[660, "polars.internals.expr.struct.ExprStructNameSpace.field"]], "rename_fields() (polars.internals.expr.struct.exprstructnamespace method)": [[661, "polars.internals.expr.struct.ExprStructNameSpace.rename_fields"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[662, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[663, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[664, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[665, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "set_ordering() (polars.internals.series.categorical.catnamespace method)": [[666, "polars.internals.series.categorical.CatNameSpace.set_ordering"]], "cast_time_unit() (polars.internals.series.datetime.datetimenamespace method)": [[667, "polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit"]], "cast_time_zone() (polars.internals.series.datetime.datetimenamespace method)": [[668, "polars.internals.series.datetime.DateTimeNameSpace.cast_time_zone"]], "day() (polars.internals.series.datetime.datetimenamespace method)": [[669, "polars.internals.series.datetime.DateTimeNameSpace.day"]], "days() (polars.internals.series.datetime.datetimenamespace method)": [[670, "polars.internals.series.datetime.DateTimeNameSpace.days"]], "epoch() (polars.internals.series.datetime.datetimenamespace method)": [[671, "polars.internals.series.datetime.DateTimeNameSpace.epoch"]], "hour() (polars.internals.series.datetime.datetimenamespace method)": [[672, "polars.internals.series.datetime.DateTimeNameSpace.hour"]], "hours() (polars.internals.series.datetime.datetimenamespace method)": [[673, "polars.internals.series.datetime.DateTimeNameSpace.hours"]], "iso_year() (polars.internals.series.datetime.datetimenamespace method)": [[674, "polars.internals.series.datetime.DateTimeNameSpace.iso_year"]], "max() (polars.internals.series.datetime.datetimenamespace method)": [[675, "polars.internals.series.datetime.DateTimeNameSpace.max"]], "mean() (polars.internals.series.datetime.datetimenamespace method)": [[676, "polars.internals.series.datetime.DateTimeNameSpace.mean"]], "median() (polars.internals.series.datetime.datetimenamespace method)": [[677, "polars.internals.series.datetime.DateTimeNameSpace.median"]], "microsecond() (polars.internals.series.datetime.datetimenamespace method)": [[678, "polars.internals.series.datetime.DateTimeNameSpace.microsecond"]], "microseconds() (polars.internals.series.datetime.datetimenamespace method)": [[679, "polars.internals.series.datetime.DateTimeNameSpace.microseconds"]], "millisecond() (polars.internals.series.datetime.datetimenamespace method)": [[680, "polars.internals.series.datetime.DateTimeNameSpace.millisecond"]], "milliseconds() (polars.internals.series.datetime.datetimenamespace method)": [[681, "polars.internals.series.datetime.DateTimeNameSpace.milliseconds"]], "min() (polars.internals.series.datetime.datetimenamespace method)": [[682, "polars.internals.series.datetime.DateTimeNameSpace.min"]], "minute() (polars.internals.series.datetime.datetimenamespace method)": [[683, "polars.internals.series.datetime.DateTimeNameSpace.minute"]], "minutes() (polars.internals.series.datetime.datetimenamespace method)": [[684, "polars.internals.series.datetime.DateTimeNameSpace.minutes"]], "month() (polars.internals.series.datetime.datetimenamespace method)": [[685, "polars.internals.series.datetime.DateTimeNameSpace.month"]], "nanosecond() (polars.internals.series.datetime.datetimenamespace method)": [[686, "polars.internals.series.datetime.DateTimeNameSpace.nanosecond"]], "nanoseconds() (polars.internals.series.datetime.datetimenamespace method)": [[687, "polars.internals.series.datetime.DateTimeNameSpace.nanoseconds"]], "offset_by() (polars.internals.series.datetime.datetimenamespace method)": [[688, "polars.internals.series.datetime.DateTimeNameSpace.offset_by"]], "ordinal_day() (polars.internals.series.datetime.datetimenamespace method)": [[689, "polars.internals.series.datetime.DateTimeNameSpace.ordinal_day"]], "quarter() (polars.internals.series.datetime.datetimenamespace method)": [[690, "polars.internals.series.datetime.DateTimeNameSpace.quarter"]], "second() (polars.internals.series.datetime.datetimenamespace method)": [[691, "polars.internals.series.datetime.DateTimeNameSpace.second"]], "seconds() (polars.internals.series.datetime.datetimenamespace method)": [[692, "polars.internals.series.datetime.DateTimeNameSpace.seconds"]], "strftime() (polars.internals.series.datetime.datetimenamespace method)": [[693, "polars.internals.series.datetime.DateTimeNameSpace.strftime"]], "timestamp() (polars.internals.series.datetime.datetimenamespace method)": [[694, "polars.internals.series.datetime.DateTimeNameSpace.timestamp"]], "truncate() (polars.internals.series.datetime.datetimenamespace method)": [[695, "polars.internals.series.datetime.DateTimeNameSpace.truncate"]], "week() (polars.internals.series.datetime.datetimenamespace method)": [[696, "polars.internals.series.datetime.DateTimeNameSpace.week"]], "weekday() (polars.internals.series.datetime.datetimenamespace method)": [[697, "polars.internals.series.datetime.DateTimeNameSpace.weekday"]], "with_time_unit() (polars.internals.series.datetime.datetimenamespace method)": [[698, "polars.internals.series.datetime.DateTimeNameSpace.with_time_unit"]], "year() (polars.internals.series.datetime.datetimenamespace method)": [[699, "polars.internals.series.datetime.DateTimeNameSpace.year"]], "arg_max() (polars.internals.series.list.listnamespace method)": [[700, "polars.internals.series.list.ListNameSpace.arg_max"]], "arg_min() (polars.internals.series.list.listnamespace method)": [[701, "polars.internals.series.list.ListNameSpace.arg_min"]], "concat() (polars.internals.series.list.listnamespace method)": [[702, "polars.internals.series.list.ListNameSpace.concat"]], "contains() (polars.internals.series.list.listnamespace method)": [[703, "polars.internals.series.list.ListNameSpace.contains"]], "diff() (polars.internals.series.list.listnamespace method)": [[704, "polars.internals.series.list.ListNameSpace.diff"]], "eval() (polars.internals.series.list.listnamespace method)": [[705, "polars.internals.series.list.ListNameSpace.eval"]], "first() (polars.internals.series.list.listnamespace method)": [[706, "polars.internals.series.list.ListNameSpace.first"]], "get() (polars.internals.series.list.listnamespace method)": [[707, "polars.internals.series.list.ListNameSpace.get"]], "head() (polars.internals.series.list.listnamespace method)": [[708, "polars.internals.series.list.ListNameSpace.head"]], "join() (polars.internals.series.list.listnamespace method)": [[709, "polars.internals.series.list.ListNameSpace.join"]], "last() (polars.internals.series.list.listnamespace method)": [[710, "polars.internals.series.list.ListNameSpace.last"]], "lengths() (polars.internals.series.list.listnamespace method)": [[711, "polars.internals.series.list.ListNameSpace.lengths"]], "max() (polars.internals.series.list.listnamespace method)": [[712, "polars.internals.series.list.ListNameSpace.max"]], "mean() (polars.internals.series.list.listnamespace method)": [[713, "polars.internals.series.list.ListNameSpace.mean"]], "min() (polars.internals.series.list.listnamespace method)": [[714, "polars.internals.series.list.ListNameSpace.min"]], "reverse() (polars.internals.series.list.listnamespace method)": [[715, "polars.internals.series.list.ListNameSpace.reverse"]], "shift() (polars.internals.series.list.listnamespace method)": [[716, "polars.internals.series.list.ListNameSpace.shift"]], "slice() (polars.internals.series.list.listnamespace method)": [[717, "polars.internals.series.list.ListNameSpace.slice"]], "sort() (polars.internals.series.list.listnamespace method)": [[718, "polars.internals.series.list.ListNameSpace.sort"]], "sum() (polars.internals.series.list.listnamespace method)": [[719, "polars.internals.series.list.ListNameSpace.sum"]], "tail() (polars.internals.series.list.listnamespace method)": [[720, "polars.internals.series.list.ListNameSpace.tail"]], "unique() (polars.internals.series.list.listnamespace method)": [[721, "polars.internals.series.list.ListNameSpace.unique"]], "concat() (polars.internals.series.string.stringnamespace method)": [[722, "polars.internals.series.string.StringNameSpace.concat"]], "contains() (polars.internals.series.string.stringnamespace method)": [[723, "polars.internals.series.string.StringNameSpace.contains"]], "count_match() (polars.internals.series.string.stringnamespace method)": [[724, "polars.internals.series.string.StringNameSpace.count_match"]], "decode() (polars.internals.series.string.stringnamespace method)": [[725, "polars.internals.series.string.StringNameSpace.decode"]], "encode() (polars.internals.series.string.stringnamespace method)": [[726, "polars.internals.series.string.StringNameSpace.encode"]], "ends_with() (polars.internals.series.string.stringnamespace method)": [[727, "polars.internals.series.string.StringNameSpace.ends_with"]], "extract() (polars.internals.series.string.stringnamespace method)": [[728, "polars.internals.series.string.StringNameSpace.extract"]], "extract_all() (polars.internals.series.string.stringnamespace method)": [[729, "polars.internals.series.string.StringNameSpace.extract_all"]], "json_path_match() (polars.internals.series.string.stringnamespace method)": [[730, "polars.internals.series.string.StringNameSpace.json_path_match"]], "lengths() (polars.internals.series.string.stringnamespace method)": [[731, "polars.internals.series.string.StringNameSpace.lengths"]], "ljust() (polars.internals.series.string.stringnamespace method)": [[732, "polars.internals.series.string.StringNameSpace.ljust"]], "lstrip() (polars.internals.series.string.stringnamespace method)": [[733, "polars.internals.series.string.StringNameSpace.lstrip"]], "replace() (polars.internals.series.string.stringnamespace method)": [[734, "polars.internals.series.string.StringNameSpace.replace"]], "replace_all() (polars.internals.series.string.stringnamespace method)": [[735, "polars.internals.series.string.StringNameSpace.replace_all"]], "rjust() (polars.internals.series.string.stringnamespace method)": [[736, "polars.internals.series.string.StringNameSpace.rjust"]], "rstrip() (polars.internals.series.string.stringnamespace method)": [[737, "polars.internals.series.string.StringNameSpace.rstrip"]], "slice() (polars.internals.series.string.stringnamespace method)": [[738, "polars.internals.series.string.StringNameSpace.slice"]], "split() (polars.internals.series.string.stringnamespace method)": [[739, "polars.internals.series.string.StringNameSpace.split"]], "split_exact() (polars.internals.series.string.stringnamespace method)": [[740, "polars.internals.series.string.StringNameSpace.split_exact"]], "splitn() (polars.internals.series.string.stringnamespace method)": [[741, "polars.internals.series.string.StringNameSpace.splitn"]], "starts_with() (polars.internals.series.string.stringnamespace method)": [[742, "polars.internals.series.string.StringNameSpace.starts_with"]], "strip() (polars.internals.series.string.stringnamespace method)": [[743, "polars.internals.series.string.StringNameSpace.strip"]], "strptime() (polars.internals.series.string.stringnamespace method)": [[744, "polars.internals.series.string.StringNameSpace.strptime"]], "to_lowercase() (polars.internals.series.string.stringnamespace method)": [[745, "polars.internals.series.string.StringNameSpace.to_lowercase"]], "to_uppercase() (polars.internals.series.string.stringnamespace method)": [[746, "polars.internals.series.string.StringNameSpace.to_uppercase"]], "zfill() (polars.internals.series.string.stringnamespace method)": [[747, "polars.internals.series.string.StringNameSpace.zfill"]], "field() (polars.internals.series.struct.structnamespace method)": [[748, "polars.internals.series.struct.StructNameSpace.field"]], "fields (polars.internals.series.struct.structnamespace property)": [[749, "polars.internals.series.struct.StructNameSpace.fields"]], "rename_fields() (polars.internals.series.struct.structnamespace method)": [[750, "polars.internals.series.struct.StructNameSpace.rename_fields"]], "to_frame() (polars.internals.series.struct.structnamespace method)": [[751, "polars.internals.series.struct.StructNameSpace.to_frame"]], "list() (in module polars)": [[752, "polars.list"]], "lit() (in module polars)": [[753, "polars.lit"]], "map() (in module polars)": [[754, "polars.map"]], "max() (in module polars)": [[755, "polars.max"]], "mean() (in module polars)": [[756, "polars.mean"]], "median() (in module polars)": [[757, "polars.median"]], "min() (in module polars)": [[758, "polars.min"]], "n_unique() (in module polars)": [[759, "polars.n_unique"]], "pearson_corr() (in module polars)": [[760, "polars.pearson_corr"]], "quantile() (in module polars)": [[761, "polars.quantile"]], "read_avro() (in module polars)": [[762, "polars.read_avro"]], "read_csv() (in module polars)": [[763, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[764, "polars.read_csv_batched"]], "read_excel() (in module polars)": [[765, "polars.read_excel"]], "read_ipc() (in module polars)": [[766, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[767, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[768, "polars.read_json"]], "read_ndjson() (in module polars)": [[769, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[770, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[771, "polars.read_parquet_schema"]], "read_sql() (in module polars)": [[772, "polars.read_sql"]], "repeat() (in module polars)": [[773, "polars.repeat"]], "scan_csv() (in module polars)": [[774, "polars.scan_csv"]], "scan_ds() (in module polars)": [[775, "polars.scan_ds"]], "scan_ipc() (in module polars)": [[776, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[777, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[778, "polars.scan_parquet"]], "select() (in module polars)": [[779, "polars.select"]], "show_versions() (in module polars)": [[780, "polars.show_versions"]], "spearman_rank_corr() (in module polars)": [[781, "polars.spearman_rank_corr"]], "std() (in module polars)": [[782, "polars.std"]], "struct() (in module polars)": [[783, "polars.struct"]], "sum() (in module polars)": [[784, "polars.sum"]], "tail() (in module polars)": [[785, "polars.tail"]], "assert_frame_equal() (in module polars.testing)": [[786, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[787, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.column method)": [[788, "polars.testing.column.__init__"]], "column (class in polars.testing)": [[788, "polars.testing.column"]], "columns() (in module polars.testing)": [[789, "polars.testing.columns"]], "dataframes() (in module polars.testing)": [[790, "polars.testing.dataframes"]], "series() (in module polars.testing)": [[791, "polars.testing.series"]], "threadpool_size() (in module polars)": [[792, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[793, "polars.toggle_string_cache"]], "var() (in module polars)": [[794, "polars.var"]], "when() (in module polars)": [[795, "polars.when"]], "lazyframe (class in polars)": [[804, "polars.LazyFrame"]], "sqlcontext (class in polars)": [[806, "polars.SQLContext"]]}})